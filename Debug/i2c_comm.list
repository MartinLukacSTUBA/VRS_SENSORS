
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08006eb8  08006eb8  00016eb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800733c  0800733c  00020224  2**0
                  CONTENTS
  4 .ARM          00000000  0800733c  0800733c  00020224  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800733c  0800733c  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800733c  0800733c  0001733c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007340  08007340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08007344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000228  08007568  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08007568  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac03  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fc  00000000  00000000  0002ae57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002d158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000850  00000000  00000000  0002dac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005d73  00000000  00000000  0002e310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086ac  00000000  00000000  00034083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ae3a  00000000  00000000  0003c72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b7569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037cc  00000000  00000000  000b75bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ea0 	.word	0x08006ea0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08006ea0 	.word	0x08006ea0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <LL_EXTI_EnableIT_0_31+0x20>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4904      	ldr	r1, [pc, #16]	; (8000c68 <LL_EXTI_EnableIT_0_31+0x20>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	600b      	str	r3, [r1, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	40010400 	.word	0x40010400

08000c6c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <LL_EXTI_EnableIT_32_63+0x20>)
 8000c76:	6a1a      	ldr	r2, [r3, #32]
 8000c78:	4904      	ldr	r1, [pc, #16]	; (8000c8c <LL_EXTI_EnableIT_32_63+0x20>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	620b      	str	r3, [r1, #32]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40010400 	.word	0x40010400

08000c90 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	4904      	ldr	r1, [pc, #16]	; (8000cb4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40010400 	.word	0x40010400

08000cb8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <LL_EXTI_DisableIT_32_63+0x24>)
 8000cc2:	6a1a      	ldr	r2, [r3, #32]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	4904      	ldr	r1, [pc, #16]	; (8000cdc <LL_EXTI_DisableIT_32_63+0x24>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	620b      	str	r3, [r1, #32]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4904      	ldr	r1, [pc, #16]	; (8000d00 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	604b      	str	r3, [r1, #4]

}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40010400 	.word	0x40010400

08000d04 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d10:	4904      	ldr	r1, [pc, #16]	; (8000d24 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	40010400 	.word	0x40010400

08000d28 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	4904      	ldr	r1, [pc, #16]	; (8000d4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	604b      	str	r3, [r1, #4]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40010400 	.word	0x40010400

08000d50 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	4904      	ldr	r1, [pc, #16]	; (8000d74 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40010400 	.word	0x40010400

08000d78 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	4904      	ldr	r1, [pc, #16]	; (8000d98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	608b      	str	r3, [r1, #8]

}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	40010400 	.word	0x40010400

08000d9c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000da8:	4904      	ldr	r1, [pc, #16]	; (8000dbc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40010400 	.word	0x40010400

08000dc0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	4904      	ldr	r1, [pc, #16]	; (8000de4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	608b      	str	r3, [r1, #8]

}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40010400 	.word	0x40010400

08000de8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	4904      	ldr	r1, [pc, #16]	; (8000e0c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40010400 	.word	0x40010400

08000e10 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	4904      	ldr	r1, [pc, #16]	; (8000e30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	60cb      	str	r3, [r1, #12]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	40010400 	.word	0x40010400

08000e34 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e40:	4904      	ldr	r1, [pc, #16]	; (8000e54 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40010400 	.word	0x40010400

08000e58 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	4904      	ldr	r1, [pc, #16]	; (8000e7c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	60cb      	str	r3, [r1, #12]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40010400 	.word	0x40010400

08000e80 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	4904      	ldr	r1, [pc, #16]	; (8000ea4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000e92:	4013      	ands	r3, r2
 8000e94:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40010400 	.word	0x40010400

08000ea8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7a1b      	ldrb	r3, [r3, #8]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80cd 	beq.w	8001058 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d061      	beq.n	8000f8a <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7a5b      	ldrb	r3, [r3, #9]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d01c      	beq.n	8000f08 <LL_EXTI_Init+0x60>
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	dc25      	bgt.n	8000f1e <LL_EXTI_Init+0x76>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <LL_EXTI_Init+0x34>
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d00b      	beq.n	8000ef2 <LL_EXTI_Init+0x4a>
 8000eda:	e020      	b.n	8000f1e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff21 	bl	8000d28 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff feac 	bl	8000c48 <LL_EXTI_EnableIT_0_31>
          break;
 8000ef0:	e018      	b.n	8000f24 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff feca 	bl	8000c90 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff feed 	bl	8000ce0 <LL_EXTI_EnableEvent_0_31>
          break;
 8000f06:	e00d      	b.n	8000f24 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fe9b 	bl	8000c48 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fee2 	bl	8000ce0 <LL_EXTI_EnableEvent_0_31>
          break;
 8000f1c:	e002      	b.n	8000f24 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
          break;
 8000f22:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7a9b      	ldrb	r3, [r3, #10]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d02e      	beq.n	8000f8a <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7a9b      	ldrb	r3, [r3, #10]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d01c      	beq.n	8000f6e <LL_EXTI_Init+0xc6>
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	dc25      	bgt.n	8000f84 <LL_EXTI_Init+0xdc>
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d002      	beq.n	8000f42 <LL_EXTI_Init+0x9a>
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d00b      	beq.n	8000f58 <LL_EXTI_Init+0xb0>
 8000f40:	e020      	b.n	8000f84 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff86 	bl	8000e58 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff11 	bl	8000d78 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000f56:	e019      	b.n	8000f8c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff2f 	bl	8000dc0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff52 	bl	8000e10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000f6c:	e00e      	b.n	8000f8c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff00 	bl	8000d78 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff47 	bl	8000e10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000f82:	e003      	b.n	8000f8c <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
            break;
 8000f88:	e000      	b.n	8000f8c <LL_EXTI_Init+0xe4>
        }
      }
 8000f8a:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d076      	beq.n	8001082 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7a5b      	ldrb	r3, [r3, #9]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d01c      	beq.n	8000fd6 <LL_EXTI_Init+0x12e>
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	dc25      	bgt.n	8000fec <LL_EXTI_Init+0x144>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <LL_EXTI_Init+0x102>
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d00b      	beq.n	8000fc0 <LL_EXTI_Init+0x118>
 8000fa8:	e020      	b.n	8000fec <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fece 	bl	8000d50 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fe57 	bl	8000c6c <LL_EXTI_EnableIT_32_63>
          break;
 8000fbe:	e018      	b.n	8000ff2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe77 	bl	8000cb8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fe98 	bl	8000d04 <LL_EXTI_EnableEvent_32_63>
          break;
 8000fd4:	e00d      	b.n	8000ff2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fe46 	bl	8000c6c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fe8d 	bl	8000d04 <LL_EXTI_EnableEvent_32_63>
          break;
 8000fea:	e002      	b.n	8000ff2 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
          break;
 8000ff0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7a9b      	ldrb	r3, [r3, #10]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d043      	beq.n	8001082 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7a9b      	ldrb	r3, [r3, #10]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d01c      	beq.n	800103c <LL_EXTI_Init+0x194>
 8001002:	2b03      	cmp	r3, #3
 8001004:	dc25      	bgt.n	8001052 <LL_EXTI_Init+0x1aa>
 8001006:	2b01      	cmp	r3, #1
 8001008:	d002      	beq.n	8001010 <LL_EXTI_Init+0x168>
 800100a:	2b02      	cmp	r3, #2
 800100c:	d00b      	beq.n	8001026 <LL_EXTI_Init+0x17e>
 800100e:	e020      	b.n	8001052 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff33 	bl	8000e80 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff febc 	bl	8000d9c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001024:	e02e      	b.n	8001084 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fedc 	bl	8000de8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fefd 	bl	8000e34 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800103a:	e023      	b.n	8001084 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff feab 	bl	8000d9c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fef2 	bl	8000e34 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001050:	e018      	b.n	8001084 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	73fb      	strb	r3, [r7, #15]
            break;
 8001056:	e015      	b.n	8001084 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fe17 	bl	8000c90 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fe5e 	bl	8000d28 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fe21 	bl	8000cb8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fe68 	bl	8000d50 <LL_EXTI_DisableEvent_32_63>
 8001080:	e000      	b.n	8001084 <LL_EXTI_Init+0x1dc>
      }
 8001082:	bf00      	nop
#endif
  }
  return status;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800108e:	b480      	push	{r7}
 8001090:	b089      	sub	sp, #36	; 0x24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa93 f3a3 	rbit	r3, r3
 80010a8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	fab3 f383 	clz	r3, r3
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2103      	movs	r1, #3
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	401a      	ands	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	431a      	orrs	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	601a      	str	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	3724      	adds	r7, #36	; 0x24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	401a      	ands	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	fb01 f303 	mul.w	r3, r1, r3
 8001106:	431a      	orrs	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	605a      	str	r2, [r3, #4]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	613b      	str	r3, [r7, #16]
  return(result);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2103      	movs	r1, #3
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	401a      	ands	r2, r3
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa93 f3a3 	rbit	r3, r3
 8001150:	61bb      	str	r3, [r7, #24]
  return(result);
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	fab3 f383 	clz	r3, r3
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	431a      	orrs	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001166:	bf00      	nop
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001172:	b480      	push	{r7}
 8001174:	b089      	sub	sp, #36	; 0x24
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	613b      	str	r3, [r7, #16]
  return(result);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	fab3 f383 	clz	r3, r3
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2103      	movs	r1, #3
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	401a      	ands	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fab3 f383 	clz	r3, r3
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	431a      	orrs	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	60da      	str	r2, [r3, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3724      	adds	r7, #36	; 0x24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a1a      	ldr	r2, [r3, #32]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	613b      	str	r3, [r7, #16]
  return(result);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	210f      	movs	r1, #15
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	401a      	ands	r2, r3
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	61bb      	str	r3, [r7, #24]
  return(result);
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	fab3 f383 	clz	r3, r3
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	431a      	orrs	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800121a:	bf00      	nop
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001226:	b480      	push	{r7}
 8001228:	b089      	sub	sp, #36	; 0x24
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	613b      	str	r3, [r7, #16]
  return(result);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	fab3 f383 	clz	r3, r3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	210f      	movs	r1, #15
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	401a      	ands	r2, r3
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	61bb      	str	r3, [r7, #24]
  return(result);
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	431a      	orrs	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001278:	bf00      	nop
 800127a:	3724      	adds	r7, #36	; 0x24
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	613b      	str	r3, [r7, #16]
  return(result);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80012ac:	e048      	b.n	8001340 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	2101      	movs	r1, #1
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d03a      	beq.n	800133a <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	461a      	mov	r2, r3
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fede 	bl	800108e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d003      	beq.n	80012e2 <LL_GPIO_Init+0x5e>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d106      	bne.n	80012f0 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	461a      	mov	r2, r3
 80012e8:	69b9      	ldr	r1, [r7, #24]
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ff14 	bl	8001118 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	461a      	mov	r2, r3
 80012f6:	69b9      	ldr	r1, [r7, #24]
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff3a 	bl	8001172 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d119      	bne.n	800133a <LL_GPIO_Init+0xb6>
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	60bb      	str	r3, [r7, #8]
  return(result);
 8001312:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001314:	fab3 f383 	clz	r3, r3
 8001318:	2b07      	cmp	r3, #7
 800131a:	d807      	bhi.n	800132c <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	461a      	mov	r2, r3
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff51 	bl	80011cc <LL_GPIO_SetAFPin_0_7>
 800132a:	e006      	b.n	800133a <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	461a      	mov	r2, r3
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff76 	bl	8001226 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	fa22 f303 	lsr.w	r3, r2, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1af      	bne.n	80012ae <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d003      	beq.n	800135e <LL_GPIO_Init+0xda>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d107      	bne.n	800136e <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	6819      	ldr	r1, [r3, #0]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	461a      	mov	r2, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff febd 	bl	80010e8 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	601a      	str	r2, [r3, #0]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 0201 	bic.w	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	601a      	str	r2, [r3, #0]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	0219      	lsls	r1, r3, #8
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	430b      	orrs	r3, r1
 80013d4:	431a      	orrs	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	601a      	str	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013fa:	f023 0307 	bic.w	r3, r3, #7
 80013fe:	68b9      	ldr	r1, [r7, #8]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	430a      	orrs	r2, r1
 8001404:	431a      	orrs	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	609a      	str	r2, [r3, #8]
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	609a      	str	r2, [r3, #8]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	609a      	str	r2, [r3, #8]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	611a      	str	r2, [r3, #16]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	605a      	str	r2, [r3, #4]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff65 	bl	8001398 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	6899      	ldr	r1, [r3, #8]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	461a      	mov	r2, r3
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff6d 	bl	80013b8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ffb6 	bl	8001456 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff44 	bl	8001378 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ffa0 	bl	8001436 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	6919      	ldr	r1, [r3, #16]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	461a      	mov	r2, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff70 	bl	80013e6 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ff81 	bl	8001416 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa9 	bl	8001472 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ffb6 	bl	8001498 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	635a      	str	r2, [r3, #52]	; 0x34
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	659a      	str	r2, [r3, #88]	; 0x58
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	615a      	str	r2, [r3, #20]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a2f      	ldr	r2, [pc, #188]	; (8001728 <LL_TIM_Init+0xd4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d007      	beq.n	8001680 <LL_TIM_Init+0x2c>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001676:	d003      	beq.n	8001680 <LL_TIM_Init+0x2c>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a2c      	ldr	r2, [pc, #176]	; (800172c <LL_TIM_Init+0xd8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d106      	bne.n	800168e <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4313      	orrs	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a25      	ldr	r2, [pc, #148]	; (8001728 <LL_TIM_Init+0xd4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <LL_TIM_Init+0x6a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800169c:	d00f      	beq.n	80016be <LL_TIM_Init+0x6a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a22      	ldr	r2, [pc, #136]	; (800172c <LL_TIM_Init+0xd8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00b      	beq.n	80016be <LL_TIM_Init+0x6a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a21      	ldr	r2, [pc, #132]	; (8001730 <LL_TIM_Init+0xdc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <LL_TIM_Init+0x6a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a20      	ldr	r2, [pc, #128]	; (8001734 <LL_TIM_Init+0xe0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d003      	beq.n	80016be <LL_TIM_Init+0x6a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <LL_TIM_Init+0xe4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d106      	bne.n	80016cc <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff3a 	bl	8001552 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff26 	bl	8001536 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <LL_TIM_Init+0xd4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00b      	beq.n	800170a <LL_TIM_Init+0xb6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <LL_TIM_Init+0xdc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <LL_TIM_Init+0xb6>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <LL_TIM_Init+0xe0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d003      	beq.n	800170a <LL_TIM_Init+0xb6>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <LL_TIM_Init+0xe4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d105      	bne.n	8001716 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	7c1b      	ldrb	r3, [r3, #16]
 800170e:	4619      	mov	r1, r3
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff2c 	bl	800156e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ff8b 	bl	8001632 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40012c00 	.word	0x40012c00
 800172c:	40000400 	.word	0x40000400
 8001730:	40014000 	.word	0x40014000
 8001734:	40014400 	.word	0x40014400
 8001738:	40014800 	.word	0x40014800

0800173c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001752:	d045      	beq.n	80017e0 <LL_TIM_OC_Init+0xa4>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800175a:	d848      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d036      	beq.n	80017d2 <LL_TIM_OC_Init+0x96>
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176a:	d840      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001772:	d027      	beq.n	80017c4 <LL_TIM_OC_Init+0x88>
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177a:	d838      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001782:	d018      	beq.n	80017b6 <LL_TIM_OC_Init+0x7a>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800178a:	d830      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d003      	beq.n	800179a <LL_TIM_OC_Init+0x5e>
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b10      	cmp	r3, #16
 8001796:	d007      	beq.n	80017a8 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8001798:	e029      	b.n	80017ee <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 f82d 	bl	80017fc <OC1Config>
 80017a2:	4603      	mov	r3, r0
 80017a4:	75fb      	strb	r3, [r7, #23]
      break;
 80017a6:	e023      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f8a6 	bl	80018fc <OC2Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	75fb      	strb	r3, [r7, #23]
      break;
 80017b4:	e01c      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 f923 	bl	8001a04 <OC3Config>
 80017be:	4603      	mov	r3, r0
 80017c0:	75fb      	strb	r3, [r7, #23]
      break;
 80017c2:	e015      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f9a0 	bl	8001b0c <OC4Config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	75fb      	strb	r3, [r7, #23]
      break;
 80017d0:	e00e      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 fa05 	bl	8001be4 <OC5Config>
 80017da:	4603      	mov	r3, r0
 80017dc:	75fb      	strb	r3, [r7, #23]
      break;
 80017de:	e007      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 fa60 	bl	8001ca8 <OC6Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	75fb      	strb	r3, [r7, #23]
      break;
 80017ec:	e000      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      break;
 80017ee:	bf00      	nop
  }

  return result;
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	f023 0201 	bic.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f023 0303 	bic.w	r3, r3, #3
 8001836:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f023 0202 	bic.w	r2, r3, #2
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f023 0201 	bic.w	r2, r3, #1
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4313      	orrs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a20      	ldr	r2, [pc, #128]	; (80018ec <OC1Config+0xf0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00b      	beq.n	8001886 <OC1Config+0x8a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <OC1Config+0xf4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <OC1Config+0x8a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a1e      	ldr	r2, [pc, #120]	; (80018f4 <OC1Config+0xf8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d003      	beq.n	8001886 <OC1Config+0x8a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <OC1Config+0xfc>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d11e      	bne.n	80018c4 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f023 0208 	bic.w	r2, r3, #8
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4313      	orrs	r3, r2
 8001894:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f023 0204 	bic.w	r2, r3, #4
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4313      	orrs	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4619      	mov	r1, r3
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fe57 	bl	800158a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40012c00 	.word	0x40012c00
 80018f0:	40014000 	.word	0x40014000
 80018f4:	40014400 	.word	0x40014400
 80018f8:	40014800 	.word	0x40014800

080018fc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	f023 0210 	bic.w	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	0212      	lsls	r2, r2, #8
 8001948:	4313      	orrs	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f023 0220 	bic.w	r2, r3, #32
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f023 0210 	bic.w	r2, r3, #16
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <OC2Config+0xf8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00b      	beq.n	800198c <OC2Config+0x90>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <OC2Config+0xfc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d007      	beq.n	800198c <OC2Config+0x90>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <OC2Config+0x100>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d003      	beq.n	800198c <OC2Config+0x90>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <OC2Config+0x104>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d11f      	bne.n	80019cc <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	019b      	lsls	r3, r3, #6
 8001998:	4313      	orrs	r3, r2
 800199a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	019b      	lsls	r3, r3, #6
 80019a8:	4313      	orrs	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4619      	mov	r1, r3
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fde1 	bl	80015a6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40012c00 	.word	0x40012c00
 80019f8:	40014000 	.word	0x40014000
 80019fc:	40014400 	.word	0x40014400
 8001a00:	40014800 	.word	0x40014800

08001a04 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f023 0303 	bic.w	r3, r3, #3
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a21      	ldr	r2, [pc, #132]	; (8001afc <OC3Config+0xf8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00b      	beq.n	8001a92 <OC3Config+0x8e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a20      	ldr	r2, [pc, #128]	; (8001b00 <OC3Config+0xfc>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <OC3Config+0x8e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <OC3Config+0x100>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d003      	beq.n	8001a92 <OC3Config+0x8e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <OC3Config+0x104>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d11f      	bne.n	8001ad2 <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	029b      	lsls	r3, r3, #10
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	029b      	lsls	r3, r3, #10
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	015b      	lsls	r3, r3, #5
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fd6c 	bl	80015c2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40012c00 	.word	0x40012c00
 8001b00:	40014000 	.word	0x40014000
 8001b04:	40014400 	.word	0x40014400
 8001b08:	40014800 	.word	0x40014800

08001b0c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b46:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	0212      	lsls	r2, r2, #8
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	031b      	lsls	r3, r3, #12
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	031b      	lsls	r3, r3, #12
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <OC4Config+0xc8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00b      	beq.n	8001b9c <OC4Config+0x90>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <OC4Config+0xcc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d007      	beq.n	8001b9c <OC4Config+0x90>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <OC4Config+0xd0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d003      	beq.n	8001b9c <OC4Config+0x90>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <OC4Config+0xd4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d107      	bne.n	8001bac <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	019b      	lsls	r3, r3, #6
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fd0d 	bl	80015de <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40012c00 	.word	0x40012c00
 8001bd8:	40014000 	.word	0x40014000
 8001bdc:	40014400 	.word	0x40014400
 8001be0:	40014800 	.word	0x40014800

08001be4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	041b      	lsls	r3, r3, #16
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	041b      	lsls	r3, r3, #16
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <OC5Config+0xb4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00b      	beq.n	8001c60 <OC5Config+0x7c>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <OC5Config+0xb8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d007      	beq.n	8001c60 <OC5Config+0x7c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <OC5Config+0xbc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d003      	beq.n	8001c60 <OC5Config+0x7c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <OC5Config+0xc0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d109      	bne.n	8001c74 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fcba 	bl	80015fa <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	40014000 	.word	0x40014000
 8001ca0:	40014400 	.word	0x40014400
 8001ca4:	40014800 	.word	0x40014800

08001ca8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	0212      	lsls	r2, r2, #8
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	051b      	lsls	r3, r3, #20
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	051b      	lsls	r3, r3, #20
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <OC6Config+0xb4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00b      	beq.n	8001d26 <OC6Config+0x7e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <OC6Config+0xb8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d007      	beq.n	8001d26 <OC6Config+0x7e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <OC6Config+0xbc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d003      	beq.n	8001d26 <OC6Config+0x7e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <OC6Config+0xc0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d109      	bne.n	8001d3a <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	029b      	lsls	r3, r3, #10
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff fc65 	bl	8001616 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40012c00 	.word	0x40012c00
 8001d60:	40014000 	.word	0x40014000
 8001d64:	40014400 	.word	0x40014400
 8001d68:	40014800 	.word	0x40014800

08001d6c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <LL_InitTick+0x30>)
 8001d80:	3b01      	subs	r3, #1
 8001d82:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <LL_InitTick+0x30>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <LL_InitTick+0x30>)
 8001d8c:	2205      	movs	r2, #5
 8001d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e010 	.word	0xe000e010

08001da0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001da8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ffdd 	bl	8001d6c <LL_InitTick>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <LL_mDelay+0x48>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001dca:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd2:	d00c      	beq.n	8001dee <LL_mDelay+0x32>
  {
    Delay++;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001dda:	e008      	b.n	8001dee <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <LL_mDelay+0x48>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <LL_mDelay+0x32>
    {
      Delay--;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f3      	bne.n	8001ddc <LL_mDelay+0x20>
    }
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <LL_SetSystemCoreClock+0x1c>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000048 	.word	0x20000048

08001e28 <hts221_read_byte>:
#include "hts221.h"

uint8_t addres3 = HTS221_DEVICE_ADDRESS_0;

uint8_t hts221_read_byte(uint8_t reg_addr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres3, 0));
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <hts221_read_byte+0x30>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	79fa      	ldrb	r2, [r7, #7]
 8001e3c:	f107 000f 	add.w	r0, r7, #15
 8001e40:	2100      	movs	r1, #0
 8001e42:	9100      	str	r1, [sp, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	f000 feb5 	bl	8002bb4 <i2c_master_read>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	781b      	ldrb	r3, [r3, #0]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000000 	.word	0x20000000

08001e5c <hts221_write_byte>:


void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	460a      	mov	r2, r1
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres3, 0);
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <hts221_write_byte+0x28>)
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	79f9      	ldrb	r1, [r7, #7]
 8001e72:	79b8      	ldrb	r0, [r7, #6]
 8001e74:	2300      	movs	r3, #0
 8001e76:	f000 fe59 	bl	8002b2c <i2c_master_write>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000

08001e88 <hts221_readArray>:


void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
 8001e94:	4613      	mov	r3, r2
 8001e96:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres3, 0);
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <hts221_readArray+0x2c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	78b9      	ldrb	r1, [r7, #2]
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	9000      	str	r0, [sp, #0]
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fe85 	bl	8002bb4 <i2c_master_read>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000000 	.word	0x20000000

08001eb8 <hts221_get_humidity>:

float hts221_get_humidity(){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0

	uint8_t temp[2];
	hts221_readArray(temp, HTS221_ADDRESS_HUMIDITY_OUT_L, 2);
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	2128      	movs	r1, #40	; 0x28
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ffdf 	bl	8001e88 <hts221_readArray>

//	return (temp[1] * 256.0) + temp[0];
	return (((uint8_t)(~((uint16_t)(temp[1] << 8 | temp[0]))+1))*0.004);
 8001eca:	797b      	ldrb	r3, [r7, #5]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	b25a      	sxtb	r2, r3
 8001ed0:	793b      	ldrb	r3, [r7, #4]
 8001ed2:	b25b      	sxtb	r3, r3
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	b25b      	sxtb	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	425b      	negs	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fb20 	bl	8000524 <__aeabi_i2d>
 8001ee4:	a30a      	add	r3, pc, #40	; (adr r3, 8001f10 <hts221_get_humidity+0x58>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe fb85 	bl	80005f8 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7fe fe57 	bl	8000ba8 <__aeabi_d2f>
 8001efa:	4603      	mov	r3, r0
 8001efc:	ee07 3a90 	vmov	s15, r3
}
 8001f00:	eeb0 0a67 	vmov.f32	s0, s15
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	f3af 8000 	nop.w
 8001f10:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f14:	3f70624d 	.word	0x3f70624d

08001f18 <hts221_init>:


uint8_t hts221_init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	71fb      	strb	r3, [r7, #7]


	LL_mDelay(100);
 8001f22:	2064      	movs	r0, #100	; 0x64
 8001f24:	f7ff ff4a 	bl	8001dbc <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8001f28:	200f      	movs	r0, #15
 8001f2a:	f7ff ff7d 	bl	8001e28 <hts221_read_byte>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE)
 8001f32:	79bb      	ldrb	r3, [r7, #6]
 8001f34:	2bbc      	cmp	r3, #188	; 0xbc
 8001f36:	d102      	bne.n	8001f3e <hts221_init+0x26>
	{
		status = 1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	e001      	b.n	8001f42 <hts221_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
		status = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t ctrl1 = hts221_read_byte(HTS221_ADDRESS_CTRL1);
 8001f42:	2020      	movs	r0, #32
 8001f44:	f7ff ff70 	bl	8001e28 <hts221_read_byte>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	717b      	strb	r3, [r7, #5]
	ctrl1 &= ~0xFC;
 8001f4c:	797b      	ldrb	r3, [r7, #5]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	717b      	strb	r3, [r7, #5]
	ctrl1 |= 0x70;
 8001f54:	797b      	ldrb	r3, [r7, #5]
 8001f56:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001f5a:	717b      	strb	r3, [r7, #5]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 8001f5c:	797b      	ldrb	r3, [r7, #5]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	2020      	movs	r0, #32
 8001f62:	f7ff ff7b 	bl	8001e5c <hts221_write_byte>

	return status;
 8001f66:	79fb      	ldrb	r3, [r7, #7]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	619a      	str	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_TIM_ClearFlag_UPDATE>:
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f06f 0201 	mvn.w	r2, #1
 8001fb6:	611a      	str	r2, [r3, #16]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	bf0c      	ite	eq
 8001fd8:	2301      	moveq	r3, #1
 8001fda:	2300      	movne	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <resetSegments>:
};


/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001ff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	f7ff ffba 	bl	8001f70 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001ffc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002004:	f7ff ffb4 	bl	8001f70 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8002008:	2102      	movs	r1, #2
 800200a:	480e      	ldr	r0, [pc, #56]	; (8002044 <resetSegments+0x58>)
 800200c:	f7ff ffb0 	bl	8001f70 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8002010:	2120      	movs	r1, #32
 8002012:	480c      	ldr	r0, [pc, #48]	; (8002044 <resetSegments+0x58>)
 8002014:	f7ff ffac 	bl	8001f70 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8002018:	2110      	movs	r1, #16
 800201a:	480a      	ldr	r0, [pc, #40]	; (8002044 <resetSegments+0x58>)
 800201c:	f7ff ffa8 	bl	8001f70 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8002020:	2101      	movs	r1, #1
 8002022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002026:	f7ff ffa3 	bl	8001f70 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 800202a:	2102      	movs	r1, #2
 800202c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002030:	f7ff ff9e 	bl	8001f70 <LL_GPIO_SetOutputPin>
	//LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8002034:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <resetSegments+0x58>)
 800203a:	f7ff ff99 	bl	8001f70 <LL_GPIO_SetOutputPin>
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	48000400 	.word	0x48000400

08002048 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 800204c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002054:	f7ff ff9a 	bl	8001f8c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8002058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800205c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002060:	f7ff ff94 	bl	8001f8c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8002064:	2102      	movs	r1, #2
 8002066:	480e      	ldr	r0, [pc, #56]	; (80020a0 <setSegments+0x58>)
 8002068:	f7ff ff90 	bl	8001f8c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 800206c:	2120      	movs	r1, #32
 800206e:	480c      	ldr	r0, [pc, #48]	; (80020a0 <setSegments+0x58>)
 8002070:	f7ff ff8c 	bl	8001f8c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8002074:	2110      	movs	r1, #16
 8002076:	480a      	ldr	r0, [pc, #40]	; (80020a0 <setSegments+0x58>)
 8002078:	f7ff ff88 	bl	8001f8c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 800207c:	2101      	movs	r1, #1
 800207e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002082:	f7ff ff83 	bl	8001f8c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8002086:	2102      	movs	r1, #2
 8002088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208c:	f7ff ff7e 	bl	8001f8c <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8002090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <setSegments+0x58>)
 8002096:	f7ff ff79 	bl	8001f8c <LL_GPIO_ResetOutputPin>
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	48000400 	.word	0x48000400

080020a4 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 80020a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b0:	f7ff ff6c 	bl	8001f8c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80020b4:	2120      	movs	r1, #32
 80020b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ba:	f7ff ff67 	bl	8001f8c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80020be:	2110      	movs	r1, #16
 80020c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c4:	f7ff ff62 	bl	8001f8c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80020c8:	2140      	movs	r1, #64	; 0x40
 80020ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ce:	f7ff ff5d 	bl	8001f8c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d8:	f7ff ff58 	bl	8001f8c <LL_GPIO_ResetOutputPin>
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}

080020e0 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 80020e4:	2120      	movs	r1, #32
 80020e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ea:	f7ff ff41 	bl	8001f70 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 80020ee:	2110      	movs	r1, #16
 80020f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f4:	f7ff ff3c 	bl	8001f70 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 80020f8:	2140      	movs	r1, #64	; 0x40
 80020fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fe:	f7ff ff37 	bl	8001f70 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8002102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210a:	f7ff ff31 	bl	8001f70 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002114:	f7ff ff2c 	bl	8001f70 <LL_GPIO_SetOutputPin>
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}

0800211c <changeDisplayString>:

void changeDisplayString(char *string, int len){
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]

  for(int i=0; i<SIZE_DISPLAY; i++)
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e00f      	b.n	800214c <changeDisplayString+0x30>
  {
	  curr_str[i] = string[idx+i];
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <changeDisplayString+0x9c>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	461a      	mov	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	7819      	ldrb	r1, [r3, #0]
 800213c:	4a1f      	ldr	r2, [pc, #124]	; (80021bc <changeDisplayString+0xa0>)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4413      	add	r3, r2
 8002142:	460a      	mov	r2, r1
 8002144:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<SIZE_DISPLAY; i++)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3301      	adds	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b03      	cmp	r3, #3
 8002150:	ddec      	ble.n	800212c <changeDisplayString+0x10>
  }

  if(idx < (len-SIZE_DISPLAY) && inc)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	1f1a      	subs	r2, r3, #4
 8002156:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <changeDisplayString+0x9c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	dd12      	ble.n	8002184 <changeDisplayString+0x68>
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <changeDisplayString+0xa4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00e      	beq.n	8002184 <changeDisplayString+0x68>
  {
	  idx++;
 8002166:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <changeDisplayString+0x9c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <changeDisplayString+0x9c>)
 800216e:	6013      	str	r3, [r2, #0]
	  if(idx == (len-SIZE_DISPLAY)){
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	1f1a      	subs	r2, r3, #4
 8002174:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <changeDisplayString+0x9c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d103      	bne.n	8002184 <changeDisplayString+0x68>
		  inc = 0;
 800217c:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <changeDisplayString+0xa4>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
		  return;
 8002182:	e013      	b.n	80021ac <changeDisplayString+0x90>
	  }
  }
  if(idx > 0 && !inc){
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <changeDisplayString+0x9c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	dd0f      	ble.n	80021ac <changeDisplayString+0x90>
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <changeDisplayString+0xa4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10b      	bne.n	80021ac <changeDisplayString+0x90>
	  idx--;
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <changeDisplayString+0x9c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	3b01      	subs	r3, #1
 800219a:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <changeDisplayString+0x9c>)
 800219c:	6013      	str	r3, [r2, #0]
	  if(idx == 0){
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <changeDisplayString+0x9c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <changeDisplayString+0x90>
		  inc = 1;
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <changeDisplayString+0xa4>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
	  }
  }
}
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000244 	.word	0x20000244
 80021bc:	20000260 	.word	0x20000260
 80021c0:	20000004 	.word	0x20000004

080021c4 <setDigit>:

void setDigit(uint8_t pos)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d824      	bhi.n	800221e <setDigit+0x5a>
 80021d4:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <setDigit+0x18>)
 80021d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021da:	bf00      	nop
 80021dc:	080021ed 	.word	0x080021ed
 80021e0:	080021f9 	.word	0x080021f9
 80021e4:	08002205 	.word	0x08002205
 80021e8:	08002211 	.word	0x08002211
	{
		case 0:
			DIGIT_1_ON;
 80021ec:	2120      	movs	r1, #32
 80021ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f2:	f7ff febd 	bl	8001f70 <LL_GPIO_SetOutputPin>
			break;
 80021f6:	e012      	b.n	800221e <setDigit+0x5a>
		case 1:
			DIGIT_2_ON;
 80021f8:	2110      	movs	r1, #16
 80021fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fe:	f7ff feb7 	bl	8001f70 <LL_GPIO_SetOutputPin>
			break;
 8002202:	e00c      	b.n	800221e <setDigit+0x5a>
		case 2:
			DIGIT_3_ON;
 8002204:	2140      	movs	r1, #64	; 0x40
 8002206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220a:	f7ff feb1 	bl	8001f70 <LL_GPIO_SetOutputPin>
			break;
 800220e:	e006      	b.n	800221e <setDigit+0x5a>
		case 3:
			DIGIT_4_ON;
 8002210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002218:	f7ff feaa 	bl	8001f70 <LL_GPIO_SetOutputPin>
			break;
 800221c:	bf00      	nop
	}
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop

08002228 <decode_7seg>:

unsigned char decode_7seg(unsigned char chr)
{ /* Implementation uses ASCII */
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
	if (chr == (unsigned char)'-')
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	2b2d      	cmp	r3, #45	; 0x2d
 8002236:	d101      	bne.n	800223c <decode_7seg+0x14>
	        return 0x40;
 8002238:	2340      	movs	r3, #64	; 0x40
 800223a:	e00d      	b.n	8002258 <decode_7seg+0x30>
    if (chr == (unsigned char)'.')
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	2b2e      	cmp	r3, #46	; 0x2e
 8002240:	d101      	bne.n	8002246 <decode_7seg+0x1e>
        return 0x80;
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	e008      	b.n	8002258 <decode_7seg+0x30>
    if (chr > (unsigned char)'z')
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	2b7a      	cmp	r3, #122	; 0x7a
 800224a:	d901      	bls.n	8002250 <decode_7seg+0x28>
        return 0x00;
 800224c:	2300      	movs	r3, #0
 800224e:	e003      	b.n	8002258 <decode_7seg+0x30>
    return seven_seg_digits_decode_gfedcba[chr - '0'];
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	3b30      	subs	r3, #48	; 0x30
 8002254:	4a03      	ldr	r2, [pc, #12]	; (8002264 <decode_7seg+0x3c>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	08006ef4 	.word	0x08006ef4

08002268 <setSign>:

void setSign(unsigned char cislo){
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
	uint8_t act_segment;
	for(int i = 0; i < 8; i++){
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	e01b      	b.n	80022b0 <setSign+0x48>
		act_segment = cislo & (1 << i);
 8002278:	2201      	movs	r2, #1
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	b25a      	sxtb	r2, r3
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	4013      	ands	r3, r2
 8002288:	b25b      	sxtb	r3, r3
 800228a:	72fb      	strb	r3, [r7, #11]

		if(act_segment){
 800228c:	7afb      	ldrb	r3, [r7, #11]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <setSign+0x42>
			LL_GPIO_ResetOutputPin(port[i], pin[i]);
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <setSign+0x58>)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800229a:	490a      	ldr	r1, [pc, #40]	; (80022c4 <setSign+0x5c>)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022a2:	4619      	mov	r1, r3
 80022a4:	4610      	mov	r0, r2
 80022a6:	f7ff fe71 	bl	8001f8c <LL_GPIO_ResetOutputPin>
	for(int i = 0; i < 8; i++){
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3301      	adds	r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b07      	cmp	r3, #7
 80022b4:	dde0      	ble.n	8002278 <setSign+0x10>
		}
	}
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000028 	.word	0x20000028
 80022c4:	20000008 	.word	0x20000008

080022c8 <startNewStr>:

void startNewStr(){
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
	idx = 0;
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <startNewStr+0x1c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
	inc = 1;
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <startNewStr+0x20>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000244 	.word	0x20000244
 80022e8:	20000004 	.word	0x20000004

080022ec <updateDisplay>:

void updateDisplay(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < SIZE_DISPLAY; i++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	71fb      	strb	r3, [r7, #7]
 80022f6:	e017      	b.n	8002328 <updateDisplay+0x3c>
	{
		setDigit(i);
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff62 	bl	80021c4 <setDigit>

		setSign(decode_7seg(curr_str[i]));
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <updateDisplay+0x4c>)
 8002304:	5cd3      	ldrb	r3, [r2, r3]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff8e 	bl	8002228 <decode_7seg>
 800230c:	4603      	mov	r3, r0
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ffaa 	bl	8002268 <setSign>

//		disp_time_saved = disp_time;
//		while((disp_time_saved + 1) > disp_time){};
		LL_mDelay(1);
 8002314:	2001      	movs	r0, #1
 8002316:	f7ff fd51 	bl	8001dbc <LL_mDelay>

		resetDigits();
 800231a:	f7ff fec3 	bl	80020a4 <resetDigits>
		resetSegments();
 800231e:	f7ff fe65 	bl	8001fec <resetSegments>
	for(uint8_t i = 0; i < SIZE_DISPLAY; i++)
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	3301      	adds	r3, #1
 8002326:	71fb      	strb	r3, [r7, #7]
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d9e4      	bls.n	80022f8 <updateDisplay+0xc>
	}
}
 800232e:	bf00      	nop
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000260 	.word	0x20000260

0800233c <TIM2_IRQHandler>:

//Update displayed data and keep display ON
void TIM2_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2))
 8002340:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002344:	f7ff fe3e 	bl	8001fc4 <LL_TIM_IsActiveFlag_UPDATE>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <TIM2_IRQHandler+0x16>
	{
		updateDisplay();
 800234e:	f7ff ffcd 	bl	80022ec <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 8002352:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002356:	f7ff fe27 	bl	8001fa8 <LL_TIM_ClearFlag_UPDATE>
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4907      	ldr	r1, [pc, #28]	; (80023ac <NVIC_EnableIRQ+0x30>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000e100 	.word	0xe000e100

080023b0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	da0b      	bge.n	80023dc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <NVIC_SetPriority+0x4c>)
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	3b04      	subs	r3, #4
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023da:	e009      	b.n	80023f0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4907      	ldr	r1, [pc, #28]	; (8002400 <NVIC_SetPriority+0x50>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00
 8002400:	e000e100 	.word	0xe000e100

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	4907      	ldr	r1, [pc, #28]	; (8002498 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4313      	orrs	r3, r2
 800247e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4013      	ands	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800248a:	68fb      	ldr	r3, [r7, #12]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40021000 	.word	0x40021000

0800249c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80024a6:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <LL_SYSCFG_SetEXTISource+0x54>)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	3302      	adds	r3, #2
 80024ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	0c1b      	lsrs	r3, r3, #16
 80024b6:	43db      	mvns	r3, r3
 80024b8:	ea02 0103 	and.w	r1, r2, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	0c1b      	lsrs	r3, r3, #16
 80024c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	409a      	lsls	r2, r3
 80024d4:	4806      	ldr	r0, [pc, #24]	; (80024f0 <LL_SYSCFG_SetEXTISource+0x54>)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	430a      	orrs	r2, r1
 80024dc:	3302      	adds	r3, #2
 80024de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40010000 	.word	0x40010000

080024f4 <LL_GPIO_SetPinMode>:
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	; 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	613b      	str	r3, [r7, #16]
  return(result);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	2103      	movs	r1, #3
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	401a      	ands	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa93 f3a3 	rbit	r3, r3
 800252c:	61bb      	str	r3, [r7, #24]
  return(result);
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	431a      	orrs	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	601a      	str	r2, [r3, #0]
}
 8002542:	bf00      	nop
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <LL_GPIO_SetPinPull>:
{
 800254e:	b480      	push	{r7}
 8002550:	b089      	sub	sp, #36	; 0x24
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	613b      	str	r3, [r7, #16]
  return(result);
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2103      	movs	r1, #3
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	401a      	ands	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	61bb      	str	r3, [r7, #24]
  return(result);
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	431a      	orrs	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	60da      	str	r2, [r3, #12]
}
 800259c:	bf00      	nop
 800259e:	3724      	adds	r7, #36	; 0x24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_GPIO_ResetOutputPin>:
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af00      	add	r7, sp, #0
	LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80025ca:	f107 031c 	add.w	r3, r7, #28
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
 80025e4:	615a      	str	r2, [r3, #20]
  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80025e6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80025ea:	f7ff ff3f 	bl	800246c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80025ee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80025f2:	f7ff ff3b 	bl	800246c <LL_AHB1_GRP1_EnableClock>

  /* Configure GPIOB-3 pin as an input pin - button */

  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 80025f6:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 80025fa:	2001      	movs	r0, #1
 80025fc:	f7ff ff4e 	bl	800249c <LL_SYSCFG_SetEXTISource>

  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_3, LL_GPIO_PULL_UP);
 8002600:	2201      	movs	r2, #1
 8002602:	2108      	movs	r1, #8
 8002604:	482c      	ldr	r0, [pc, #176]	; (80026b8 <MX_GPIO_Init+0xf4>)
 8002606:	f7ff ffa2 	bl	800254e <LL_GPIO_SetPinPull>

  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 800260a:	2200      	movs	r2, #0
 800260c:	2108      	movs	r1, #8
 800260e:	482a      	ldr	r0, [pc, #168]	; (80026b8 <MX_GPIO_Init+0xf4>)
 8002610:	f7ff ff70 	bl	80024f4 <LL_GPIO_SetPinMode>

  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8002614:	2308      	movs	r3, #8
 8002616:	61fb      	str	r3, [r7, #28]

  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]

  EXTI_InitStruct.LineCommand = ENABLE;
 800261c:	2301      	movs	r3, #1
 800261e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002622:	2300      	movs	r3, #0
 8002624:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8002628:	2303      	movs	r3, #3
 800262a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  LL_EXTI_Init(&EXTI_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fc38 	bl	8000ea8 <LL_EXTI_Init>



  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4
 8002638:	f640 1113 	movw	r1, #2323	; 0x913
 800263c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002640:	f7ff ffb2 	bl	80025a8 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11);//|LL_GPIO_PIN_3  pin PA3 nam nefunguje (zmenene na PB15)

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_15|LL_GPIO_PIN_3);//pin PA3 nam nefunguje (zmenene na PB15)
 8002644:	f248 013a 	movw	r1, #32826	; 0x803a
 8002648:	481b      	ldr	r0, [pc, #108]	; (80026b8 <MX_GPIO_Init+0xf4>)
 800264a:	f7ff ffad 	bl	80025a8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4
 800264e:	f641 13f3 	movw	r3, #6643	; 0x19f3
 8002652:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;//|LL_GPIO_PIN_3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002654:	2301      	movs	r3, #1
 8002656:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	4619      	mov	r1, r3
 8002668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800266c:	f7fe fe0a 	bl	8001284 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_15;//|LL_GPIO_PIN_15
 8002670:	f248 0332 	movw	r3, #32818	; 0x8032
 8002674:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002676:	2301      	movs	r3, #1
 8002678:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	4619      	mov	r1, r3
 800268a:	480b      	ldr	r0, [pc, #44]	; (80026b8 <MX_GPIO_Init+0xf4>)
 800268c:	f7fe fdfa 	bl	8001284 <LL_GPIO_Init>


  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002690:	f7ff fe66 	bl	8002360 <NVIC_GetPriorityGrouping>
 8002694:	4603      	mov	r3, r0
 8002696:	2200      	movs	r2, #0
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff feb2 	bl	8002404 <NVIC_EncodePriority>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4619      	mov	r1, r3
 80026a4:	2009      	movs	r0, #9
 80026a6:	f7ff fe83 	bl	80023b0 <NVIC_SetPriority>

  NVIC_EnableIRQ(EXTI3_IRQn);
 80026aa:	2009      	movs	r0, #9
 80026ac:	f7ff fe66 	bl	800237c <NVIC_EnableIRQ>
}
 80026b0:	bf00      	nop
 80026b2:	3728      	adds	r7, #40	; 0x28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	48000400 	.word	0x48000400

080026bc <NVIC_GetPriorityGrouping>:
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <NVIC_GetPriorityGrouping+0x18>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0307 	and.w	r3, r3, #7
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <NVIC_EnableIRQ>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	4907      	ldr	r1, [pc, #28]	; (8002708 <NVIC_EnableIRQ+0x30>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	2001      	movs	r0, #1
 80026f2:	fa00 f202 	lsl.w	r2, r0, r2
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000e100 	.word	0xe000e100

0800270c <NVIC_SetPriority>:
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	2b00      	cmp	r3, #0
 800271e:	da0b      	bge.n	8002738 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	; (8002758 <NVIC_SetPriority+0x4c>)
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	3b04      	subs	r3, #4
 800272e:	0112      	lsls	r2, r2, #4
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	440b      	add	r3, r1
 8002734:	761a      	strb	r2, [r3, #24]
}
 8002736:	e009      	b.n	800274c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	b2da      	uxtb	r2, r3
 800273c:	4907      	ldr	r1, [pc, #28]	; (800275c <NVIC_SetPriority+0x50>)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	0112      	lsls	r2, r2, #4
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	440b      	add	r3, r1
 8002748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00
 800275c:	e000e100 	.word	0xe000e100

08002760 <NVIC_EncodePriority>:
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f1c3 0307 	rsb	r3, r3, #7
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf28      	it	cs
 800277e:	2304      	movcs	r3, #4
 8002780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3304      	adds	r3, #4
 8002786:	2b06      	cmp	r3, #6
 8002788:	d902      	bls.n	8002790 <NVIC_EncodePriority+0x30>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3b03      	subs	r3, #3
 800278e:	e000      	b.n	8002792 <NVIC_EncodePriority+0x32>
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43d9      	mvns	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	4313      	orrs	r3, r2
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	; 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_I2C_Enable>:
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f043 0201 	orr.w	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_I2C_EnableClockStretching>:
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	601a      	str	r2, [r3, #0]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_I2C_DisableGeneralCall>:
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	601a      	str	r2, [r3, #0]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <LL_I2C_SetOwnAddress2>:
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800283a:	f023 0306 	bic.w	r3, r3, #6
 800283e:	68b9      	ldr	r1, [r7, #8]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	430a      	orrs	r2, r1
 8002844:	431a      	orrs	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	60da      	str	r2, [r3, #12]
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <LL_I2C_DisableOwnAddress2>:
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	60da      	str	r2, [r3, #12]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <LL_I2C_EnableIT_RX>:
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f043 0204 	orr.w	r2, r3, #4
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	601a      	str	r2, [r3, #0]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <LL_I2C_DisableIT_RX>:
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 0204 	bic.w	r2, r3, #4
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	601a      	str	r2, [r3, #0]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <LL_I2C_IsActiveFlag_TXIS>:
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	bf0c      	ite	eq
 80028ca:	2301      	moveq	r3, #1
 80028cc:	2300      	movne	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_I2C_IsActiveFlag_RXNE>:
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <LL_I2C_IsActiveFlag_STOP>:
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b20      	cmp	r3, #32
 8002914:	bf0c      	ite	eq
 8002916:	2301      	moveq	r3, #1
 8002918:	2300      	movne	r3, #0
 800291a:	b2db      	uxtb	r3, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_I2C_ClearFlag_STOP>:
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	61da      	str	r2, [r3, #28]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_I2C_EnableAutoEndMode>:
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	605a      	str	r2, [r3, #4]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	0d5b      	lsrs	r3, r3, #21
 800297e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <LL_I2C_HandleTransfer+0x48>)
 8002984:	430b      	orrs	r3, r1
 8002986:	43db      	mvns	r3, r3
 8002988:	401a      	ands	r2, r3
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4319      	orrs	r1, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	041b      	lsls	r3, r3, #16
 8002994:	4319      	orrs	r1, r3
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4319      	orrs	r1, r3
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	430b      	orrs	r3, r1
 800299e:	431a      	orrs	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	03ff7bff 	.word	0x03ff7bff

080029b4 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	b2db      	uxtb	r3, r3
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_AHB1_GRP1_EnableClock>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	4907      	ldr	r1, [pc, #28]	; (8002a18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4013      	ands	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40021000 	.word	0x40021000

08002a1c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	4907      	ldr	r1, [pc, #28]	; (8002a48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4013      	ands	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40021000 	.word	0x40021000

08002a4c <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08e      	sub	sp, #56	; 0x38
 8002a50:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002a52:	f107 031c 	add.w	r3, r7, #28
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	609a      	str	r2, [r3, #8]
 8002a5e:	60da      	str	r2, [r3, #12]
 8002a60:	611a      	str	r2, [r3, #16]
 8002a62:	615a      	str	r2, [r3, #20]
 8002a64:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	611a      	str	r2, [r3, #16]
 8002a74:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002a76:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002a7a:	f7ff ffb7 	bl	80029ec <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002a7e:	23c0      	movs	r3, #192	; 0xc0
 8002a80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a82:	2302      	movs	r3, #2
 8002a84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002a86:	2303      	movs	r3, #3
 8002a88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002a92:	2304      	movs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4821      	ldr	r0, [pc, #132]	; (8002b20 <MX_I2C1_Init+0xd4>)
 8002a9c:	f7fe fbf2 	bl	8001284 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002aa0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002aa4:	f7ff ffba 	bl	8002a1c <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002aa8:	f7ff fe08 	bl	80026bc <NVIC_GetPriorityGrouping>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fe54 	bl	8002760 <NVIC_EncodePriority>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4619      	mov	r1, r3
 8002abc:	201f      	movs	r0, #31
 8002abe:	f7ff fe25 	bl	800270c <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002ac2:	201f      	movs	r0, #31
 8002ac4:	f7ff fe08 	bl	80026d8 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8002ac8:	4816      	ldr	r0, [pc, #88]	; (8002b24 <MX_I2C1_Init+0xd8>)
 8002aca:	f7ff ff3d 	bl	8002948 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8002ace:	4815      	ldr	r0, [pc, #84]	; (8002b24 <MX_I2C1_Init+0xd8>)
 8002ad0:	f7ff fec1 	bl	8002856 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002ad4:	4813      	ldr	r0, [pc, #76]	; (8002b24 <MX_I2C1_Init+0xd8>)
 8002ad6:	f7ff fe96 	bl	8002806 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002ada:	4812      	ldr	r0, [pc, #72]	; (8002b24 <MX_I2C1_Init+0xd8>)
 8002adc:	f7ff fe83 	bl	80027e6 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <MX_I2C1_Init+0xdc>)
 8002ae6:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8002af0:	2302      	movs	r3, #2
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002af8:	2300      	movs	r3, #0
 8002afa:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	4619      	mov	r1, r3
 8002b02:	4808      	ldr	r0, [pc, #32]	; (8002b24 <MX_I2C1_Init+0xd8>)
 8002b04:	f7fe fcdb 	bl	80014be <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4805      	ldr	r0, [pc, #20]	; (8002b24 <MX_I2C1_Init+0xd8>)
 8002b0e:	f7ff fe8a 	bl	8002826 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 8002b12:	4804      	ldr	r0, [pc, #16]	; (8002b24 <MX_I2C1_Init+0xd8>)
 8002b14:	f7ff fe57 	bl	80027c6 <LL_I2C_Enable>
}
 8002b18:	bf00      	nop
 8002b1a:	3738      	adds	r7, #56	; 0x38
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	48000400 	.word	0x48000400
 8002b24:	40005400 	.word	0x40005400
 8002b28:	2000090e 	.word	0x2000090e

08002b2c <i2c_master_write>:


void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	4604      	mov	r4, r0
 8002b34:	4608      	mov	r0, r1
 8002b36:	4611      	mov	r1, r2
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4623      	mov	r3, r4
 8002b3c:	71fb      	strb	r3, [r7, #7]
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71bb      	strb	r3, [r7, #6]
 8002b42:	460b      	mov	r3, r1
 8002b44:	717b      	strb	r3, [r7, #5]
 8002b46:	4613      	mov	r3, r2
 8002b48:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8002b4a:	793b      	ldrb	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8002b50:	79bb      	ldrb	r3, [r7, #6]
 8002b52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b56:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002b58:	7979      	ldrb	r1, [r7, #5]
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <i2c_master_write+0x80>)
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2302      	movs	r3, #2
 8002b66:	2200      	movs	r2, #0
 8002b68:	4811      	ldr	r0, [pc, #68]	; (8002bb0 <i2c_master_write+0x84>)
 8002b6a:	f7ff fefd 	bl	8002968 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8002b6e:	79bb      	ldrb	r3, [r7, #6]
 8002b70:	4619      	mov	r1, r3
 8002b72:	480f      	ldr	r0, [pc, #60]	; (8002bb0 <i2c_master_write+0x84>)
 8002b74:	f7ff ff2b 	bl	80029ce <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002b78:	e00a      	b.n	8002b90 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002b7a:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <i2c_master_write+0x84>)
 8002b7c:	f7ff fe9b 	bl	80028b6 <LL_I2C_IsActiveFlag_TXIS>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4809      	ldr	r0, [pc, #36]	; (8002bb0 <i2c_master_write+0x84>)
 8002b8c:	f7ff ff1f 	bl	80029ce <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002b90:	4807      	ldr	r0, [pc, #28]	; (8002bb0 <i2c_master_write+0x84>)
 8002b92:	f7ff feb6 	bl	8002902 <LL_I2C_IsActiveFlag_STOP>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0ee      	beq.n	8002b7a <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002b9c:	4804      	ldr	r0, [pc, #16]	; (8002bb0 <i2c_master_write+0x84>)
 8002b9e:	f7ff fec3 	bl	8002928 <LL_I2C_ClearFlag_STOP>
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd90      	pop	{r4, r7, pc}
 8002baa:	bf00      	nop
 8002bac:	80002000 	.word	0x80002000
 8002bb0:	40005400 	.word	0x40005400

08002bb4 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	70fb      	strb	r3, [r7, #3]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	70bb      	strb	r3, [r7, #2]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8002bce:	4a30      	ldr	r2, [pc, #192]	; (8002c90 <i2c_master_read+0xdc>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8002bd4:	7c3b      	ldrb	r3, [r7, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8002bda:	78bb      	ldrb	r3, [r7, #2]
 8002bdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002be0:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8002be2:	4b2c      	ldr	r3, [pc, #176]	; (8002c94 <i2c_master_read+0xe0>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8002be8:	482b      	ldr	r0, [pc, #172]	; (8002c98 <i2c_master_read+0xe4>)
 8002bea:	f7ff fe44 	bl	8002876 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002bee:	7879      	ldrb	r1, [r7, #1]
 8002bf0:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <i2c_master_read+0xe8>)
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	4826      	ldr	r0, [pc, #152]	; (8002c98 <i2c_master_read+0xe4>)
 8002c00:	f7ff feb2 	bl	8002968 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002c04:	e00a      	b.n	8002c1c <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8002c06:	4824      	ldr	r0, [pc, #144]	; (8002c98 <i2c_master_read+0xe4>)
 8002c08:	f7ff fe55 	bl	80028b6 <LL_I2C_IsActiveFlag_TXIS>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d004      	beq.n	8002c1c <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8002c12:	78bb      	ldrb	r3, [r7, #2]
 8002c14:	4619      	mov	r1, r3
 8002c16:	4820      	ldr	r0, [pc, #128]	; (8002c98 <i2c_master_read+0xe4>)
 8002c18:	f7ff fed9 	bl	80029ce <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002c1c:	481e      	ldr	r0, [pc, #120]	; (8002c98 <i2c_master_read+0xe4>)
 8002c1e:	f7ff fe70 	bl	8002902 <LL_I2C_IsActiveFlag_STOP>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0ee      	beq.n	8002c06 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8002c28:	481b      	ldr	r0, [pc, #108]	; (8002c98 <i2c_master_read+0xe4>)
 8002c2a:	f7ff fe7d 	bl	8002928 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8002c2e:	bf00      	nop
 8002c30:	4819      	ldr	r0, [pc, #100]	; (8002c98 <i2c_master_read+0xe4>)
 8002c32:	f7ff fe66 	bl	8002902 <LL_I2C_IsActiveFlag_STOP>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f9      	bne.n	8002c30 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8002c3c:	7879      	ldrb	r1, [r7, #1]
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <i2c_master_read+0xec>)
 8002c42:	9201      	str	r2, [sp, #4]
 8002c44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c48:	9200      	str	r2, [sp, #0]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	4812      	ldr	r0, [pc, #72]	; (8002c98 <i2c_master_read+0xe4>)
 8002c4e:	f7ff fe8b 	bl	8002968 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8002c52:	bf00      	nop
 8002c54:	4810      	ldr	r0, [pc, #64]	; (8002c98 <i2c_master_read+0xe4>)
 8002c56:	f7ff fe54 	bl	8002902 <LL_I2C_IsActiveFlag_STOP>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f9      	beq.n	8002c54 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8002c60:	480d      	ldr	r0, [pc, #52]	; (8002c98 <i2c_master_read+0xe4>)
 8002c62:	f7ff fe61 	bl	8002928 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8002c66:	480c      	ldr	r0, [pc, #48]	; (8002c98 <i2c_master_read+0xe4>)
 8002c68:	f7ff fe15 	bl	8002896 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <i2c_master_read+0xe4>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	4a09      	ldr	r2, [pc, #36]	; (8002c98 <i2c_master_read+0xe4>)
 8002c72:	f043 0310 	orr.w	r3, r3, #16
 8002c76:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <i2c_master_read+0xf0>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <i2c_master_read+0xe0>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8002c84:	4b02      	ldr	r3, [pc, #8]	; (8002c90 <i2c_master_read+0xdc>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000264 	.word	0x20000264
 8002c94:	20000250 	.word	0x20000250
 8002c98:	40005400 	.word	0x40005400
 8002c9c:	80002000 	.word	0x80002000
 8002ca0:	80002400 	.word	0x80002400
 8002ca4:	20000251 	.word	0x20000251

08002ca8 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8002ca8:	b598      	push	{r3, r4, r7, lr}
 8002caa:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8002cac:	4812      	ldr	r0, [pc, #72]	; (8002cf8 <I2C1_EV_IRQHandler+0x50>)
 8002cae:	f7ff fe15 	bl	80028dc <LL_I2C_IsActiveFlag_RXNE>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01c      	beq.n	8002cf2 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8002cb8:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <I2C1_EV_IRQHandler+0x54>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <I2C1_EV_IRQHandler+0x58>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	1c59      	adds	r1, r3, #1
 8002cc4:	b2c8      	uxtb	r0, r1
 8002cc6:	490e      	ldr	r1, [pc, #56]	; (8002d00 <I2C1_EV_IRQHandler+0x58>)
 8002cc8:	7008      	strb	r0, [r1, #0]
 8002cca:	18d4      	adds	r4, r2, r3
 8002ccc:	480a      	ldr	r0, [pc, #40]	; (8002cf8 <I2C1_EV_IRQHandler+0x50>)
 8002cce:	f7ff fe71 	bl	80029b4 <LL_I2C_ReceiveData8>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <I2C1_EV_IRQHandler+0x58>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b13      	cmp	r3, #19
 8002cde:	d903      	bls.n	8002ce8 <I2C1_EV_IRQHandler+0x40>
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <I2C1_EV_IRQHandler+0x58>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e001      	b.n	8002cec <I2C1_EV_IRQHandler+0x44>
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <I2C1_EV_IRQHandler+0x58>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <I2C1_EV_IRQHandler+0x5c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
	}
}
 8002cf2:	bf00      	nop
 8002cf4:	bd98      	pop	{r3, r4, r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40005400 	.word	0x40005400
 8002cfc:	20000264 	.word	0x20000264
 8002d00:	20000251 	.word	0x20000251
 8002d04:	20000250 	.word	0x20000250

08002d08 <NVIC_SetPriorityGrouping>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <NVIC_SetPriorityGrouping+0x44>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d24:	4013      	ands	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3a:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <NVIC_SetPriorityGrouping+0x44>)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	60d3      	str	r3, [r2, #12]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <LL_RCC_HSI_Enable+0x1c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <LL_RCC_HSI_Enable+0x1c>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6013      	str	r3, [r2, #0]
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000

08002d70 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <LL_RCC_HSI_IsReady+0x20>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	40021000 	.word	0x40021000

08002d94 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002d9c:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4904      	ldr	r1, [pc, #16]	; (8002dbc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <LL_RCC_SetSysClkSource+0x24>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f023 0203 	bic.w	r2, r3, #3
 8002dd0:	4904      	ldr	r1, [pc, #16]	; (8002de4 <LL_RCC_SetSysClkSource+0x24>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	40021000 	.word	0x40021000

08002de8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <LL_RCC_GetSysClkSource+0x18>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 030c 	and.w	r3, r3, #12
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000

08002e04 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <LL_RCC_SetAHBPrescaler+0x24>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e14:	4904      	ldr	r1, [pc, #16]	; (8002e28 <LL_RCC_SetAHBPrescaler+0x24>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40021000 	.word	0x40021000

08002e2c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e34:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e3c:	4904      	ldr	r1, [pc, #16]	; (8002e50 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40021000 	.word	0x40021000

08002e54 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e64:	4904      	ldr	r1, [pc, #16]	; (8002e78 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	40021000 	.word	0x40021000

08002e7c <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <LL_RCC_SetI2CClockSource+0x2c>)
 8002e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	0e1b      	lsrs	r3, r3, #24
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	401a      	ands	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e96:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <LL_RCC_SetI2CClockSource+0x2c>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	40021000 	.word	0x40021000

08002eac <LL_APB1_GRP1_EnableClock>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002eb4:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002eb6:	69da      	ldr	r2, [r3, #28]
 8002eb8:	4907      	ldr	r1, [pc, #28]	; (8002ed8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ec2:	69da      	ldr	r2, [r3, #28]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002eca:	68fb      	ldr	r3, [r7, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40021000 	.word	0x40021000

08002edc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002ee6:	699a      	ldr	r2, [r3, #24]
 8002ee8:	4907      	ldr	r1, [pc, #28]	; (8002f08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002efa:	68fb      	ldr	r3, [r7, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40021000 	.word	0x40021000

08002f0c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <LL_FLASH_SetLatency+0x24>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 0207 	bic.w	r2, r3, #7
 8002f1c:	4904      	ldr	r1, [pc, #16]	; (8002f30 <LL_FLASH_SetLatency+0x24>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	40022000 	.word	0x40022000

08002f34 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <LL_FLASH_GetLatency+0x18>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40022000 	.word	0x40022000

08002f50 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002f58:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	40010400 	.word	0x40010400

08002f7c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002f84:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6153      	str	r3, [r2, #20]
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40010400 	.word	0x40010400

08002f9c <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d106      	bne.n	8002fb8 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <LL_SYSTICK_SetClkSource+0x34>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a08      	ldr	r2, [pc, #32]	; (8002fd0 <LL_SYSTICK_SetClkSource+0x34>)
 8002fb0:	f043 0304 	orr.w	r3, r3, #4
 8002fb4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8002fb6:	e005      	b.n	8002fc4 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <LL_SYSTICK_SetClkSource+0x34>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <LL_SYSTICK_SetClkSource+0x34>)
 8002fbe:	f023 0304 	bic.w	r3, r3, #4
 8002fc2:	6013      	str	r3, [r2, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000e010 	.word	0xe000e010

08002fd4 <LL_GPIO_IsInputPinSet>:
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <main>:


float press, alt, temp, humidity;

int main(void)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b08d      	sub	sp, #52	; 0x34
 8003004:	af00      	add	r7, sp, #0
  char str[4][11];
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8003006:	2001      	movs	r0, #1
 8003008:	f7ff ff68 	bl	8002edc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800300c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003010:	f7ff ff4c 	bl	8002eac <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003014:	2007      	movs	r0, #7
 8003016:	f7ff fe77 	bl	8002d08 <NVIC_SetPriorityGrouping>


  SystemClock_Config();
 800301a:	f000 f86f 	bl	80030fc <SystemClock_Config>


  MX_GPIO_Init();
 800301e:	f7ff fad1 	bl	80025c4 <MX_GPIO_Init>

  setSegments();
 8003022:	f7ff f811 	bl	8002048 <setSegments>
  setDigits();
 8003026:	f7ff f85b 	bl	80020e0 <setDigits>

  LL_mDelay(2000);
 800302a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800302e:	f7fe fec5 	bl	8001dbc <LL_mDelay>

  resetDigits();
 8003032:	f7ff f837 	bl	80020a4 <resetDigits>
  resetSegments();
 8003036:	f7fe ffd9 	bl	8001fec <resetSegments>

  MX_I2C1_Init();
 800303a:	f7ff fd07 	bl	8002a4c <MX_I2C1_Init>


  lsm6ds0_init();
 800303e:	f000 fcf3 	bl	8003a28 <lsm6ds0_init>
  lps22hb_init();
 8003042:	f000 fe1d 	bl	8003c80 <lps22hb_init>
  hts221_init();
 8003046:	f7fe ff67 	bl	8001f18 <hts221_init>

  for(int i = 0; i<4; i++){
 800304a:	2300      	movs	r3, #0
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800304e:	e009      	b.n	8003064 <main+0x64>
	  changeMode(str, i);
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	b2da      	uxtb	r2, r3
 8003054:	463b      	mov	r3, r7
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f8bf 	bl	80031dc <changeMode>
  for(int i = 0; i<4; i++){
 800305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003060:	3301      	adds	r3, #1
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003066:	2b03      	cmp	r3, #3
 8003068:	ddf2      	ble.n	8003050 <main+0x50>
  }
  changeDisplayString(str[mode],strlen(str[mode]));
 800306a:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <main+0xf8>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	4639      	mov	r1, r7
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	4413      	add	r3, r2
 800307c:	18cc      	adds	r4, r1, r3
 800307e:	4b1e      	ldr	r3, [pc, #120]	; (80030f8 <main+0xf8>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	4639      	mov	r1, r7
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	440b      	add	r3, r1
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd f89c 	bl	80001d0 <strlen>
 8003098:	4603      	mov	r3, r0
 800309a:	4619      	mov	r1, r3
 800309c:	4620      	mov	r0, r4
 800309e:	f7ff f83d 	bl	800211c <changeDisplayString>

  MX_TIM2_Init();
 80030a2:	f000 fbff 	bl	80038a4 <MX_TIM2_Init>

//	humidity = hts221_get_humidity();
//	press = lps22hb_get_press();
//  temp = lps22hb_get_temp();
//	alt = lps22hb_get_altitude();
	changeMode(str, mode);
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <main+0xf8>)
 80030a8:	781a      	ldrb	r2, [r3, #0]
 80030aa:	463b      	mov	r3, r7
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f894 	bl	80031dc <changeMode>
	changeDisplayString(str[mode],strlen(str[mode]));
 80030b4:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <main+0xf8>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	4639      	mov	r1, r7
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	18cc      	adds	r4, r1, r3
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <main+0xf8>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	4639      	mov	r1, r7
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	440b      	add	r3, r1
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fd f877 	bl	80001d0 <strlen>
 80030e2:	4603      	mov	r3, r0
 80030e4:	4619      	mov	r1, r3
 80030e6:	4620      	mov	r0, r4
 80030e8:	f7ff f818 	bl	800211c <changeDisplayString>
	LL_mDelay(500);
 80030ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030f0:	f7fe fe64 	bl	8001dbc <LL_mDelay>
	changeMode(str, mode);
 80030f4:	e7d7      	b.n	80030a6 <main+0xa6>
 80030f6:	bf00      	nop
 80030f8:	20000252 	.word	0x20000252

080030fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8003100:	2000      	movs	r0, #0
 8003102:	f7ff ff03 	bl	8002f0c <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8003106:	f7ff ff15 	bl	8002f34 <LL_FLASH_GetLatency>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8003110:	f000 f8fe 	bl	8003310 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8003114:	f7ff fe1c 	bl	8002d50 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8003118:	bf00      	nop
 800311a:	f7ff fe29 	bl	8002d70 <LL_RCC_HSI_IsReady>
 800311e:	4603      	mov	r3, r0
 8003120:	2b01      	cmp	r3, #1
 8003122:	d1fa      	bne.n	800311a <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8003124:	2010      	movs	r0, #16
 8003126:	f7ff fe35 	bl	8002d94 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800312a:	2000      	movs	r0, #0
 800312c:	f7ff fe6a 	bl	8002e04 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003130:	2000      	movs	r0, #0
 8003132:	f7ff fe7b 	bl	8002e2c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8003136:	2000      	movs	r0, #0
 8003138:	f7ff fe8c 	bl	8002e54 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800313c:	2000      	movs	r0, #0
 800313e:	f7ff fe3f 	bl	8002dc0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003142:	bf00      	nop
 8003144:	f7ff fe50 	bl	8002de8 <LL_RCC_GetSysClkSource>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1fa      	bne.n	8003144 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 800314e:	4807      	ldr	r0, [pc, #28]	; (800316c <SystemClock_Config+0x70>)
 8003150:	f7fe fe26 	bl	8001da0 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8003154:	2004      	movs	r0, #4
 8003156:	f7ff ff21 	bl	8002f9c <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 800315a:	4804      	ldr	r0, [pc, #16]	; (800316c <SystemClock_Config+0x70>)
 800315c:	f7fe fe54 	bl	8001e08 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8003160:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003164:	f7ff fe8a 	bl	8002e7c <LL_RCC_SetI2CClockSource>
}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}
 800316c:	007a1200 	.word	0x007a1200

08003170 <checkButtonState>:


uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	461a      	mov	r2, r3
 800317e:	4603      	mov	r3, r0
 8003180:	70fb      	strb	r3, [r7, #3]
 8003182:	460b      	mov	r3, r1
 8003184:	70bb      	strb	r3, [r7, #2]
 8003186:	4613      	mov	r3, r2
 8003188:	707b      	strb	r3, [r7, #1]
	int counter = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i < samples_window; i++){
 800318e:	2300      	movs	r3, #0
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	e019      	b.n	80031c8 <checkButtonState+0x58>
		if(LL_GPIO_IsInputPinSet(PORT, GPIO_BSRR_BS_3) == edge){
 8003194:	2108      	movs	r1, #8
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ff1c 	bl	8002fd4 <LL_GPIO_IsInputPinSet>
 800319c:	4602      	mov	r2, r0
 800319e:	78bb      	ldrb	r3, [r7, #2]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d103      	bne.n	80031ac <checkButtonState+0x3c>
			counter += 1;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3301      	adds	r3, #1
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	e001      	b.n	80031b0 <checkButtonState+0x40>
		}else{
			counter = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
		}

		if(counter >= samples_required){
 80031b0:	7e3b      	ldrb	r3, [r7, #24]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	db01      	blt.n	80031bc <checkButtonState+0x4c>
			return 1;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e00a      	b.n	80031d2 <checkButtonState+0x62>
		}

		LL_mDelay(1);
 80031bc:	2001      	movs	r0, #1
 80031be:	f7fe fdfd 	bl	8001dbc <LL_mDelay>
	for(int i = 0; i < samples_window; i++){
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	3301      	adds	r3, #1
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	787b      	ldrb	r3, [r7, #1]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	dbe1      	blt.n	8003194 <checkButtonState+0x24>
	}

	return 0;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <changeMode>:

void changeMode(char str[4][11], uint8_t mode)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	70fb      	strb	r3, [r7, #3]
	float tmp;

	switch(mode)
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d877      	bhi.n	80032de <changeMode+0x102>
 80031ee:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <changeMode+0x18>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	08003205 	.word	0x08003205
 80031f8:	08003273 	.word	0x08003273
 80031fc:	0800329b 	.word	0x0800329b
 8003200:	080032bd 	.word	0x080032bd
	{
		case 0: // teplota
			tmp = lps22hb_get_temp();
 8003204:	f000 fc94 	bl	8003b30 <lps22hb_get_temp>
 8003208:	ed87 0a03 	vstr	s0, [r7, #12]
			tmp = -3.1;
 800320c:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <changeMode+0x10c>)
 800320e:	60fb      	str	r3, [r7, #12]
			if(tmp >= 100){
 8003210:	edd7 7a03 	vldr	s15, [r7, #12]
 8003214:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80032ec <changeMode+0x110>
 8003218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	db01      	blt.n	8003226 <changeMode+0x4a>
				tmp = 99.9;
 8003222:	4b33      	ldr	r3, [pc, #204]	; (80032f0 <changeMode+0x114>)
 8003224:	60fb      	str	r3, [r7, #12]
			}
			if(tmp <= -100){
 8003226:	edd7 7a03 	vldr	s15, [r7, #12]
 800322a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80032f4 <changeMode+0x118>
 800322e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003236:	d801      	bhi.n	800323c <changeMode+0x60>
				tmp = -99.9;
 8003238:	4b2f      	ldr	r3, [pc, #188]	; (80032f8 <changeMode+0x11c>)
 800323a:	60fb      	str	r3, [r7, #12]
			}
			if(tmp >= 0){
 800323c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003248:	db09      	blt.n	800325e <changeMode+0x82>
				sprintf(str[0], "TEMP_%04.1f",tmp);
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7fd f97c 	bl	8000548 <__aeabi_f2d>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4929      	ldr	r1, [pc, #164]	; (80032fc <changeMode+0x120>)
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f001 f9ea 	bl	8004630 <siprintf>
			}else{
				sprintf(str[0], "TEMP_%05.1f",tmp);

			}
			break;
 800325c:	e03f      	b.n	80032de <changeMode+0x102>
				sprintf(str[0], "TEMP_%05.1f",tmp);
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7fd f972 	bl	8000548 <__aeabi_f2d>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4925      	ldr	r1, [pc, #148]	; (8003300 <changeMode+0x124>)
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f001 f9e0 	bl	8004630 <siprintf>
			break;
 8003270:	e035      	b.n	80032de <changeMode+0x102>
		case 1: // rel. vlhkost
			sprintf(str[1], "HUM_%02d",(int)(hts221_get_humidity()*100));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f103 040b 	add.w	r4, r3, #11
 8003278:	f7fe fe1e 	bl	8001eb8 <hts221_get_humidity>
 800327c:	eef0 7a40 	vmov.f32	s15, s0
 8003280:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80032ec <changeMode+0x110>
 8003284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800328c:	ee17 2a90 	vmov	r2, s15
 8003290:	491c      	ldr	r1, [pc, #112]	; (8003304 <changeMode+0x128>)
 8003292:	4620      	mov	r0, r4
 8003294:	f001 f9cc 	bl	8004630 <siprintf>
			break;
 8003298:	e021      	b.n	80032de <changeMode+0x102>
		case 2: // tlak
			sprintf(str[2], "BAR_%06.1f",lps22hb_get_press());
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f103 0416 	add.w	r4, r3, #22
 80032a0:	f000 fc6e 	bl	8003b80 <lps22hb_get_press>
 80032a4:	ee10 3a10 	vmov	r3, s0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd f94d 	bl	8000548 <__aeabi_f2d>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4915      	ldr	r1, [pc, #84]	; (8003308 <changeMode+0x12c>)
 80032b4:	4620      	mov	r0, r4
 80032b6:	f001 f9bb 	bl	8004630 <siprintf>
			break;
 80032ba:	e010      	b.n	80032de <changeMode+0x102>
		case 3: // nadmorska vyska
			sprintf(str[3], "ALT_%06.1f",lps22hb_get_altitude());
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f103 0421 	add.w	r4, r3, #33	; 0x21
 80032c2:	f000 fc85 	bl	8003bd0 <lps22hb_get_altitude>
 80032c6:	ee10 3a10 	vmov	r3, s0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fd f93c 	bl	8000548 <__aeabi_f2d>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	490d      	ldr	r1, [pc, #52]	; (800330c <changeMode+0x130>)
 80032d6:	4620      	mov	r0, r4
 80032d8:	f001 f9aa 	bl	8004630 <siprintf>
			break;
 80032dc:	bf00      	nop
	}
}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd90      	pop	{r4, r7, pc}
 80032e6:	bf00      	nop
 80032e8:	c0466666 	.word	0xc0466666
 80032ec:	42c80000 	.word	0x42c80000
 80032f0:	42c7cccd 	.word	0x42c7cccd
 80032f4:	c2c80000 	.word	0xc2c80000
 80032f8:	c2c7cccd 	.word	0xc2c7cccd
 80032fc:	08006eb8 	.word	0x08006eb8
 8003300:	08006ec4 	.word	0x08006ec4
 8003304:	08006ed0 	.word	0x08006ed0
 8003308:	08006edc 	.word	0x08006edc
 800330c:	08006ee8 	.word	0x08006ee8

08003310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af02      	add	r7, sp, #8
	if(checkButtonState(GPIO_PORT_BUTTON,
 8003326:	2314      	movs	r3, #20
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	231e      	movs	r3, #30
 800332c:	2201      	movs	r2, #1
 800332e:	2103      	movs	r1, #3
 8003330:	4810      	ldr	r0, [pc, #64]	; (8003374 <EXTI3_IRQHandler+0x54>)
 8003332:	f7ff ff1d 	bl	8003170 <checkButtonState>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <EXTI3_IRQHandler+0x3a>
						GPIO_PIN_BUTTON,
						BUTTON_EXTI_TRIGGER,
						BUTTON_EXTI_SAMPLES_WINDOW,
						BUTTON_EXTI_SAMPLES_REQUIRED))
	{
		mode++;
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <EXTI3_IRQHandler+0x58>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	b2da      	uxtb	r2, r3
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <EXTI3_IRQHandler+0x58>)
 8003346:	701a      	strb	r2, [r3, #0]
		if(mode > 3) mode = 0;
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <EXTI3_IRQHandler+0x58>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d902      	bls.n	8003356 <EXTI3_IRQHandler+0x36>
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <EXTI3_IRQHandler+0x58>)
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
		startNewStr();
 8003356:	f7fe ffb7 	bl	80022c8 <startNewStr>
	}
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 800335a:	2008      	movs	r0, #8
 800335c:	f7ff fdf8 	bl	8002f50 <LL_EXTI_IsActiveFlag_0_31>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <EXTI3_IRQHandler+0x4c>
	  {
	    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8003366:	2008      	movs	r0, #8
 8003368:	f7ff fe08 	bl	8002f7c <LL_EXTI_ClearFlag_0_31>
	  }
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	48000400 	.word	0x48000400
 8003378:	20000252 	.word	0x20000252

0800337c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800338e:	e7fe      	b.n	800338e <HardFault_Handler+0x4>

08003390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003394:	e7fe      	b.n	8003394 <MemManage_Handler+0x4>

08003396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800339a:	e7fe      	b.n	800339a <BusFault_Handler+0x4>

0800339c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033a0:	e7fe      	b.n	80033a0 <UsageFault_Handler+0x4>

080033a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033be:	b480      	push	{r7}
 80033c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	disp_time++;
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <SysTick_Handler+0x20>)
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	1c50      	adds	r0, r2, #1
 80033d8:	f143 0100 	adc.w	r1, r3, #0
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <SysTick_Handler+0x20>)
 80033de:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	20000248 	.word	0x20000248

080033f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
	return 1;
 80033f4:	2301      	movs	r3, #1
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <_kill>:

int _kill(int pid, int sig)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800340a:	f000 fc75 	bl	8003cf8 <__errno>
 800340e:	4603      	mov	r3, r0
 8003410:	2216      	movs	r2, #22
 8003412:	601a      	str	r2, [r3, #0]
	return -1;
 8003414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <_exit>:

void _exit (int status)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003428:	f04f 31ff 	mov.w	r1, #4294967295
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ffe7 	bl	8003400 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003432:	e7fe      	b.n	8003432 <_exit+0x12>

08003434 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e00a      	b.n	800345c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003446:	f3af 8000 	nop.w
 800344a:	4601      	mov	r1, r0
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	60ba      	str	r2, [r7, #8]
 8003452:	b2ca      	uxtb	r2, r1
 8003454:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	3301      	adds	r3, #1
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	429a      	cmp	r2, r3
 8003462:	dbf0      	blt.n	8003446 <_read+0x12>
	}

return len;
 8003464:	687b      	ldr	r3, [r7, #4]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	e009      	b.n	8003494 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	60ba      	str	r2, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	3301      	adds	r3, #1
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	429a      	cmp	r2, r3
 800349a:	dbf1      	blt.n	8003480 <_write+0x12>
	}
	return len;
 800349c:	687b      	ldr	r3, [r7, #4]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <_close>:

int _close(int file)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
	return -1;
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034ce:	605a      	str	r2, [r3, #4]
	return 0;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <_isatty>:

int _isatty(int file)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
	return 1;
 80034e6:	2301      	movs	r3, #1
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
	return 0;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <_sbrk+0x50>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <_sbrk+0x16>
		heap_end = &end;
 8003520:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <_sbrk+0x50>)
 8003522:	4a10      	ldr	r2, [pc, #64]	; (8003564 <_sbrk+0x54>)
 8003524:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003526:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <_sbrk+0x50>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800352c:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <_sbrk+0x50>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4413      	add	r3, r2
 8003534:	466a      	mov	r2, sp
 8003536:	4293      	cmp	r3, r2
 8003538:	d907      	bls.n	800354a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800353a:	f000 fbdd 	bl	8003cf8 <__errno>
 800353e:	4603      	mov	r3, r0
 8003540:	220c      	movs	r2, #12
 8003542:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	e006      	b.n	8003558 <_sbrk+0x48>
	}

	heap_end += incr;
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <_sbrk+0x50>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	4a03      	ldr	r2, [pc, #12]	; (8003560 <_sbrk+0x50>)
 8003554:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003556:	68fb      	ldr	r3, [r7, #12]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	20000254 	.word	0x20000254
 8003564:	20000278 	.word	0x20000278

08003568 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800356c:	4b1f      	ldr	r3, [pc, #124]	; (80035ec <SystemInit+0x84>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	4a1e      	ldr	r2, [pc, #120]	; (80035ec <SystemInit+0x84>)
 8003574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800357c:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <SystemInit+0x88>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <SystemInit+0x88>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003588:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <SystemInit+0x88>)
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	4918      	ldr	r1, [pc, #96]	; (80035f0 <SystemInit+0x88>)
 800358e:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <SystemInit+0x8c>)
 8003590:	4013      	ands	r3, r2
 8003592:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003594:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <SystemInit+0x88>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a15      	ldr	r2, [pc, #84]	; (80035f0 <SystemInit+0x88>)
 800359a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800359e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <SystemInit+0x88>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a11      	ldr	r2, [pc, #68]	; (80035f0 <SystemInit+0x88>)
 80035aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <SystemInit+0x88>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <SystemInit+0x88>)
 80035b6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80035ba:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <SystemInit+0x88>)
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	4a0b      	ldr	r2, [pc, #44]	; (80035f0 <SystemInit+0x88>)
 80035c2:	f023 030f 	bic.w	r3, r3, #15
 80035c6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <SystemInit+0x88>)
 80035ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035cc:	4908      	ldr	r1, [pc, #32]	; (80035f0 <SystemInit+0x88>)
 80035ce:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <SystemInit+0x90>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <SystemInit+0x88>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <SystemInit+0x84>)
 80035dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035e0:	609a      	str	r2, [r3, #8]
#endif
}
 80035e2:	bf00      	nop
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000ed00 	.word	0xe000ed00
 80035f0:	40021000 	.word	0x40021000
 80035f4:	f87fc00c 	.word	0xf87fc00c
 80035f8:	ff00fccc 	.word	0xff00fccc

080035fc <NVIC_GetPriorityGrouping>:
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <NVIC_GetPriorityGrouping+0x18>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	0a1b      	lsrs	r3, r3, #8
 8003606:	f003 0307 	and.w	r3, r3, #7
}
 800360a:	4618      	mov	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <NVIC_EnableIRQ>:
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	f003 021f 	and.w	r2, r3, #31
 8003628:	4907      	ldr	r1, [pc, #28]	; (8003648 <NVIC_EnableIRQ+0x30>)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2001      	movs	r0, #1
 8003632:	fa00 f202 	lsl.w	r2, r0, r2
 8003636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000e100 	.word	0xe000e100

0800364c <NVIC_SetPriority>:
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	6039      	str	r1, [r7, #0]
 8003656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365c:	2b00      	cmp	r3, #0
 800365e:	da0b      	bge.n	8003678 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	b2da      	uxtb	r2, r3
 8003664:	490c      	ldr	r1, [pc, #48]	; (8003698 <NVIC_SetPriority+0x4c>)
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	3b04      	subs	r3, #4
 800366e:	0112      	lsls	r2, r2, #4
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	440b      	add	r3, r1
 8003674:	761a      	strb	r2, [r3, #24]
}
 8003676:	e009      	b.n	800368c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	4907      	ldr	r1, [pc, #28]	; (800369c <NVIC_SetPriority+0x50>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	440b      	add	r3, r1
 8003688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000ed00 	.word	0xe000ed00
 800369c:	e000e100 	.word	0xe000e100

080036a0 <NVIC_EncodePriority>:
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	; 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f1c3 0307 	rsb	r3, r3, #7
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	bf28      	it	cs
 80036be:	2304      	movcs	r3, #4
 80036c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	3304      	adds	r3, #4
 80036c6:	2b06      	cmp	r3, #6
 80036c8:	d902      	bls.n	80036d0 <NVIC_EncodePriority+0x30>
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3b03      	subs	r3, #3
 80036ce:	e000      	b.n	80036d2 <NVIC_EncodePriority+0x32>
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d4:	f04f 32ff 	mov.w	r2, #4294967295
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43da      	mvns	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	401a      	ands	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e8:	f04f 31ff 	mov.w	r1, #4294967295
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	fa01 f303 	lsl.w	r3, r1, r3
 80036f2:	43d9      	mvns	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f8:	4313      	orrs	r3, r2
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3724      	adds	r7, #36	; 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <LL_APB1_GRP1_EnableClock>:
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	4907      	ldr	r1, [pc, #28]	; (8003734 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4313      	orrs	r3, r2
 800371a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <LL_APB1_GRP1_EnableClock+0x2c>)
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4013      	ands	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003726:	68fb      	ldr	r3, [r7, #12]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40021000 	.word	0x40021000

08003738 <LL_TIM_EnableCounter>:
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	601a      	str	r2, [r3, #0]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_TIM_EnableARRPreload>:
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	601a      	str	r2, [r3, #0]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <LL_TIM_OC_DisableFast>:
{
 8003778:	b4b0      	push	{r4, r5, r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d028      	beq.n	80037da <LL_TIM_OC_DisableFast+0x62>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b04      	cmp	r3, #4
 800378c:	d023      	beq.n	80037d6 <LL_TIM_OC_DisableFast+0x5e>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b10      	cmp	r3, #16
 8003792:	d01e      	beq.n	80037d2 <LL_TIM_OC_DisableFast+0x5a>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b40      	cmp	r3, #64	; 0x40
 8003798:	d019      	beq.n	80037ce <LL_TIM_OC_DisableFast+0x56>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a0:	d013      	beq.n	80037ca <LL_TIM_OC_DisableFast+0x52>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a8:	d00d      	beq.n	80037c6 <LL_TIM_OC_DisableFast+0x4e>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b0:	d007      	beq.n	80037c2 <LL_TIM_OC_DisableFast+0x4a>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b8:	d101      	bne.n	80037be <LL_TIM_OC_DisableFast+0x46>
 80037ba:	2307      	movs	r3, #7
 80037bc:	e00e      	b.n	80037dc <LL_TIM_OC_DisableFast+0x64>
 80037be:	2308      	movs	r3, #8
 80037c0:	e00c      	b.n	80037dc <LL_TIM_OC_DisableFast+0x64>
 80037c2:	2306      	movs	r3, #6
 80037c4:	e00a      	b.n	80037dc <LL_TIM_OC_DisableFast+0x64>
 80037c6:	2305      	movs	r3, #5
 80037c8:	e008      	b.n	80037dc <LL_TIM_OC_DisableFast+0x64>
 80037ca:	2304      	movs	r3, #4
 80037cc:	e006      	b.n	80037dc <LL_TIM_OC_DisableFast+0x64>
 80037ce:	2303      	movs	r3, #3
 80037d0:	e004      	b.n	80037dc <LL_TIM_OC_DisableFast+0x64>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e002      	b.n	80037dc <LL_TIM_OC_DisableFast+0x64>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <LL_TIM_OC_DisableFast+0x64>
 80037da:	2300      	movs	r3, #0
 80037dc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3318      	adds	r3, #24
 80037e2:	461a      	mov	r2, r3
 80037e4:	4629      	mov	r1, r5
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <LL_TIM_OC_DisableFast+0x94>)
 80037e8:	5c5b      	ldrb	r3, [r3, r1]
 80037ea:	4413      	add	r3, r2
 80037ec:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80037ee:	6822      	ldr	r2, [r4, #0]
 80037f0:	4629      	mov	r1, r5
 80037f2:	4b07      	ldr	r3, [pc, #28]	; (8003810 <LL_TIM_OC_DisableFast+0x98>)
 80037f4:	5c5b      	ldrb	r3, [r3, r1]
 80037f6:	4619      	mov	r1, r3
 80037f8:	2304      	movs	r3, #4
 80037fa:	408b      	lsls	r3, r1
 80037fc:	43db      	mvns	r3, r3
 80037fe:	4013      	ands	r3, r2
 8003800:	6023      	str	r3, [r4, #0]
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bcb0      	pop	{r4, r5, r7}
 800380a:	4770      	bx	lr
 800380c:	08006f40 	.word	0x08006f40
 8003810:	08006f4c 	.word	0x08006f4c

08003814 <LL_TIM_SetClockSource>:
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003826:	f023 0307 	bic.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	609a      	str	r2, [r3, #8]
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <LL_TIM_SetTriggerOutput>:
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	605a      	str	r2, [r3, #4]
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <LL_TIM_DisableMasterSlaveMode>:
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	609a      	str	r2, [r3, #8]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_TIM_EnableIT_UPDATE>:
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f043 0201 	orr.w	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	60da      	str	r2, [r3, #12]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08e      	sub	sp, #56	; 0x38
 80038a8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80038aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	609a      	str	r2, [r3, #8]
 80038b6:	60da      	str	r2, [r3, #12]
 80038b8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	2220      	movs	r2, #32
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fa43 	bl	8003d4c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80038c6:	2001      	movs	r0, #1
 80038c8:	f7ff ff1e 	bl	8003708 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 80038cc:	f7ff fe96 	bl	80035fc <NVIC_GetPriorityGrouping>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2202      	movs	r2, #2
 80038d4:	2102      	movs	r1, #2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fee2 	bl	80036a0 <NVIC_EncodePriority>
 80038dc:	4603      	mov	r3, r0
 80038de:	4619      	mov	r1, r3
 80038e0:	201c      	movs	r0, #28
 80038e2:	f7ff feb3 	bl	800364c <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80038e6:	201c      	movs	r0, #28
 80038e8:	f7ff fe96 	bl	8003618 <NVIC_EnableIRQ>

  //TIM2 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 80038ec:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80038f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80038f2:	2300      	movs	r3, #0
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 80038f6:	2313      	movs	r3, #19
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80038fa:	2300      	movs	r3, #0
 80038fc:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80038fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003902:	4619      	mov	r1, r3
 8003904:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003908:	f7fd fea4 	bl	8001654 <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM2);
  LL_TIM_EnableARRPreload(TIM2);
 800390c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003910:	f7ff ff22 	bl	8003758 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003914:	2100      	movs	r1, #0
 8003916:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800391a:	f7ff ff7b 	bl	8003814 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 800391e:	2310      	movs	r3, #16
 8003920:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003932:	1d3b      	adds	r3, r7, #4
 8003934:	461a      	mov	r2, r3
 8003936:	2101      	movs	r1, #1
 8003938:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800393c:	f7fd fefe 	bl	800173c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8003940:	2101      	movs	r1, #1
 8003942:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003946:	f7ff ff17 	bl	8003778 <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800394a:	2100      	movs	r1, #0
 800394c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003950:	f7ff ff75 	bl	800383e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8003954:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003958:	f7ff ff84 	bl	8003864 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM2);
 800395c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003960:	f7ff ff90 	bl	8003884 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8003964:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003968:	f7ff fee6 	bl	8003738 <LL_TIM_EnableCounter>

}
 800396c:	bf00      	nop
 800396e:	3738      	adds	r7, #56	; 0x38
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003978:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800397a:	e003      	b.n	8003984 <LoopCopyDataInit>

0800397c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800397e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003980:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003982:	3104      	adds	r1, #4

08003984 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003984:	480b      	ldr	r0, [pc, #44]	; (80039b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003986:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003988:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800398a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800398c:	d3f6      	bcc.n	800397c <CopyDataInit>
	ldr	r2, =_sbss
 800398e:	4a0b      	ldr	r2, [pc, #44]	; (80039bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8003990:	e002      	b.n	8003998 <LoopFillZerobss>

08003992 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003992:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003994:	f842 3b04 	str.w	r3, [r2], #4

08003998 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <LoopForever+0x16>)
	cmp	r2, r3
 800399a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800399c:	d3f9      	bcc.n	8003992 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800399e:	f7ff fde3 	bl	8003568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039a2:	f000 f9af 	bl	8003d04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80039a6:	f7ff fb2b 	bl	8003000 <main>

080039aa <LoopForever>:

LoopForever:
    b LoopForever
 80039aa:	e7fe      	b.n	80039aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80039ac:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80039b0:	08007344 	.word	0x08007344
	ldr	r0, =_sdata
 80039b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80039b8:	20000224 	.word	0x20000224
	ldr	r2, =_sbss
 80039bc:	20000228 	.word	0x20000228
	ldr	r3, = _ebss
 80039c0:	20000278 	.word	0x20000278

080039c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80039c4:	e7fe      	b.n	80039c4 <ADC1_2_IRQHandler>
	...

080039c8 <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres1 = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres1, 0));
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <lsm6ds0_read_byte+0x30>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	79fa      	ldrb	r2, [r7, #7]
 80039dc:	f107 000f 	add.w	r0, r7, #15
 80039e0:	2100      	movs	r1, #0
 80039e2:	9100      	str	r1, [sp, #0]
 80039e4:	2101      	movs	r1, #1
 80039e6:	f7ff f8e5 	bl	8002bb4 <i2c_master_read>
 80039ea:	4603      	mov	r3, r0
 80039ec:	781b      	ldrb	r3, [r3, #0]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	2000004c 	.word	0x2000004c

080039fc <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	460a      	mov	r2, r1
 8003a06:	71fb      	strb	r3, [r7, #7]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres1, 0);
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <lsm6ds0_write_byte+0x28>)
 8003a0e:	781a      	ldrb	r2, [r3, #0]
 8003a10:	79f9      	ldrb	r1, [r7, #7]
 8003a12:	79b8      	ldrb	r0, [r7, #6]
 8003a14:	2300      	movs	r3, #0
 8003a16:	f7ff f889 	bl	8002b2c <i2c_master_write>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	2000004c 	.word	0x2000004c

08003a28 <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8003a32:	2064      	movs	r0, #100	; 0x64
 8003a34:	f7fe f9c2 	bl	8001dbc <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8003a38:	200f      	movs	r0, #15
 8003a3a:	f7ff ffc5 	bl	80039c8 <lsm6ds0_read_byte>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8003a42:	79bb      	ldrb	r3, [r7, #6]
 8003a44:	2b6a      	cmp	r3, #106	; 0x6a
 8003a46:	d102      	bne.n	8003a4e <lsm6ds0_init+0x26>
	{
		status = 1;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	71fb      	strb	r3, [r7, #7]
 8003a4c:	e00f      	b.n	8003a6e <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres1 = LSM6DS0_DEVICE_ADDRESS_1;
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <lsm6ds0_init+0x74>)
 8003a50:	22d7      	movs	r2, #215	; 0xd7
 8003a52:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8003a54:	200f      	movs	r0, #15
 8003a56:	f7ff ffb7 	bl	80039c8 <lsm6ds0_read_byte>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8003a5e:	79bb      	ldrb	r3, [r7, #6]
 8003a60:	2b6a      	cmp	r3, #106	; 0x6a
 8003a62:	d102      	bne.n	8003a6a <lsm6ds0_init+0x42>
		{
			status = 1;
 8003a64:	2301      	movs	r3, #1
 8003a66:	71fb      	strb	r3, [r7, #7]
 8003a68:	e001      	b.n	8003a6e <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	71fb      	strb	r3, [r7, #7]
			//return status;
		}
	}

	//acc device init
	uint8_t ctrl1 = lsm6ds0_read_byte(LSM6DS0_ADDRESS_CTRL1);
 8003a6e:	2010      	movs	r0, #16
 8003a70:	f7ff ffaa 	bl	80039c8 <lsm6ds0_read_byte>
 8003a74:	4603      	mov	r3, r0
 8003a76:	717b      	strb	r3, [r7, #5]
	ctrl1 &= ~0xFC;
 8003a78:	797b      	ldrb	r3, [r7, #5]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	717b      	strb	r3, [r7, #5]
	ctrl1 |= 0x70;
 8003a80:	797b      	ldrb	r3, [r7, #5]
 8003a82:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003a86:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8003a88:	797b      	ldrb	r3, [r7, #5]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	2010      	movs	r0, #16
 8003a8e:	f7ff ffb5 	bl	80039fc <lsm6ds0_write_byte>

	return status;
 8003a92:	79fb      	ldrb	r3, [r7, #7]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	2000004c 	.word	0x2000004c

08003aa0 <lps22hb_read_byte>:
const float M = 0.0289644;   // Molar mass of earth air 		[kg/mol]
const float Pb = 101325;  	// Static pressure at sea level 	[Pa]
const float Tb = 288.15;	// Standard temperature at sea level[K]

uint8_t lps22hb_read_byte(uint8_t reg_addr)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres2, 0));
 8003aae:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <lps22hb_read_byte+0x30>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	79fa      	ldrb	r2, [r7, #7]
 8003ab4:	f107 000f 	add.w	r0, r7, #15
 8003ab8:	2100      	movs	r1, #0
 8003aba:	9100      	str	r1, [sp, #0]
 8003abc:	2101      	movs	r1, #1
 8003abe:	f7ff f879 	bl	8002bb4 <i2c_master_read>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	781b      	ldrb	r3, [r3, #0]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	2000004d 	.word	0x2000004d

08003ad4 <lps22hb_write_byte>:


void lps22hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	460a      	mov	r2, r1
 8003ade:	71fb      	strb	r3, [r7, #7]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres2, 0);
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <lps22hb_write_byte+0x28>)
 8003ae6:	781a      	ldrb	r2, [r3, #0]
 8003ae8:	79f9      	ldrb	r1, [r7, #7]
 8003aea:	79b8      	ldrb	r0, [r7, #6]
 8003aec:	2300      	movs	r3, #0
 8003aee:	f7ff f81d 	bl	8002b2c <i2c_master_write>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	2000004d 	.word	0x2000004d

08003b00 <lps22hb_readArray>:


void lps22hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	70fb      	strb	r3, [r7, #3]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres2, 0);
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <lps22hb_readArray+0x2c>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	78b9      	ldrb	r1, [r7, #2]
 8003b18:	2000      	movs	r0, #0
 8003b1a:	9000      	str	r0, [sp, #0]
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff f849 	bl	8002bb4 <i2c_master_read>
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	2000004d 	.word	0x2000004d

08003b30 <lps22hb_get_temp>:

float lps22hb_get_temp()
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
	uint8_t temp[2];
	lps22hb_readArray(temp, LPS22HB_ADDRESS_TEMP_OUT_L, 2);
 8003b36:	1d3b      	adds	r3, r7, #4
 8003b38:	2202      	movs	r2, #2
 8003b3a:	212b      	movs	r1, #43	; 0x2b
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ffdf 	bl	8003b00 <lps22hb_readArray>

	return ((int16_t)((temp[1] << 8) | temp[0]))/100.0;		//	https://github.com/arduino-libraries/Arduino_LPS22HB/issues/3
 8003b42:	797b      	ldrb	r3, [r7, #5]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	b21a      	sxth	r2, r3
 8003b48:	793b      	ldrb	r3, [r7, #4]
 8003b4a:	b21b      	sxth	r3, r3
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	b21b      	sxth	r3, r3
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fc fce7 	bl	8000524 <__aeabi_i2d>
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <lps22hb_get_temp+0x4c>)
 8003b5c:	f7fc fe76 	bl	800084c <__aeabi_ddiv>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	f7fd f81e 	bl	8000ba8 <__aeabi_d2f>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	ee07 3a90 	vmov	s15, r3
}
 8003b72:	eeb0 0a67 	vmov.f32	s0, s15
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40590000 	.word	0x40590000

08003b80 <lps22hb_get_press>:

float lps22hb_get_press(){
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0

	uint8_t temp[3];
	lps22hb_readArray(temp, LPS22HB_ADDRESS_PRESS_OUT_XL, 3);
 8003b86:	1d3b      	adds	r3, r7, #4
 8003b88:	2203      	movs	r2, #3
 8003b8a:	2128      	movs	r1, #40	; 0x28
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff ffb7 	bl	8003b00 <lps22hb_readArray>

	return (temp[2]*65536 + temp[1]*256 + temp[0])/4096.0; 	// lps22hb dokumentacia str. 16
 8003b92:	79bb      	ldrb	r3, [r7, #6]
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	797a      	ldrb	r2, [r7, #5]
 8003b98:	4413      	add	r3, r2
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	793a      	ldrb	r2, [r7, #4]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fc fcbf 	bl	8000524 <__aeabi_i2d>
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <lps22hb_get_press+0x4c>)
 8003bac:	f7fc fe4e 	bl	800084c <__aeabi_ddiv>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f7fc fff6 	bl	8000ba8 <__aeabi_d2f>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	ee07 3a90 	vmov	s15, r3
}
 8003bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40b00000 	.word	0x40b00000

08003bd0 <lps22hb_get_altitude>:

float lps22hb_get_altitude(){
 8003bd0:	b5b0      	push	{r4, r5, r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
	return (R*Tb*log(lps22hb_get_press()*100/Pb))/(-g*M);  //https://www.mide.com/air-pressure-at-altitude-calculator
 8003bd4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003c68 <lps22hb_get_altitude+0x98>
 8003bd8:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003c6c <lps22hb_get_altitude+0x9c>
 8003bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be0:	ee17 0a90 	vmov	r0, s15
 8003be4:	f7fc fcb0 	bl	8000548 <__aeabi_f2d>
 8003be8:	4604      	mov	r4, r0
 8003bea:	460d      	mov	r5, r1
 8003bec:	f7ff ffc8 	bl	8003b80 <lps22hb_get_press>
 8003bf0:	eef0 7a40 	vmov.f32	s15, s0
 8003bf4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003c70 <lps22hb_get_altitude+0xa0>
 8003bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bfc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003c74 <lps22hb_get_altitude+0xa4>
 8003c00:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c04:	ee16 0a90 	vmov	r0, s13
 8003c08:	f7fc fc9e 	bl	8000548 <__aeabi_f2d>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	ec43 2b10 	vmov	d0, r2, r3
 8003c14:	f002 ff38 	bl	8006a88 <log>
 8003c18:	ec53 2b10 	vmov	r2, r3, d0
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	4629      	mov	r1, r5
 8003c20:	f7fc fcea 	bl	80005f8 <__aeabi_dmul>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4614      	mov	r4, r2
 8003c2a:	461d      	mov	r5, r3
 8003c2c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003c78 <lps22hb_get_altitude+0xa8>
 8003c30:	eef1 7a67 	vneg.f32	s15, s15
 8003c34:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003c7c <lps22hb_get_altitude+0xac>
 8003c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c3c:	ee17 0a90 	vmov	r0, s15
 8003c40:	f7fc fc82 	bl	8000548 <__aeabi_f2d>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4620      	mov	r0, r4
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	f7fc fdfe 	bl	800084c <__aeabi_ddiv>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4610      	mov	r0, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	f7fc ffa6 	bl	8000ba8 <__aeabi_d2f>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	ee07 3a90 	vmov	s15, r3
//	return (((generalPower(Pb/(lps22hb_get_press()*100), 1/5.257)-1)*(lps22hb_get_temp()+273.15))/0.0065);	//https://keisan.casio.com/exec/system/1224585971
}
 8003c62:	eeb0 0a67 	vmov.f32	s0, s15
 8003c66:	bdb0      	pop	{r4, r5, r7, pc}
 8003c68:	41050774 	.word	0x41050774
 8003c6c:	43901333 	.word	0x43901333
 8003c70:	42c80000 	.word	0x42c80000
 8003c74:	47c5e680 	.word	0x47c5e680
 8003c78:	411ce80a 	.word	0x411ce80a
 8003c7c:	3ced46c0 	.word	0x3ced46c0

08003c80 <lps22hb_init>:


uint8_t lps22hb_init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8003c86:	2301      	movs	r3, #1
 8003c88:	71fb      	strb	r3, [r7, #7]


	LL_mDelay(100);
 8003c8a:	2064      	movs	r0, #100	; 0x64
 8003c8c:	f7fe f896 	bl	8001dbc <LL_mDelay>

	uint8_t val = lps22hb_read_byte(LPS22HB_WHO_AM_I_ADDRES);
 8003c90:	200f      	movs	r0, #15
 8003c92:	f7ff ff05 	bl	8003aa0 <lps22hb_read_byte>
 8003c96:	4603      	mov	r3, r0
 8003c98:	71bb      	strb	r3, [r7, #6]

	if(val == LPS22HB_WHO_AM_I_VALUE)
 8003c9a:	79bb      	ldrb	r3, [r7, #6]
 8003c9c:	2bb1      	cmp	r3, #177	; 0xb1
 8003c9e:	d102      	bne.n	8003ca6 <lps22hb_init+0x26>
	{
		status = 1;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	71fb      	strb	r3, [r7, #7]
 8003ca4:	e00f      	b.n	8003cc6 <lps22hb_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres2 = LPS22HB_DEVICE_ADDRESS_1;
 8003ca6:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <lps22hb_init+0x74>)
 8003ca8:	22ba      	movs	r2, #186	; 0xba
 8003caa:	701a      	strb	r2, [r3, #0]
		val = lps22hb_read_byte(LPS22HB_WHO_AM_I_ADDRES);
 8003cac:	200f      	movs	r0, #15
 8003cae:	f7ff fef7 	bl	8003aa0 <lps22hb_read_byte>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71bb      	strb	r3, [r7, #6]
		if(val == LPS22HB_WHO_AM_I_VALUE)
 8003cb6:	79bb      	ldrb	r3, [r7, #6]
 8003cb8:	2bb1      	cmp	r3, #177	; 0xb1
 8003cba:	d102      	bne.n	8003cc2 <lps22hb_init+0x42>
		{
			status = 1;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	71fb      	strb	r3, [r7, #7]
 8003cc0:	e001      	b.n	8003cc6 <lps22hb_init+0x46>
		}
		else
		{
			status = 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	71fb      	strb	r3, [r7, #7]
		}
	}

	uint8_t ctrl1 = lps22hb_read_byte(LPS22HB_ADDRESS_CTRL1);
 8003cc6:	2010      	movs	r0, #16
 8003cc8:	f7ff feea 	bl	8003aa0 <lps22hb_read_byte>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	717b      	strb	r3, [r7, #5]
	ctrl1 &= ~0xFC;
 8003cd0:	797b      	ldrb	r3, [r7, #5]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	717b      	strb	r3, [r7, #5]
	ctrl1 |= 0x50;
 8003cd8:	797b      	ldrb	r3, [r7, #5]
 8003cda:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8003cde:	717b      	strb	r3, [r7, #5]
	lps22hb_write_byte(LPS22HB_ADDRESS_CTRL1, ctrl1);
 8003ce0:	797b      	ldrb	r3, [r7, #5]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	2010      	movs	r0, #16
 8003ce6:	f7ff fef5 	bl	8003ad4 <lps22hb_write_byte>

	return status;
 8003cea:	79fb      	ldrb	r3, [r7, #7]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	2000004d 	.word	0x2000004d

08003cf8 <__errno>:
 8003cf8:	4b01      	ldr	r3, [pc, #4]	; (8003d00 <__errno+0x8>)
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000050 	.word	0x20000050

08003d04 <__libc_init_array>:
 8003d04:	b570      	push	{r4, r5, r6, lr}
 8003d06:	4d0d      	ldr	r5, [pc, #52]	; (8003d3c <__libc_init_array+0x38>)
 8003d08:	4c0d      	ldr	r4, [pc, #52]	; (8003d40 <__libc_init_array+0x3c>)
 8003d0a:	1b64      	subs	r4, r4, r5
 8003d0c:	10a4      	asrs	r4, r4, #2
 8003d0e:	2600      	movs	r6, #0
 8003d10:	42a6      	cmp	r6, r4
 8003d12:	d109      	bne.n	8003d28 <__libc_init_array+0x24>
 8003d14:	4d0b      	ldr	r5, [pc, #44]	; (8003d44 <__libc_init_array+0x40>)
 8003d16:	4c0c      	ldr	r4, [pc, #48]	; (8003d48 <__libc_init_array+0x44>)
 8003d18:	f003 f8c2 	bl	8006ea0 <_init>
 8003d1c:	1b64      	subs	r4, r4, r5
 8003d1e:	10a4      	asrs	r4, r4, #2
 8003d20:	2600      	movs	r6, #0
 8003d22:	42a6      	cmp	r6, r4
 8003d24:	d105      	bne.n	8003d32 <__libc_init_array+0x2e>
 8003d26:	bd70      	pop	{r4, r5, r6, pc}
 8003d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2c:	4798      	blx	r3
 8003d2e:	3601      	adds	r6, #1
 8003d30:	e7ee      	b.n	8003d10 <__libc_init_array+0xc>
 8003d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d36:	4798      	blx	r3
 8003d38:	3601      	adds	r6, #1
 8003d3a:	e7f2      	b.n	8003d22 <__libc_init_array+0x1e>
 8003d3c:	0800733c 	.word	0x0800733c
 8003d40:	0800733c 	.word	0x0800733c
 8003d44:	0800733c 	.word	0x0800733c
 8003d48:	08007340 	.word	0x08007340

08003d4c <memset>:
 8003d4c:	4402      	add	r2, r0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d100      	bne.n	8003d56 <memset+0xa>
 8003d54:	4770      	bx	lr
 8003d56:	f803 1b01 	strb.w	r1, [r3], #1
 8003d5a:	e7f9      	b.n	8003d50 <memset+0x4>

08003d5c <__cvt>:
 8003d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d60:	ec55 4b10 	vmov	r4, r5, d0
 8003d64:	2d00      	cmp	r5, #0
 8003d66:	460e      	mov	r6, r1
 8003d68:	4619      	mov	r1, r3
 8003d6a:	462b      	mov	r3, r5
 8003d6c:	bfbb      	ittet	lt
 8003d6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003d72:	461d      	movlt	r5, r3
 8003d74:	2300      	movge	r3, #0
 8003d76:	232d      	movlt	r3, #45	; 0x2d
 8003d78:	700b      	strb	r3, [r1, #0]
 8003d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003d80:	4691      	mov	r9, r2
 8003d82:	f023 0820 	bic.w	r8, r3, #32
 8003d86:	bfbc      	itt	lt
 8003d88:	4622      	movlt	r2, r4
 8003d8a:	4614      	movlt	r4, r2
 8003d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d90:	d005      	beq.n	8003d9e <__cvt+0x42>
 8003d92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003d96:	d100      	bne.n	8003d9a <__cvt+0x3e>
 8003d98:	3601      	adds	r6, #1
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	e000      	b.n	8003da0 <__cvt+0x44>
 8003d9e:	2103      	movs	r1, #3
 8003da0:	ab03      	add	r3, sp, #12
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	ab02      	add	r3, sp, #8
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	ec45 4b10 	vmov	d0, r4, r5
 8003dac:	4653      	mov	r3, sl
 8003dae:	4632      	mov	r2, r6
 8003db0:	f000 fcea 	bl	8004788 <_dtoa_r>
 8003db4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003db8:	4607      	mov	r7, r0
 8003dba:	d102      	bne.n	8003dc2 <__cvt+0x66>
 8003dbc:	f019 0f01 	tst.w	r9, #1
 8003dc0:	d022      	beq.n	8003e08 <__cvt+0xac>
 8003dc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dc6:	eb07 0906 	add.w	r9, r7, r6
 8003dca:	d110      	bne.n	8003dee <__cvt+0x92>
 8003dcc:	783b      	ldrb	r3, [r7, #0]
 8003dce:	2b30      	cmp	r3, #48	; 0x30
 8003dd0:	d10a      	bne.n	8003de8 <__cvt+0x8c>
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	4629      	mov	r1, r5
 8003dda:	f7fc fe75 	bl	8000ac8 <__aeabi_dcmpeq>
 8003dde:	b918      	cbnz	r0, 8003de8 <__cvt+0x8c>
 8003de0:	f1c6 0601 	rsb	r6, r6, #1
 8003de4:	f8ca 6000 	str.w	r6, [sl]
 8003de8:	f8da 3000 	ldr.w	r3, [sl]
 8003dec:	4499      	add	r9, r3
 8003dee:	2200      	movs	r2, #0
 8003df0:	2300      	movs	r3, #0
 8003df2:	4620      	mov	r0, r4
 8003df4:	4629      	mov	r1, r5
 8003df6:	f7fc fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 8003dfa:	b108      	cbz	r0, 8003e00 <__cvt+0xa4>
 8003dfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e00:	2230      	movs	r2, #48	; 0x30
 8003e02:	9b03      	ldr	r3, [sp, #12]
 8003e04:	454b      	cmp	r3, r9
 8003e06:	d307      	bcc.n	8003e18 <__cvt+0xbc>
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e0c:	1bdb      	subs	r3, r3, r7
 8003e0e:	4638      	mov	r0, r7
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	b004      	add	sp, #16
 8003e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e18:	1c59      	adds	r1, r3, #1
 8003e1a:	9103      	str	r1, [sp, #12]
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e7f0      	b.n	8003e02 <__cvt+0xa6>

08003e20 <__exponent>:
 8003e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e22:	4603      	mov	r3, r0
 8003e24:	2900      	cmp	r1, #0
 8003e26:	bfb8      	it	lt
 8003e28:	4249      	neglt	r1, r1
 8003e2a:	f803 2b02 	strb.w	r2, [r3], #2
 8003e2e:	bfb4      	ite	lt
 8003e30:	222d      	movlt	r2, #45	; 0x2d
 8003e32:	222b      	movge	r2, #43	; 0x2b
 8003e34:	2909      	cmp	r1, #9
 8003e36:	7042      	strb	r2, [r0, #1]
 8003e38:	dd2a      	ble.n	8003e90 <__exponent+0x70>
 8003e3a:	f10d 0407 	add.w	r4, sp, #7
 8003e3e:	46a4      	mov	ip, r4
 8003e40:	270a      	movs	r7, #10
 8003e42:	46a6      	mov	lr, r4
 8003e44:	460a      	mov	r2, r1
 8003e46:	fb91 f6f7 	sdiv	r6, r1, r7
 8003e4a:	fb07 1516 	mls	r5, r7, r6, r1
 8003e4e:	3530      	adds	r5, #48	; 0x30
 8003e50:	2a63      	cmp	r2, #99	; 0x63
 8003e52:	f104 34ff 	add.w	r4, r4, #4294967295
 8003e56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	dcf1      	bgt.n	8003e42 <__exponent+0x22>
 8003e5e:	3130      	adds	r1, #48	; 0x30
 8003e60:	f1ae 0502 	sub.w	r5, lr, #2
 8003e64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003e68:	1c44      	adds	r4, r0, #1
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4561      	cmp	r1, ip
 8003e6e:	d30a      	bcc.n	8003e86 <__exponent+0x66>
 8003e70:	f10d 0209 	add.w	r2, sp, #9
 8003e74:	eba2 020e 	sub.w	r2, r2, lr
 8003e78:	4565      	cmp	r5, ip
 8003e7a:	bf88      	it	hi
 8003e7c:	2200      	movhi	r2, #0
 8003e7e:	4413      	add	r3, r2
 8003e80:	1a18      	subs	r0, r3, r0
 8003e82:	b003      	add	sp, #12
 8003e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003e8e:	e7ed      	b.n	8003e6c <__exponent+0x4c>
 8003e90:	2330      	movs	r3, #48	; 0x30
 8003e92:	3130      	adds	r1, #48	; 0x30
 8003e94:	7083      	strb	r3, [r0, #2]
 8003e96:	70c1      	strb	r1, [r0, #3]
 8003e98:	1d03      	adds	r3, r0, #4
 8003e9a:	e7f1      	b.n	8003e80 <__exponent+0x60>

08003e9c <_printf_float>:
 8003e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea0:	ed2d 8b02 	vpush	{d8}
 8003ea4:	b08d      	sub	sp, #52	; 0x34
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003eac:	4616      	mov	r6, r2
 8003eae:	461f      	mov	r7, r3
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	f001 fa55 	bl	8005360 <_localeconv_r>
 8003eb6:	f8d0 a000 	ldr.w	sl, [r0]
 8003eba:	4650      	mov	r0, sl
 8003ebc:	f7fc f988 	bl	80001d0 <strlen>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	9305      	str	r3, [sp, #20]
 8003ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8003ecc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003ed0:	3307      	adds	r3, #7
 8003ed2:	f023 0307 	bic.w	r3, r3, #7
 8003ed6:	f103 0208 	add.w	r2, r3, #8
 8003eda:	f8c8 2000 	str.w	r2, [r8]
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ee6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003eea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003eee:	9307      	str	r3, [sp, #28]
 8003ef0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ef4:	ee08 0a10 	vmov	s16, r0
 8003ef8:	4b9f      	ldr	r3, [pc, #636]	; (8004178 <_printf_float+0x2dc>)
 8003efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003efe:	f04f 32ff 	mov.w	r2, #4294967295
 8003f02:	f7fc fe13 	bl	8000b2c <__aeabi_dcmpun>
 8003f06:	bb88      	cbnz	r0, 8003f6c <_printf_float+0xd0>
 8003f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f0c:	4b9a      	ldr	r3, [pc, #616]	; (8004178 <_printf_float+0x2dc>)
 8003f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f12:	f7fc fded 	bl	8000af0 <__aeabi_dcmple>
 8003f16:	bb48      	cbnz	r0, 8003f6c <_printf_float+0xd0>
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	4640      	mov	r0, r8
 8003f1e:	4649      	mov	r1, r9
 8003f20:	f7fc fddc 	bl	8000adc <__aeabi_dcmplt>
 8003f24:	b110      	cbz	r0, 8003f2c <_printf_float+0x90>
 8003f26:	232d      	movs	r3, #45	; 0x2d
 8003f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f2c:	4b93      	ldr	r3, [pc, #588]	; (800417c <_printf_float+0x2e0>)
 8003f2e:	4894      	ldr	r0, [pc, #592]	; (8004180 <_printf_float+0x2e4>)
 8003f30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003f34:	bf94      	ite	ls
 8003f36:	4698      	movls	r8, r3
 8003f38:	4680      	movhi	r8, r0
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	6123      	str	r3, [r4, #16]
 8003f3e:	9b05      	ldr	r3, [sp, #20]
 8003f40:	f023 0204 	bic.w	r2, r3, #4
 8003f44:	6022      	str	r2, [r4, #0]
 8003f46:	f04f 0900 	mov.w	r9, #0
 8003f4a:	9700      	str	r7, [sp, #0]
 8003f4c:	4633      	mov	r3, r6
 8003f4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f50:	4621      	mov	r1, r4
 8003f52:	4628      	mov	r0, r5
 8003f54:	f000 f9d8 	bl	8004308 <_printf_common>
 8003f58:	3001      	adds	r0, #1
 8003f5a:	f040 8090 	bne.w	800407e <_printf_float+0x1e2>
 8003f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f62:	b00d      	add	sp, #52	; 0x34
 8003f64:	ecbd 8b02 	vpop	{d8}
 8003f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6c:	4642      	mov	r2, r8
 8003f6e:	464b      	mov	r3, r9
 8003f70:	4640      	mov	r0, r8
 8003f72:	4649      	mov	r1, r9
 8003f74:	f7fc fdda 	bl	8000b2c <__aeabi_dcmpun>
 8003f78:	b140      	cbz	r0, 8003f8c <_printf_float+0xf0>
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bfbc      	itt	lt
 8003f80:	232d      	movlt	r3, #45	; 0x2d
 8003f82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003f86:	487f      	ldr	r0, [pc, #508]	; (8004184 <_printf_float+0x2e8>)
 8003f88:	4b7f      	ldr	r3, [pc, #508]	; (8004188 <_printf_float+0x2ec>)
 8003f8a:	e7d1      	b.n	8003f30 <_printf_float+0x94>
 8003f8c:	6863      	ldr	r3, [r4, #4]
 8003f8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003f92:	9206      	str	r2, [sp, #24]
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	d13f      	bne.n	8004018 <_printf_float+0x17c>
 8003f98:	2306      	movs	r3, #6
 8003f9a:	6063      	str	r3, [r4, #4]
 8003f9c:	9b05      	ldr	r3, [sp, #20]
 8003f9e:	6861      	ldr	r1, [r4, #4]
 8003fa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9303      	str	r3, [sp, #12]
 8003fa8:	ab0a      	add	r3, sp, #40	; 0x28
 8003faa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003fae:	ab09      	add	r3, sp, #36	; 0x24
 8003fb0:	ec49 8b10 	vmov	d0, r8, r9
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	6022      	str	r2, [r4, #0]
 8003fb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	f7ff fecd 	bl	8003d5c <__cvt>
 8003fc2:	9b06      	ldr	r3, [sp, #24]
 8003fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fc6:	2b47      	cmp	r3, #71	; 0x47
 8003fc8:	4680      	mov	r8, r0
 8003fca:	d108      	bne.n	8003fde <_printf_float+0x142>
 8003fcc:	1cc8      	adds	r0, r1, #3
 8003fce:	db02      	blt.n	8003fd6 <_printf_float+0x13a>
 8003fd0:	6863      	ldr	r3, [r4, #4]
 8003fd2:	4299      	cmp	r1, r3
 8003fd4:	dd41      	ble.n	800405a <_printf_float+0x1be>
 8003fd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8003fda:	fa5f fb8b 	uxtb.w	fp, fp
 8003fde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003fe2:	d820      	bhi.n	8004026 <_printf_float+0x18a>
 8003fe4:	3901      	subs	r1, #1
 8003fe6:	465a      	mov	r2, fp
 8003fe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003fec:	9109      	str	r1, [sp, #36]	; 0x24
 8003fee:	f7ff ff17 	bl	8003e20 <__exponent>
 8003ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ff4:	1813      	adds	r3, r2, r0
 8003ff6:	2a01      	cmp	r2, #1
 8003ff8:	4681      	mov	r9, r0
 8003ffa:	6123      	str	r3, [r4, #16]
 8003ffc:	dc02      	bgt.n	8004004 <_printf_float+0x168>
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	07d2      	lsls	r2, r2, #31
 8004002:	d501      	bpl.n	8004008 <_printf_float+0x16c>
 8004004:	3301      	adds	r3, #1
 8004006:	6123      	str	r3, [r4, #16]
 8004008:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800400c:	2b00      	cmp	r3, #0
 800400e:	d09c      	beq.n	8003f4a <_printf_float+0xae>
 8004010:	232d      	movs	r3, #45	; 0x2d
 8004012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004016:	e798      	b.n	8003f4a <_printf_float+0xae>
 8004018:	9a06      	ldr	r2, [sp, #24]
 800401a:	2a47      	cmp	r2, #71	; 0x47
 800401c:	d1be      	bne.n	8003f9c <_printf_float+0x100>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1bc      	bne.n	8003f9c <_printf_float+0x100>
 8004022:	2301      	movs	r3, #1
 8004024:	e7b9      	b.n	8003f9a <_printf_float+0xfe>
 8004026:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800402a:	d118      	bne.n	800405e <_printf_float+0x1c2>
 800402c:	2900      	cmp	r1, #0
 800402e:	6863      	ldr	r3, [r4, #4]
 8004030:	dd0b      	ble.n	800404a <_printf_float+0x1ae>
 8004032:	6121      	str	r1, [r4, #16]
 8004034:	b913      	cbnz	r3, 800403c <_printf_float+0x1a0>
 8004036:	6822      	ldr	r2, [r4, #0]
 8004038:	07d0      	lsls	r0, r2, #31
 800403a:	d502      	bpl.n	8004042 <_printf_float+0x1a6>
 800403c:	3301      	adds	r3, #1
 800403e:	440b      	add	r3, r1
 8004040:	6123      	str	r3, [r4, #16]
 8004042:	65a1      	str	r1, [r4, #88]	; 0x58
 8004044:	f04f 0900 	mov.w	r9, #0
 8004048:	e7de      	b.n	8004008 <_printf_float+0x16c>
 800404a:	b913      	cbnz	r3, 8004052 <_printf_float+0x1b6>
 800404c:	6822      	ldr	r2, [r4, #0]
 800404e:	07d2      	lsls	r2, r2, #31
 8004050:	d501      	bpl.n	8004056 <_printf_float+0x1ba>
 8004052:	3302      	adds	r3, #2
 8004054:	e7f4      	b.n	8004040 <_printf_float+0x1a4>
 8004056:	2301      	movs	r3, #1
 8004058:	e7f2      	b.n	8004040 <_printf_float+0x1a4>
 800405a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800405e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004060:	4299      	cmp	r1, r3
 8004062:	db05      	blt.n	8004070 <_printf_float+0x1d4>
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	6121      	str	r1, [r4, #16]
 8004068:	07d8      	lsls	r0, r3, #31
 800406a:	d5ea      	bpl.n	8004042 <_printf_float+0x1a6>
 800406c:	1c4b      	adds	r3, r1, #1
 800406e:	e7e7      	b.n	8004040 <_printf_float+0x1a4>
 8004070:	2900      	cmp	r1, #0
 8004072:	bfd4      	ite	le
 8004074:	f1c1 0202 	rsble	r2, r1, #2
 8004078:	2201      	movgt	r2, #1
 800407a:	4413      	add	r3, r2
 800407c:	e7e0      	b.n	8004040 <_printf_float+0x1a4>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	055a      	lsls	r2, r3, #21
 8004082:	d407      	bmi.n	8004094 <_printf_float+0x1f8>
 8004084:	6923      	ldr	r3, [r4, #16]
 8004086:	4642      	mov	r2, r8
 8004088:	4631      	mov	r1, r6
 800408a:	4628      	mov	r0, r5
 800408c:	47b8      	blx	r7
 800408e:	3001      	adds	r0, #1
 8004090:	d12c      	bne.n	80040ec <_printf_float+0x250>
 8004092:	e764      	b.n	8003f5e <_printf_float+0xc2>
 8004094:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004098:	f240 80e0 	bls.w	800425c <_printf_float+0x3c0>
 800409c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040a0:	2200      	movs	r2, #0
 80040a2:	2300      	movs	r3, #0
 80040a4:	f7fc fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 80040a8:	2800      	cmp	r0, #0
 80040aa:	d034      	beq.n	8004116 <_printf_float+0x27a>
 80040ac:	4a37      	ldr	r2, [pc, #220]	; (800418c <_printf_float+0x2f0>)
 80040ae:	2301      	movs	r3, #1
 80040b0:	4631      	mov	r1, r6
 80040b2:	4628      	mov	r0, r5
 80040b4:	47b8      	blx	r7
 80040b6:	3001      	adds	r0, #1
 80040b8:	f43f af51 	beq.w	8003f5e <_printf_float+0xc2>
 80040bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040c0:	429a      	cmp	r2, r3
 80040c2:	db02      	blt.n	80040ca <_printf_float+0x22e>
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	07d8      	lsls	r0, r3, #31
 80040c8:	d510      	bpl.n	80040ec <_printf_float+0x250>
 80040ca:	ee18 3a10 	vmov	r3, s16
 80040ce:	4652      	mov	r2, sl
 80040d0:	4631      	mov	r1, r6
 80040d2:	4628      	mov	r0, r5
 80040d4:	47b8      	blx	r7
 80040d6:	3001      	adds	r0, #1
 80040d8:	f43f af41 	beq.w	8003f5e <_printf_float+0xc2>
 80040dc:	f04f 0800 	mov.w	r8, #0
 80040e0:	f104 091a 	add.w	r9, r4, #26
 80040e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040e6:	3b01      	subs	r3, #1
 80040e8:	4543      	cmp	r3, r8
 80040ea:	dc09      	bgt.n	8004100 <_printf_float+0x264>
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	079b      	lsls	r3, r3, #30
 80040f0:	f100 8105 	bmi.w	80042fe <_printf_float+0x462>
 80040f4:	68e0      	ldr	r0, [r4, #12]
 80040f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040f8:	4298      	cmp	r0, r3
 80040fa:	bfb8      	it	lt
 80040fc:	4618      	movlt	r0, r3
 80040fe:	e730      	b.n	8003f62 <_printf_float+0xc6>
 8004100:	2301      	movs	r3, #1
 8004102:	464a      	mov	r2, r9
 8004104:	4631      	mov	r1, r6
 8004106:	4628      	mov	r0, r5
 8004108:	47b8      	blx	r7
 800410a:	3001      	adds	r0, #1
 800410c:	f43f af27 	beq.w	8003f5e <_printf_float+0xc2>
 8004110:	f108 0801 	add.w	r8, r8, #1
 8004114:	e7e6      	b.n	80040e4 <_printf_float+0x248>
 8004116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	dc39      	bgt.n	8004190 <_printf_float+0x2f4>
 800411c:	4a1b      	ldr	r2, [pc, #108]	; (800418c <_printf_float+0x2f0>)
 800411e:	2301      	movs	r3, #1
 8004120:	4631      	mov	r1, r6
 8004122:	4628      	mov	r0, r5
 8004124:	47b8      	blx	r7
 8004126:	3001      	adds	r0, #1
 8004128:	f43f af19 	beq.w	8003f5e <_printf_float+0xc2>
 800412c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004130:	4313      	orrs	r3, r2
 8004132:	d102      	bne.n	800413a <_printf_float+0x29e>
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	07d9      	lsls	r1, r3, #31
 8004138:	d5d8      	bpl.n	80040ec <_printf_float+0x250>
 800413a:	ee18 3a10 	vmov	r3, s16
 800413e:	4652      	mov	r2, sl
 8004140:	4631      	mov	r1, r6
 8004142:	4628      	mov	r0, r5
 8004144:	47b8      	blx	r7
 8004146:	3001      	adds	r0, #1
 8004148:	f43f af09 	beq.w	8003f5e <_printf_float+0xc2>
 800414c:	f04f 0900 	mov.w	r9, #0
 8004150:	f104 0a1a 	add.w	sl, r4, #26
 8004154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004156:	425b      	negs	r3, r3
 8004158:	454b      	cmp	r3, r9
 800415a:	dc01      	bgt.n	8004160 <_printf_float+0x2c4>
 800415c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800415e:	e792      	b.n	8004086 <_printf_float+0x1ea>
 8004160:	2301      	movs	r3, #1
 8004162:	4652      	mov	r2, sl
 8004164:	4631      	mov	r1, r6
 8004166:	4628      	mov	r0, r5
 8004168:	47b8      	blx	r7
 800416a:	3001      	adds	r0, #1
 800416c:	f43f aef7 	beq.w	8003f5e <_printf_float+0xc2>
 8004170:	f109 0901 	add.w	r9, r9, #1
 8004174:	e7ee      	b.n	8004154 <_printf_float+0x2b8>
 8004176:	bf00      	nop
 8004178:	7fefffff 	.word	0x7fefffff
 800417c:	08006f5c 	.word	0x08006f5c
 8004180:	08006f60 	.word	0x08006f60
 8004184:	08006f68 	.word	0x08006f68
 8004188:	08006f64 	.word	0x08006f64
 800418c:	08006f6c 	.word	0x08006f6c
 8004190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004194:	429a      	cmp	r2, r3
 8004196:	bfa8      	it	ge
 8004198:	461a      	movge	r2, r3
 800419a:	2a00      	cmp	r2, #0
 800419c:	4691      	mov	r9, r2
 800419e:	dc37      	bgt.n	8004210 <_printf_float+0x374>
 80041a0:	f04f 0b00 	mov.w	fp, #0
 80041a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041a8:	f104 021a 	add.w	r2, r4, #26
 80041ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041ae:	9305      	str	r3, [sp, #20]
 80041b0:	eba3 0309 	sub.w	r3, r3, r9
 80041b4:	455b      	cmp	r3, fp
 80041b6:	dc33      	bgt.n	8004220 <_printf_float+0x384>
 80041b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041bc:	429a      	cmp	r2, r3
 80041be:	db3b      	blt.n	8004238 <_printf_float+0x39c>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	07da      	lsls	r2, r3, #31
 80041c4:	d438      	bmi.n	8004238 <_printf_float+0x39c>
 80041c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041c8:	9b05      	ldr	r3, [sp, #20]
 80041ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	eba2 0901 	sub.w	r9, r2, r1
 80041d2:	4599      	cmp	r9, r3
 80041d4:	bfa8      	it	ge
 80041d6:	4699      	movge	r9, r3
 80041d8:	f1b9 0f00 	cmp.w	r9, #0
 80041dc:	dc35      	bgt.n	800424a <_printf_float+0x3ae>
 80041de:	f04f 0800 	mov.w	r8, #0
 80041e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041e6:	f104 0a1a 	add.w	sl, r4, #26
 80041ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	eba3 0309 	sub.w	r3, r3, r9
 80041f4:	4543      	cmp	r3, r8
 80041f6:	f77f af79 	ble.w	80040ec <_printf_float+0x250>
 80041fa:	2301      	movs	r3, #1
 80041fc:	4652      	mov	r2, sl
 80041fe:	4631      	mov	r1, r6
 8004200:	4628      	mov	r0, r5
 8004202:	47b8      	blx	r7
 8004204:	3001      	adds	r0, #1
 8004206:	f43f aeaa 	beq.w	8003f5e <_printf_float+0xc2>
 800420a:	f108 0801 	add.w	r8, r8, #1
 800420e:	e7ec      	b.n	80041ea <_printf_float+0x34e>
 8004210:	4613      	mov	r3, r2
 8004212:	4631      	mov	r1, r6
 8004214:	4642      	mov	r2, r8
 8004216:	4628      	mov	r0, r5
 8004218:	47b8      	blx	r7
 800421a:	3001      	adds	r0, #1
 800421c:	d1c0      	bne.n	80041a0 <_printf_float+0x304>
 800421e:	e69e      	b.n	8003f5e <_printf_float+0xc2>
 8004220:	2301      	movs	r3, #1
 8004222:	4631      	mov	r1, r6
 8004224:	4628      	mov	r0, r5
 8004226:	9205      	str	r2, [sp, #20]
 8004228:	47b8      	blx	r7
 800422a:	3001      	adds	r0, #1
 800422c:	f43f ae97 	beq.w	8003f5e <_printf_float+0xc2>
 8004230:	9a05      	ldr	r2, [sp, #20]
 8004232:	f10b 0b01 	add.w	fp, fp, #1
 8004236:	e7b9      	b.n	80041ac <_printf_float+0x310>
 8004238:	ee18 3a10 	vmov	r3, s16
 800423c:	4652      	mov	r2, sl
 800423e:	4631      	mov	r1, r6
 8004240:	4628      	mov	r0, r5
 8004242:	47b8      	blx	r7
 8004244:	3001      	adds	r0, #1
 8004246:	d1be      	bne.n	80041c6 <_printf_float+0x32a>
 8004248:	e689      	b.n	8003f5e <_printf_float+0xc2>
 800424a:	9a05      	ldr	r2, [sp, #20]
 800424c:	464b      	mov	r3, r9
 800424e:	4442      	add	r2, r8
 8004250:	4631      	mov	r1, r6
 8004252:	4628      	mov	r0, r5
 8004254:	47b8      	blx	r7
 8004256:	3001      	adds	r0, #1
 8004258:	d1c1      	bne.n	80041de <_printf_float+0x342>
 800425a:	e680      	b.n	8003f5e <_printf_float+0xc2>
 800425c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800425e:	2a01      	cmp	r2, #1
 8004260:	dc01      	bgt.n	8004266 <_printf_float+0x3ca>
 8004262:	07db      	lsls	r3, r3, #31
 8004264:	d538      	bpl.n	80042d8 <_printf_float+0x43c>
 8004266:	2301      	movs	r3, #1
 8004268:	4642      	mov	r2, r8
 800426a:	4631      	mov	r1, r6
 800426c:	4628      	mov	r0, r5
 800426e:	47b8      	blx	r7
 8004270:	3001      	adds	r0, #1
 8004272:	f43f ae74 	beq.w	8003f5e <_printf_float+0xc2>
 8004276:	ee18 3a10 	vmov	r3, s16
 800427a:	4652      	mov	r2, sl
 800427c:	4631      	mov	r1, r6
 800427e:	4628      	mov	r0, r5
 8004280:	47b8      	blx	r7
 8004282:	3001      	adds	r0, #1
 8004284:	f43f ae6b 	beq.w	8003f5e <_printf_float+0xc2>
 8004288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800428c:	2200      	movs	r2, #0
 800428e:	2300      	movs	r3, #0
 8004290:	f7fc fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004294:	b9d8      	cbnz	r0, 80042ce <_printf_float+0x432>
 8004296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004298:	f108 0201 	add.w	r2, r8, #1
 800429c:	3b01      	subs	r3, #1
 800429e:	4631      	mov	r1, r6
 80042a0:	4628      	mov	r0, r5
 80042a2:	47b8      	blx	r7
 80042a4:	3001      	adds	r0, #1
 80042a6:	d10e      	bne.n	80042c6 <_printf_float+0x42a>
 80042a8:	e659      	b.n	8003f5e <_printf_float+0xc2>
 80042aa:	2301      	movs	r3, #1
 80042ac:	4652      	mov	r2, sl
 80042ae:	4631      	mov	r1, r6
 80042b0:	4628      	mov	r0, r5
 80042b2:	47b8      	blx	r7
 80042b4:	3001      	adds	r0, #1
 80042b6:	f43f ae52 	beq.w	8003f5e <_printf_float+0xc2>
 80042ba:	f108 0801 	add.w	r8, r8, #1
 80042be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042c0:	3b01      	subs	r3, #1
 80042c2:	4543      	cmp	r3, r8
 80042c4:	dcf1      	bgt.n	80042aa <_printf_float+0x40e>
 80042c6:	464b      	mov	r3, r9
 80042c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042cc:	e6dc      	b.n	8004088 <_printf_float+0x1ec>
 80042ce:	f04f 0800 	mov.w	r8, #0
 80042d2:	f104 0a1a 	add.w	sl, r4, #26
 80042d6:	e7f2      	b.n	80042be <_printf_float+0x422>
 80042d8:	2301      	movs	r3, #1
 80042da:	4642      	mov	r2, r8
 80042dc:	e7df      	b.n	800429e <_printf_float+0x402>
 80042de:	2301      	movs	r3, #1
 80042e0:	464a      	mov	r2, r9
 80042e2:	4631      	mov	r1, r6
 80042e4:	4628      	mov	r0, r5
 80042e6:	47b8      	blx	r7
 80042e8:	3001      	adds	r0, #1
 80042ea:	f43f ae38 	beq.w	8003f5e <_printf_float+0xc2>
 80042ee:	f108 0801 	add.w	r8, r8, #1
 80042f2:	68e3      	ldr	r3, [r4, #12]
 80042f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042f6:	1a5b      	subs	r3, r3, r1
 80042f8:	4543      	cmp	r3, r8
 80042fa:	dcf0      	bgt.n	80042de <_printf_float+0x442>
 80042fc:	e6fa      	b.n	80040f4 <_printf_float+0x258>
 80042fe:	f04f 0800 	mov.w	r8, #0
 8004302:	f104 0919 	add.w	r9, r4, #25
 8004306:	e7f4      	b.n	80042f2 <_printf_float+0x456>

08004308 <_printf_common>:
 8004308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800430c:	4616      	mov	r6, r2
 800430e:	4699      	mov	r9, r3
 8004310:	688a      	ldr	r2, [r1, #8]
 8004312:	690b      	ldr	r3, [r1, #16]
 8004314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004318:	4293      	cmp	r3, r2
 800431a:	bfb8      	it	lt
 800431c:	4613      	movlt	r3, r2
 800431e:	6033      	str	r3, [r6, #0]
 8004320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004324:	4607      	mov	r7, r0
 8004326:	460c      	mov	r4, r1
 8004328:	b10a      	cbz	r2, 800432e <_printf_common+0x26>
 800432a:	3301      	adds	r3, #1
 800432c:	6033      	str	r3, [r6, #0]
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	0699      	lsls	r1, r3, #26
 8004332:	bf42      	ittt	mi
 8004334:	6833      	ldrmi	r3, [r6, #0]
 8004336:	3302      	addmi	r3, #2
 8004338:	6033      	strmi	r3, [r6, #0]
 800433a:	6825      	ldr	r5, [r4, #0]
 800433c:	f015 0506 	ands.w	r5, r5, #6
 8004340:	d106      	bne.n	8004350 <_printf_common+0x48>
 8004342:	f104 0a19 	add.w	sl, r4, #25
 8004346:	68e3      	ldr	r3, [r4, #12]
 8004348:	6832      	ldr	r2, [r6, #0]
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	42ab      	cmp	r3, r5
 800434e:	dc26      	bgt.n	800439e <_printf_common+0x96>
 8004350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004354:	1e13      	subs	r3, r2, #0
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	bf18      	it	ne
 800435a:	2301      	movne	r3, #1
 800435c:	0692      	lsls	r2, r2, #26
 800435e:	d42b      	bmi.n	80043b8 <_printf_common+0xb0>
 8004360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004364:	4649      	mov	r1, r9
 8004366:	4638      	mov	r0, r7
 8004368:	47c0      	blx	r8
 800436a:	3001      	adds	r0, #1
 800436c:	d01e      	beq.n	80043ac <_printf_common+0xa4>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	68e5      	ldr	r5, [r4, #12]
 8004372:	6832      	ldr	r2, [r6, #0]
 8004374:	f003 0306 	and.w	r3, r3, #6
 8004378:	2b04      	cmp	r3, #4
 800437a:	bf08      	it	eq
 800437c:	1aad      	subeq	r5, r5, r2
 800437e:	68a3      	ldr	r3, [r4, #8]
 8004380:	6922      	ldr	r2, [r4, #16]
 8004382:	bf0c      	ite	eq
 8004384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004388:	2500      	movne	r5, #0
 800438a:	4293      	cmp	r3, r2
 800438c:	bfc4      	itt	gt
 800438e:	1a9b      	subgt	r3, r3, r2
 8004390:	18ed      	addgt	r5, r5, r3
 8004392:	2600      	movs	r6, #0
 8004394:	341a      	adds	r4, #26
 8004396:	42b5      	cmp	r5, r6
 8004398:	d11a      	bne.n	80043d0 <_printf_common+0xc8>
 800439a:	2000      	movs	r0, #0
 800439c:	e008      	b.n	80043b0 <_printf_common+0xa8>
 800439e:	2301      	movs	r3, #1
 80043a0:	4652      	mov	r2, sl
 80043a2:	4649      	mov	r1, r9
 80043a4:	4638      	mov	r0, r7
 80043a6:	47c0      	blx	r8
 80043a8:	3001      	adds	r0, #1
 80043aa:	d103      	bne.n	80043b4 <_printf_common+0xac>
 80043ac:	f04f 30ff 	mov.w	r0, #4294967295
 80043b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b4:	3501      	adds	r5, #1
 80043b6:	e7c6      	b.n	8004346 <_printf_common+0x3e>
 80043b8:	18e1      	adds	r1, r4, r3
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	2030      	movs	r0, #48	; 0x30
 80043be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043c2:	4422      	add	r2, r4
 80043c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043cc:	3302      	adds	r3, #2
 80043ce:	e7c7      	b.n	8004360 <_printf_common+0x58>
 80043d0:	2301      	movs	r3, #1
 80043d2:	4622      	mov	r2, r4
 80043d4:	4649      	mov	r1, r9
 80043d6:	4638      	mov	r0, r7
 80043d8:	47c0      	blx	r8
 80043da:	3001      	adds	r0, #1
 80043dc:	d0e6      	beq.n	80043ac <_printf_common+0xa4>
 80043de:	3601      	adds	r6, #1
 80043e0:	e7d9      	b.n	8004396 <_printf_common+0x8e>
	...

080043e4 <_printf_i>:
 80043e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043e8:	460c      	mov	r4, r1
 80043ea:	4691      	mov	r9, r2
 80043ec:	7e27      	ldrb	r7, [r4, #24]
 80043ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043f0:	2f78      	cmp	r7, #120	; 0x78
 80043f2:	4680      	mov	r8, r0
 80043f4:	469a      	mov	sl, r3
 80043f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043fa:	d807      	bhi.n	800440c <_printf_i+0x28>
 80043fc:	2f62      	cmp	r7, #98	; 0x62
 80043fe:	d80a      	bhi.n	8004416 <_printf_i+0x32>
 8004400:	2f00      	cmp	r7, #0
 8004402:	f000 80d8 	beq.w	80045b6 <_printf_i+0x1d2>
 8004406:	2f58      	cmp	r7, #88	; 0x58
 8004408:	f000 80a3 	beq.w	8004552 <_printf_i+0x16e>
 800440c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004414:	e03a      	b.n	800448c <_printf_i+0xa8>
 8004416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800441a:	2b15      	cmp	r3, #21
 800441c:	d8f6      	bhi.n	800440c <_printf_i+0x28>
 800441e:	a001      	add	r0, pc, #4	; (adr r0, 8004424 <_printf_i+0x40>)
 8004420:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004424:	0800447d 	.word	0x0800447d
 8004428:	08004491 	.word	0x08004491
 800442c:	0800440d 	.word	0x0800440d
 8004430:	0800440d 	.word	0x0800440d
 8004434:	0800440d 	.word	0x0800440d
 8004438:	0800440d 	.word	0x0800440d
 800443c:	08004491 	.word	0x08004491
 8004440:	0800440d 	.word	0x0800440d
 8004444:	0800440d 	.word	0x0800440d
 8004448:	0800440d 	.word	0x0800440d
 800444c:	0800440d 	.word	0x0800440d
 8004450:	0800459d 	.word	0x0800459d
 8004454:	080044c1 	.word	0x080044c1
 8004458:	0800457f 	.word	0x0800457f
 800445c:	0800440d 	.word	0x0800440d
 8004460:	0800440d 	.word	0x0800440d
 8004464:	080045bf 	.word	0x080045bf
 8004468:	0800440d 	.word	0x0800440d
 800446c:	080044c1 	.word	0x080044c1
 8004470:	0800440d 	.word	0x0800440d
 8004474:	0800440d 	.word	0x0800440d
 8004478:	08004587 	.word	0x08004587
 800447c:	680b      	ldr	r3, [r1, #0]
 800447e:	1d1a      	adds	r2, r3, #4
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	600a      	str	r2, [r1, #0]
 8004484:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800448c:	2301      	movs	r3, #1
 800448e:	e0a3      	b.n	80045d8 <_printf_i+0x1f4>
 8004490:	6825      	ldr	r5, [r4, #0]
 8004492:	6808      	ldr	r0, [r1, #0]
 8004494:	062e      	lsls	r6, r5, #24
 8004496:	f100 0304 	add.w	r3, r0, #4
 800449a:	d50a      	bpl.n	80044b2 <_printf_i+0xce>
 800449c:	6805      	ldr	r5, [r0, #0]
 800449e:	600b      	str	r3, [r1, #0]
 80044a0:	2d00      	cmp	r5, #0
 80044a2:	da03      	bge.n	80044ac <_printf_i+0xc8>
 80044a4:	232d      	movs	r3, #45	; 0x2d
 80044a6:	426d      	negs	r5, r5
 80044a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ac:	485e      	ldr	r0, [pc, #376]	; (8004628 <_printf_i+0x244>)
 80044ae:	230a      	movs	r3, #10
 80044b0:	e019      	b.n	80044e6 <_printf_i+0x102>
 80044b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80044b6:	6805      	ldr	r5, [r0, #0]
 80044b8:	600b      	str	r3, [r1, #0]
 80044ba:	bf18      	it	ne
 80044bc:	b22d      	sxthne	r5, r5
 80044be:	e7ef      	b.n	80044a0 <_printf_i+0xbc>
 80044c0:	680b      	ldr	r3, [r1, #0]
 80044c2:	6825      	ldr	r5, [r4, #0]
 80044c4:	1d18      	adds	r0, r3, #4
 80044c6:	6008      	str	r0, [r1, #0]
 80044c8:	0628      	lsls	r0, r5, #24
 80044ca:	d501      	bpl.n	80044d0 <_printf_i+0xec>
 80044cc:	681d      	ldr	r5, [r3, #0]
 80044ce:	e002      	b.n	80044d6 <_printf_i+0xf2>
 80044d0:	0669      	lsls	r1, r5, #25
 80044d2:	d5fb      	bpl.n	80044cc <_printf_i+0xe8>
 80044d4:	881d      	ldrh	r5, [r3, #0]
 80044d6:	4854      	ldr	r0, [pc, #336]	; (8004628 <_printf_i+0x244>)
 80044d8:	2f6f      	cmp	r7, #111	; 0x6f
 80044da:	bf0c      	ite	eq
 80044dc:	2308      	moveq	r3, #8
 80044de:	230a      	movne	r3, #10
 80044e0:	2100      	movs	r1, #0
 80044e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044e6:	6866      	ldr	r6, [r4, #4]
 80044e8:	60a6      	str	r6, [r4, #8]
 80044ea:	2e00      	cmp	r6, #0
 80044ec:	bfa2      	ittt	ge
 80044ee:	6821      	ldrge	r1, [r4, #0]
 80044f0:	f021 0104 	bicge.w	r1, r1, #4
 80044f4:	6021      	strge	r1, [r4, #0]
 80044f6:	b90d      	cbnz	r5, 80044fc <_printf_i+0x118>
 80044f8:	2e00      	cmp	r6, #0
 80044fa:	d04d      	beq.n	8004598 <_printf_i+0x1b4>
 80044fc:	4616      	mov	r6, r2
 80044fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004502:	fb03 5711 	mls	r7, r3, r1, r5
 8004506:	5dc7      	ldrb	r7, [r0, r7]
 8004508:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800450c:	462f      	mov	r7, r5
 800450e:	42bb      	cmp	r3, r7
 8004510:	460d      	mov	r5, r1
 8004512:	d9f4      	bls.n	80044fe <_printf_i+0x11a>
 8004514:	2b08      	cmp	r3, #8
 8004516:	d10b      	bne.n	8004530 <_printf_i+0x14c>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	07df      	lsls	r7, r3, #31
 800451c:	d508      	bpl.n	8004530 <_printf_i+0x14c>
 800451e:	6923      	ldr	r3, [r4, #16]
 8004520:	6861      	ldr	r1, [r4, #4]
 8004522:	4299      	cmp	r1, r3
 8004524:	bfde      	ittt	le
 8004526:	2330      	movle	r3, #48	; 0x30
 8004528:	f806 3c01 	strble.w	r3, [r6, #-1]
 800452c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004530:	1b92      	subs	r2, r2, r6
 8004532:	6122      	str	r2, [r4, #16]
 8004534:	f8cd a000 	str.w	sl, [sp]
 8004538:	464b      	mov	r3, r9
 800453a:	aa03      	add	r2, sp, #12
 800453c:	4621      	mov	r1, r4
 800453e:	4640      	mov	r0, r8
 8004540:	f7ff fee2 	bl	8004308 <_printf_common>
 8004544:	3001      	adds	r0, #1
 8004546:	d14c      	bne.n	80045e2 <_printf_i+0x1fe>
 8004548:	f04f 30ff 	mov.w	r0, #4294967295
 800454c:	b004      	add	sp, #16
 800454e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004552:	4835      	ldr	r0, [pc, #212]	; (8004628 <_printf_i+0x244>)
 8004554:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	680e      	ldr	r6, [r1, #0]
 800455c:	061f      	lsls	r7, r3, #24
 800455e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004562:	600e      	str	r6, [r1, #0]
 8004564:	d514      	bpl.n	8004590 <_printf_i+0x1ac>
 8004566:	07d9      	lsls	r1, r3, #31
 8004568:	bf44      	itt	mi
 800456a:	f043 0320 	orrmi.w	r3, r3, #32
 800456e:	6023      	strmi	r3, [r4, #0]
 8004570:	b91d      	cbnz	r5, 800457a <_printf_i+0x196>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	f023 0320 	bic.w	r3, r3, #32
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	2310      	movs	r3, #16
 800457c:	e7b0      	b.n	80044e0 <_printf_i+0xfc>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	f043 0320 	orr.w	r3, r3, #32
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	2378      	movs	r3, #120	; 0x78
 8004588:	4828      	ldr	r0, [pc, #160]	; (800462c <_printf_i+0x248>)
 800458a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800458e:	e7e3      	b.n	8004558 <_printf_i+0x174>
 8004590:	065e      	lsls	r6, r3, #25
 8004592:	bf48      	it	mi
 8004594:	b2ad      	uxthmi	r5, r5
 8004596:	e7e6      	b.n	8004566 <_printf_i+0x182>
 8004598:	4616      	mov	r6, r2
 800459a:	e7bb      	b.n	8004514 <_printf_i+0x130>
 800459c:	680b      	ldr	r3, [r1, #0]
 800459e:	6826      	ldr	r6, [r4, #0]
 80045a0:	6960      	ldr	r0, [r4, #20]
 80045a2:	1d1d      	adds	r5, r3, #4
 80045a4:	600d      	str	r5, [r1, #0]
 80045a6:	0635      	lsls	r5, r6, #24
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	d501      	bpl.n	80045b0 <_printf_i+0x1cc>
 80045ac:	6018      	str	r0, [r3, #0]
 80045ae:	e002      	b.n	80045b6 <_printf_i+0x1d2>
 80045b0:	0671      	lsls	r1, r6, #25
 80045b2:	d5fb      	bpl.n	80045ac <_printf_i+0x1c8>
 80045b4:	8018      	strh	r0, [r3, #0]
 80045b6:	2300      	movs	r3, #0
 80045b8:	6123      	str	r3, [r4, #16]
 80045ba:	4616      	mov	r6, r2
 80045bc:	e7ba      	b.n	8004534 <_printf_i+0x150>
 80045be:	680b      	ldr	r3, [r1, #0]
 80045c0:	1d1a      	adds	r2, r3, #4
 80045c2:	600a      	str	r2, [r1, #0]
 80045c4:	681e      	ldr	r6, [r3, #0]
 80045c6:	6862      	ldr	r2, [r4, #4]
 80045c8:	2100      	movs	r1, #0
 80045ca:	4630      	mov	r0, r6
 80045cc:	f7fb fe08 	bl	80001e0 <memchr>
 80045d0:	b108      	cbz	r0, 80045d6 <_printf_i+0x1f2>
 80045d2:	1b80      	subs	r0, r0, r6
 80045d4:	6060      	str	r0, [r4, #4]
 80045d6:	6863      	ldr	r3, [r4, #4]
 80045d8:	6123      	str	r3, [r4, #16]
 80045da:	2300      	movs	r3, #0
 80045dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e0:	e7a8      	b.n	8004534 <_printf_i+0x150>
 80045e2:	6923      	ldr	r3, [r4, #16]
 80045e4:	4632      	mov	r2, r6
 80045e6:	4649      	mov	r1, r9
 80045e8:	4640      	mov	r0, r8
 80045ea:	47d0      	blx	sl
 80045ec:	3001      	adds	r0, #1
 80045ee:	d0ab      	beq.n	8004548 <_printf_i+0x164>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	079b      	lsls	r3, r3, #30
 80045f4:	d413      	bmi.n	800461e <_printf_i+0x23a>
 80045f6:	68e0      	ldr	r0, [r4, #12]
 80045f8:	9b03      	ldr	r3, [sp, #12]
 80045fa:	4298      	cmp	r0, r3
 80045fc:	bfb8      	it	lt
 80045fe:	4618      	movlt	r0, r3
 8004600:	e7a4      	b.n	800454c <_printf_i+0x168>
 8004602:	2301      	movs	r3, #1
 8004604:	4632      	mov	r2, r6
 8004606:	4649      	mov	r1, r9
 8004608:	4640      	mov	r0, r8
 800460a:	47d0      	blx	sl
 800460c:	3001      	adds	r0, #1
 800460e:	d09b      	beq.n	8004548 <_printf_i+0x164>
 8004610:	3501      	adds	r5, #1
 8004612:	68e3      	ldr	r3, [r4, #12]
 8004614:	9903      	ldr	r1, [sp, #12]
 8004616:	1a5b      	subs	r3, r3, r1
 8004618:	42ab      	cmp	r3, r5
 800461a:	dcf2      	bgt.n	8004602 <_printf_i+0x21e>
 800461c:	e7eb      	b.n	80045f6 <_printf_i+0x212>
 800461e:	2500      	movs	r5, #0
 8004620:	f104 0619 	add.w	r6, r4, #25
 8004624:	e7f5      	b.n	8004612 <_printf_i+0x22e>
 8004626:	bf00      	nop
 8004628:	08006f6e 	.word	0x08006f6e
 800462c:	08006f7f 	.word	0x08006f7f

08004630 <siprintf>:
 8004630:	b40e      	push	{r1, r2, r3}
 8004632:	b500      	push	{lr}
 8004634:	b09c      	sub	sp, #112	; 0x70
 8004636:	ab1d      	add	r3, sp, #116	; 0x74
 8004638:	9002      	str	r0, [sp, #8]
 800463a:	9006      	str	r0, [sp, #24]
 800463c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004640:	4809      	ldr	r0, [pc, #36]	; (8004668 <siprintf+0x38>)
 8004642:	9107      	str	r1, [sp, #28]
 8004644:	9104      	str	r1, [sp, #16]
 8004646:	4909      	ldr	r1, [pc, #36]	; (800466c <siprintf+0x3c>)
 8004648:	f853 2b04 	ldr.w	r2, [r3], #4
 800464c:	9105      	str	r1, [sp, #20]
 800464e:	6800      	ldr	r0, [r0, #0]
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	a902      	add	r1, sp, #8
 8004654:	f001 fb32 	bl	8005cbc <_svfiprintf_r>
 8004658:	9b02      	ldr	r3, [sp, #8]
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	b01c      	add	sp, #112	; 0x70
 8004660:	f85d eb04 	ldr.w	lr, [sp], #4
 8004664:	b003      	add	sp, #12
 8004666:	4770      	bx	lr
 8004668:	20000050 	.word	0x20000050
 800466c:	ffff0208 	.word	0xffff0208

08004670 <quorem>:
 8004670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004674:	6903      	ldr	r3, [r0, #16]
 8004676:	690c      	ldr	r4, [r1, #16]
 8004678:	42a3      	cmp	r3, r4
 800467a:	4607      	mov	r7, r0
 800467c:	f2c0 8081 	blt.w	8004782 <quorem+0x112>
 8004680:	3c01      	subs	r4, #1
 8004682:	f101 0814 	add.w	r8, r1, #20
 8004686:	f100 0514 	add.w	r5, r0, #20
 800468a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800468e:	9301      	str	r3, [sp, #4]
 8004690:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004694:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004698:	3301      	adds	r3, #1
 800469a:	429a      	cmp	r2, r3
 800469c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80046a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80046a8:	d331      	bcc.n	800470e <quorem+0x9e>
 80046aa:	f04f 0e00 	mov.w	lr, #0
 80046ae:	4640      	mov	r0, r8
 80046b0:	46ac      	mov	ip, r5
 80046b2:	46f2      	mov	sl, lr
 80046b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80046b8:	b293      	uxth	r3, r2
 80046ba:	fb06 e303 	mla	r3, r6, r3, lr
 80046be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	ebaa 0303 	sub.w	r3, sl, r3
 80046c8:	0c12      	lsrs	r2, r2, #16
 80046ca:	f8dc a000 	ldr.w	sl, [ip]
 80046ce:	fb06 e202 	mla	r2, r6, r2, lr
 80046d2:	fa13 f38a 	uxtah	r3, r3, sl
 80046d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80046da:	fa1f fa82 	uxth.w	sl, r2
 80046de:	f8dc 2000 	ldr.w	r2, [ip]
 80046e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80046e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046f0:	4581      	cmp	r9, r0
 80046f2:	f84c 3b04 	str.w	r3, [ip], #4
 80046f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80046fa:	d2db      	bcs.n	80046b4 <quorem+0x44>
 80046fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8004700:	b92b      	cbnz	r3, 800470e <quorem+0x9e>
 8004702:	9b01      	ldr	r3, [sp, #4]
 8004704:	3b04      	subs	r3, #4
 8004706:	429d      	cmp	r5, r3
 8004708:	461a      	mov	r2, r3
 800470a:	d32e      	bcc.n	800476a <quorem+0xfa>
 800470c:	613c      	str	r4, [r7, #16]
 800470e:	4638      	mov	r0, r7
 8004710:	f001 f8be 	bl	8005890 <__mcmp>
 8004714:	2800      	cmp	r0, #0
 8004716:	db24      	blt.n	8004762 <quorem+0xf2>
 8004718:	3601      	adds	r6, #1
 800471a:	4628      	mov	r0, r5
 800471c:	f04f 0c00 	mov.w	ip, #0
 8004720:	f858 2b04 	ldr.w	r2, [r8], #4
 8004724:	f8d0 e000 	ldr.w	lr, [r0]
 8004728:	b293      	uxth	r3, r2
 800472a:	ebac 0303 	sub.w	r3, ip, r3
 800472e:	0c12      	lsrs	r2, r2, #16
 8004730:	fa13 f38e 	uxtah	r3, r3, lr
 8004734:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004738:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800473c:	b29b      	uxth	r3, r3
 800473e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004742:	45c1      	cmp	r9, r8
 8004744:	f840 3b04 	str.w	r3, [r0], #4
 8004748:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800474c:	d2e8      	bcs.n	8004720 <quorem+0xb0>
 800474e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004752:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004756:	b922      	cbnz	r2, 8004762 <quorem+0xf2>
 8004758:	3b04      	subs	r3, #4
 800475a:	429d      	cmp	r5, r3
 800475c:	461a      	mov	r2, r3
 800475e:	d30a      	bcc.n	8004776 <quorem+0x106>
 8004760:	613c      	str	r4, [r7, #16]
 8004762:	4630      	mov	r0, r6
 8004764:	b003      	add	sp, #12
 8004766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	3b04      	subs	r3, #4
 800476e:	2a00      	cmp	r2, #0
 8004770:	d1cc      	bne.n	800470c <quorem+0x9c>
 8004772:	3c01      	subs	r4, #1
 8004774:	e7c7      	b.n	8004706 <quorem+0x96>
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	3b04      	subs	r3, #4
 800477a:	2a00      	cmp	r2, #0
 800477c:	d1f0      	bne.n	8004760 <quorem+0xf0>
 800477e:	3c01      	subs	r4, #1
 8004780:	e7eb      	b.n	800475a <quorem+0xea>
 8004782:	2000      	movs	r0, #0
 8004784:	e7ee      	b.n	8004764 <quorem+0xf4>
	...

08004788 <_dtoa_r>:
 8004788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800478c:	ed2d 8b02 	vpush	{d8}
 8004790:	ec57 6b10 	vmov	r6, r7, d0
 8004794:	b095      	sub	sp, #84	; 0x54
 8004796:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004798:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800479c:	9105      	str	r1, [sp, #20]
 800479e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80047a2:	4604      	mov	r4, r0
 80047a4:	9209      	str	r2, [sp, #36]	; 0x24
 80047a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80047a8:	b975      	cbnz	r5, 80047c8 <_dtoa_r+0x40>
 80047aa:	2010      	movs	r0, #16
 80047ac:	f000 fddc 	bl	8005368 <malloc>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6260      	str	r0, [r4, #36]	; 0x24
 80047b4:	b920      	cbnz	r0, 80047c0 <_dtoa_r+0x38>
 80047b6:	4bb2      	ldr	r3, [pc, #712]	; (8004a80 <_dtoa_r+0x2f8>)
 80047b8:	21ea      	movs	r1, #234	; 0xea
 80047ba:	48b2      	ldr	r0, [pc, #712]	; (8004a84 <_dtoa_r+0x2fc>)
 80047bc:	f001 fb8e 	bl	8005edc <__assert_func>
 80047c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80047c4:	6005      	str	r5, [r0, #0]
 80047c6:	60c5      	str	r5, [r0, #12]
 80047c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047ca:	6819      	ldr	r1, [r3, #0]
 80047cc:	b151      	cbz	r1, 80047e4 <_dtoa_r+0x5c>
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	604a      	str	r2, [r1, #4]
 80047d2:	2301      	movs	r3, #1
 80047d4:	4093      	lsls	r3, r2
 80047d6:	608b      	str	r3, [r1, #8]
 80047d8:	4620      	mov	r0, r4
 80047da:	f000 fe1b 	bl	8005414 <_Bfree>
 80047de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	1e3b      	subs	r3, r7, #0
 80047e6:	bfb9      	ittee	lt
 80047e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80047ec:	9303      	strlt	r3, [sp, #12]
 80047ee:	2300      	movge	r3, #0
 80047f0:	f8c8 3000 	strge.w	r3, [r8]
 80047f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80047f8:	4ba3      	ldr	r3, [pc, #652]	; (8004a88 <_dtoa_r+0x300>)
 80047fa:	bfbc      	itt	lt
 80047fc:	2201      	movlt	r2, #1
 80047fe:	f8c8 2000 	strlt.w	r2, [r8]
 8004802:	ea33 0309 	bics.w	r3, r3, r9
 8004806:	d11b      	bne.n	8004840 <_dtoa_r+0xb8>
 8004808:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800480a:	f242 730f 	movw	r3, #9999	; 0x270f
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004814:	4333      	orrs	r3, r6
 8004816:	f000 857a 	beq.w	800530e <_dtoa_r+0xb86>
 800481a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800481c:	b963      	cbnz	r3, 8004838 <_dtoa_r+0xb0>
 800481e:	4b9b      	ldr	r3, [pc, #620]	; (8004a8c <_dtoa_r+0x304>)
 8004820:	e024      	b.n	800486c <_dtoa_r+0xe4>
 8004822:	4b9b      	ldr	r3, [pc, #620]	; (8004a90 <_dtoa_r+0x308>)
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	3308      	adds	r3, #8
 8004828:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	9800      	ldr	r0, [sp, #0]
 800482e:	b015      	add	sp, #84	; 0x54
 8004830:	ecbd 8b02 	vpop	{d8}
 8004834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004838:	4b94      	ldr	r3, [pc, #592]	; (8004a8c <_dtoa_r+0x304>)
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	3303      	adds	r3, #3
 800483e:	e7f3      	b.n	8004828 <_dtoa_r+0xa0>
 8004840:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004844:	2200      	movs	r2, #0
 8004846:	ec51 0b17 	vmov	r0, r1, d7
 800484a:	2300      	movs	r3, #0
 800484c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004850:	f7fc f93a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004854:	4680      	mov	r8, r0
 8004856:	b158      	cbz	r0, 8004870 <_dtoa_r+0xe8>
 8004858:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800485a:	2301      	movs	r3, #1
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8551 	beq.w	8005308 <_dtoa_r+0xb80>
 8004866:	488b      	ldr	r0, [pc, #556]	; (8004a94 <_dtoa_r+0x30c>)
 8004868:	6018      	str	r0, [r3, #0]
 800486a:	1e43      	subs	r3, r0, #1
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	e7dd      	b.n	800482c <_dtoa_r+0xa4>
 8004870:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004874:	aa12      	add	r2, sp, #72	; 0x48
 8004876:	a913      	add	r1, sp, #76	; 0x4c
 8004878:	4620      	mov	r0, r4
 800487a:	f001 f8ad 	bl	80059d8 <__d2b>
 800487e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004882:	4683      	mov	fp, r0
 8004884:	2d00      	cmp	r5, #0
 8004886:	d07c      	beq.n	8004982 <_dtoa_r+0x1fa>
 8004888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800488a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800488e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004892:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004896:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800489a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800489e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80048a2:	4b7d      	ldr	r3, [pc, #500]	; (8004a98 <_dtoa_r+0x310>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	4630      	mov	r0, r6
 80048a8:	4639      	mov	r1, r7
 80048aa:	f7fb fced 	bl	8000288 <__aeabi_dsub>
 80048ae:	a36e      	add	r3, pc, #440	; (adr r3, 8004a68 <_dtoa_r+0x2e0>)
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	f7fb fea0 	bl	80005f8 <__aeabi_dmul>
 80048b8:	a36d      	add	r3, pc, #436	; (adr r3, 8004a70 <_dtoa_r+0x2e8>)
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	f7fb fce5 	bl	800028c <__adddf3>
 80048c2:	4606      	mov	r6, r0
 80048c4:	4628      	mov	r0, r5
 80048c6:	460f      	mov	r7, r1
 80048c8:	f7fb fe2c 	bl	8000524 <__aeabi_i2d>
 80048cc:	a36a      	add	r3, pc, #424	; (adr r3, 8004a78 <_dtoa_r+0x2f0>)
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	f7fb fe91 	bl	80005f8 <__aeabi_dmul>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4630      	mov	r0, r6
 80048dc:	4639      	mov	r1, r7
 80048de:	f7fb fcd5 	bl	800028c <__adddf3>
 80048e2:	4606      	mov	r6, r0
 80048e4:	460f      	mov	r7, r1
 80048e6:	f7fc f937 	bl	8000b58 <__aeabi_d2iz>
 80048ea:	2200      	movs	r2, #0
 80048ec:	4682      	mov	sl, r0
 80048ee:	2300      	movs	r3, #0
 80048f0:	4630      	mov	r0, r6
 80048f2:	4639      	mov	r1, r7
 80048f4:	f7fc f8f2 	bl	8000adc <__aeabi_dcmplt>
 80048f8:	b148      	cbz	r0, 800490e <_dtoa_r+0x186>
 80048fa:	4650      	mov	r0, sl
 80048fc:	f7fb fe12 	bl	8000524 <__aeabi_i2d>
 8004900:	4632      	mov	r2, r6
 8004902:	463b      	mov	r3, r7
 8004904:	f7fc f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004908:	b908      	cbnz	r0, 800490e <_dtoa_r+0x186>
 800490a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800490e:	f1ba 0f16 	cmp.w	sl, #22
 8004912:	d854      	bhi.n	80049be <_dtoa_r+0x236>
 8004914:	4b61      	ldr	r3, [pc, #388]	; (8004a9c <_dtoa_r+0x314>)
 8004916:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004922:	f7fc f8db 	bl	8000adc <__aeabi_dcmplt>
 8004926:	2800      	cmp	r0, #0
 8004928:	d04b      	beq.n	80049c2 <_dtoa_r+0x23a>
 800492a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800492e:	2300      	movs	r3, #0
 8004930:	930e      	str	r3, [sp, #56]	; 0x38
 8004932:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004934:	1b5d      	subs	r5, r3, r5
 8004936:	1e6b      	subs	r3, r5, #1
 8004938:	9304      	str	r3, [sp, #16]
 800493a:	bf43      	ittte	mi
 800493c:	2300      	movmi	r3, #0
 800493e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004942:	9304      	strmi	r3, [sp, #16]
 8004944:	f04f 0800 	movpl.w	r8, #0
 8004948:	f1ba 0f00 	cmp.w	sl, #0
 800494c:	db3b      	blt.n	80049c6 <_dtoa_r+0x23e>
 800494e:	9b04      	ldr	r3, [sp, #16]
 8004950:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004954:	4453      	add	r3, sl
 8004956:	9304      	str	r3, [sp, #16]
 8004958:	2300      	movs	r3, #0
 800495a:	9306      	str	r3, [sp, #24]
 800495c:	9b05      	ldr	r3, [sp, #20]
 800495e:	2b09      	cmp	r3, #9
 8004960:	d869      	bhi.n	8004a36 <_dtoa_r+0x2ae>
 8004962:	2b05      	cmp	r3, #5
 8004964:	bfc4      	itt	gt
 8004966:	3b04      	subgt	r3, #4
 8004968:	9305      	strgt	r3, [sp, #20]
 800496a:	9b05      	ldr	r3, [sp, #20]
 800496c:	f1a3 0302 	sub.w	r3, r3, #2
 8004970:	bfcc      	ite	gt
 8004972:	2500      	movgt	r5, #0
 8004974:	2501      	movle	r5, #1
 8004976:	2b03      	cmp	r3, #3
 8004978:	d869      	bhi.n	8004a4e <_dtoa_r+0x2c6>
 800497a:	e8df f003 	tbb	[pc, r3]
 800497e:	4e2c      	.short	0x4e2c
 8004980:	5a4c      	.short	0x5a4c
 8004982:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004986:	441d      	add	r5, r3
 8004988:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800498c:	2b20      	cmp	r3, #32
 800498e:	bfc1      	itttt	gt
 8004990:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004994:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004998:	fa09 f303 	lslgt.w	r3, r9, r3
 800499c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80049a0:	bfda      	itte	le
 80049a2:	f1c3 0320 	rsble	r3, r3, #32
 80049a6:	fa06 f003 	lslle.w	r0, r6, r3
 80049aa:	4318      	orrgt	r0, r3
 80049ac:	f7fb fdaa 	bl	8000504 <__aeabi_ui2d>
 80049b0:	2301      	movs	r3, #1
 80049b2:	4606      	mov	r6, r0
 80049b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80049b8:	3d01      	subs	r5, #1
 80049ba:	9310      	str	r3, [sp, #64]	; 0x40
 80049bc:	e771      	b.n	80048a2 <_dtoa_r+0x11a>
 80049be:	2301      	movs	r3, #1
 80049c0:	e7b6      	b.n	8004930 <_dtoa_r+0x1a8>
 80049c2:	900e      	str	r0, [sp, #56]	; 0x38
 80049c4:	e7b5      	b.n	8004932 <_dtoa_r+0x1aa>
 80049c6:	f1ca 0300 	rsb	r3, sl, #0
 80049ca:	9306      	str	r3, [sp, #24]
 80049cc:	2300      	movs	r3, #0
 80049ce:	eba8 080a 	sub.w	r8, r8, sl
 80049d2:	930d      	str	r3, [sp, #52]	; 0x34
 80049d4:	e7c2      	b.n	800495c <_dtoa_r+0x1d4>
 80049d6:	2300      	movs	r3, #0
 80049d8:	9308      	str	r3, [sp, #32]
 80049da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049dc:	2b00      	cmp	r3, #0
 80049de:	dc39      	bgt.n	8004a54 <_dtoa_r+0x2cc>
 80049e0:	f04f 0901 	mov.w	r9, #1
 80049e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80049e8:	464b      	mov	r3, r9
 80049ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80049ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80049f0:	2200      	movs	r2, #0
 80049f2:	6042      	str	r2, [r0, #4]
 80049f4:	2204      	movs	r2, #4
 80049f6:	f102 0614 	add.w	r6, r2, #20
 80049fa:	429e      	cmp	r6, r3
 80049fc:	6841      	ldr	r1, [r0, #4]
 80049fe:	d92f      	bls.n	8004a60 <_dtoa_r+0x2d8>
 8004a00:	4620      	mov	r0, r4
 8004a02:	f000 fcc7 	bl	8005394 <_Balloc>
 8004a06:	9000      	str	r0, [sp, #0]
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d14b      	bne.n	8004aa4 <_dtoa_r+0x31c>
 8004a0c:	4b24      	ldr	r3, [pc, #144]	; (8004aa0 <_dtoa_r+0x318>)
 8004a0e:	4602      	mov	r2, r0
 8004a10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004a14:	e6d1      	b.n	80047ba <_dtoa_r+0x32>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e7de      	b.n	80049d8 <_dtoa_r+0x250>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	9308      	str	r3, [sp, #32]
 8004a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a20:	eb0a 0903 	add.w	r9, sl, r3
 8004a24:	f109 0301 	add.w	r3, r9, #1
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	bfb8      	it	lt
 8004a2e:	2301      	movlt	r3, #1
 8004a30:	e7dd      	b.n	80049ee <_dtoa_r+0x266>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e7f2      	b.n	8004a1c <_dtoa_r+0x294>
 8004a36:	2501      	movs	r5, #1
 8004a38:	2300      	movs	r3, #0
 8004a3a:	9305      	str	r3, [sp, #20]
 8004a3c:	9508      	str	r5, [sp, #32]
 8004a3e:	f04f 39ff 	mov.w	r9, #4294967295
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8cd 9004 	str.w	r9, [sp, #4]
 8004a48:	2312      	movs	r3, #18
 8004a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8004a4c:	e7cf      	b.n	80049ee <_dtoa_r+0x266>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	9308      	str	r3, [sp, #32]
 8004a52:	e7f4      	b.n	8004a3e <_dtoa_r+0x2b6>
 8004a54:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004a58:	f8cd 9004 	str.w	r9, [sp, #4]
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	e7c6      	b.n	80049ee <_dtoa_r+0x266>
 8004a60:	3101      	adds	r1, #1
 8004a62:	6041      	str	r1, [r0, #4]
 8004a64:	0052      	lsls	r2, r2, #1
 8004a66:	e7c6      	b.n	80049f6 <_dtoa_r+0x26e>
 8004a68:	636f4361 	.word	0x636f4361
 8004a6c:	3fd287a7 	.word	0x3fd287a7
 8004a70:	8b60c8b3 	.word	0x8b60c8b3
 8004a74:	3fc68a28 	.word	0x3fc68a28
 8004a78:	509f79fb 	.word	0x509f79fb
 8004a7c:	3fd34413 	.word	0x3fd34413
 8004a80:	08006f9d 	.word	0x08006f9d
 8004a84:	08006fb4 	.word	0x08006fb4
 8004a88:	7ff00000 	.word	0x7ff00000
 8004a8c:	08006f99 	.word	0x08006f99
 8004a90:	08006f90 	.word	0x08006f90
 8004a94:	08006f6d 	.word	0x08006f6d
 8004a98:	3ff80000 	.word	0x3ff80000
 8004a9c:	080070b0 	.word	0x080070b0
 8004aa0:	08007013 	.word	0x08007013
 8004aa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aa6:	9a00      	ldr	r2, [sp, #0]
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	9b01      	ldr	r3, [sp, #4]
 8004aac:	2b0e      	cmp	r3, #14
 8004aae:	f200 80ad 	bhi.w	8004c0c <_dtoa_r+0x484>
 8004ab2:	2d00      	cmp	r5, #0
 8004ab4:	f000 80aa 	beq.w	8004c0c <_dtoa_r+0x484>
 8004ab8:	f1ba 0f00 	cmp.w	sl, #0
 8004abc:	dd36      	ble.n	8004b2c <_dtoa_r+0x3a4>
 8004abe:	4ac3      	ldr	r2, [pc, #780]	; (8004dcc <_dtoa_r+0x644>)
 8004ac0:	f00a 030f 	and.w	r3, sl, #15
 8004ac4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ac8:	ed93 7b00 	vldr	d7, [r3]
 8004acc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004ad0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004ad4:	eeb0 8a47 	vmov.f32	s16, s14
 8004ad8:	eef0 8a67 	vmov.f32	s17, s15
 8004adc:	d016      	beq.n	8004b0c <_dtoa_r+0x384>
 8004ade:	4bbc      	ldr	r3, [pc, #752]	; (8004dd0 <_dtoa_r+0x648>)
 8004ae0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ae4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ae8:	f7fb feb0 	bl	800084c <__aeabi_ddiv>
 8004aec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004af0:	f007 070f 	and.w	r7, r7, #15
 8004af4:	2503      	movs	r5, #3
 8004af6:	4eb6      	ldr	r6, [pc, #728]	; (8004dd0 <_dtoa_r+0x648>)
 8004af8:	b957      	cbnz	r7, 8004b10 <_dtoa_r+0x388>
 8004afa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004afe:	ec53 2b18 	vmov	r2, r3, d8
 8004b02:	f7fb fea3 	bl	800084c <__aeabi_ddiv>
 8004b06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b0a:	e029      	b.n	8004b60 <_dtoa_r+0x3d8>
 8004b0c:	2502      	movs	r5, #2
 8004b0e:	e7f2      	b.n	8004af6 <_dtoa_r+0x36e>
 8004b10:	07f9      	lsls	r1, r7, #31
 8004b12:	d508      	bpl.n	8004b26 <_dtoa_r+0x39e>
 8004b14:	ec51 0b18 	vmov	r0, r1, d8
 8004b18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b1c:	f7fb fd6c 	bl	80005f8 <__aeabi_dmul>
 8004b20:	ec41 0b18 	vmov	d8, r0, r1
 8004b24:	3501      	adds	r5, #1
 8004b26:	107f      	asrs	r7, r7, #1
 8004b28:	3608      	adds	r6, #8
 8004b2a:	e7e5      	b.n	8004af8 <_dtoa_r+0x370>
 8004b2c:	f000 80a6 	beq.w	8004c7c <_dtoa_r+0x4f4>
 8004b30:	f1ca 0600 	rsb	r6, sl, #0
 8004b34:	4ba5      	ldr	r3, [pc, #660]	; (8004dcc <_dtoa_r+0x644>)
 8004b36:	4fa6      	ldr	r7, [pc, #664]	; (8004dd0 <_dtoa_r+0x648>)
 8004b38:	f006 020f 	and.w	r2, r6, #15
 8004b3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b48:	f7fb fd56 	bl	80005f8 <__aeabi_dmul>
 8004b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b50:	1136      	asrs	r6, r6, #4
 8004b52:	2300      	movs	r3, #0
 8004b54:	2502      	movs	r5, #2
 8004b56:	2e00      	cmp	r6, #0
 8004b58:	f040 8085 	bne.w	8004c66 <_dtoa_r+0x4de>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1d2      	bne.n	8004b06 <_dtoa_r+0x37e>
 8004b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 808c 	beq.w	8004c80 <_dtoa_r+0x4f8>
 8004b68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004b6c:	4b99      	ldr	r3, [pc, #612]	; (8004dd4 <_dtoa_r+0x64c>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	4630      	mov	r0, r6
 8004b72:	4639      	mov	r1, r7
 8004b74:	f7fb ffb2 	bl	8000adc <__aeabi_dcmplt>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	f000 8081 	beq.w	8004c80 <_dtoa_r+0x4f8>
 8004b7e:	9b01      	ldr	r3, [sp, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d07d      	beq.n	8004c80 <_dtoa_r+0x4f8>
 8004b84:	f1b9 0f00 	cmp.w	r9, #0
 8004b88:	dd3c      	ble.n	8004c04 <_dtoa_r+0x47c>
 8004b8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004b8e:	9307      	str	r3, [sp, #28]
 8004b90:	2200      	movs	r2, #0
 8004b92:	4b91      	ldr	r3, [pc, #580]	; (8004dd8 <_dtoa_r+0x650>)
 8004b94:	4630      	mov	r0, r6
 8004b96:	4639      	mov	r1, r7
 8004b98:	f7fb fd2e 	bl	80005f8 <__aeabi_dmul>
 8004b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ba0:	3501      	adds	r5, #1
 8004ba2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004ba6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004baa:	4628      	mov	r0, r5
 8004bac:	f7fb fcba 	bl	8000524 <__aeabi_i2d>
 8004bb0:	4632      	mov	r2, r6
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	f7fb fd20 	bl	80005f8 <__aeabi_dmul>
 8004bb8:	4b88      	ldr	r3, [pc, #544]	; (8004ddc <_dtoa_r+0x654>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f7fb fb66 	bl	800028c <__adddf3>
 8004bc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bc8:	9303      	str	r3, [sp, #12]
 8004bca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d15c      	bne.n	8004c8a <_dtoa_r+0x502>
 8004bd0:	4b83      	ldr	r3, [pc, #524]	; (8004de0 <_dtoa_r+0x658>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	4639      	mov	r1, r7
 8004bd8:	f7fb fb56 	bl	8000288 <__aeabi_dsub>
 8004bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004be0:	4606      	mov	r6, r0
 8004be2:	460f      	mov	r7, r1
 8004be4:	f7fb ff98 	bl	8000b18 <__aeabi_dcmpgt>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	f040 8296 	bne.w	800511a <_dtoa_r+0x992>
 8004bee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004bf8:	4639      	mov	r1, r7
 8004bfa:	f7fb ff6f 	bl	8000adc <__aeabi_dcmplt>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	f040 8288 	bne.w	8005114 <_dtoa_r+0x98c>
 8004c04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f2c0 8158 	blt.w	8004ec4 <_dtoa_r+0x73c>
 8004c14:	f1ba 0f0e 	cmp.w	sl, #14
 8004c18:	f300 8154 	bgt.w	8004ec4 <_dtoa_r+0x73c>
 8004c1c:	4b6b      	ldr	r3, [pc, #428]	; (8004dcc <_dtoa_r+0x644>)
 8004c1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004c22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f280 80e3 	bge.w	8004df4 <_dtoa_r+0x66c>
 8004c2e:	9b01      	ldr	r3, [sp, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f300 80df 	bgt.w	8004df4 <_dtoa_r+0x66c>
 8004c36:	f040 826d 	bne.w	8005114 <_dtoa_r+0x98c>
 8004c3a:	4b69      	ldr	r3, [pc, #420]	; (8004de0 <_dtoa_r+0x658>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	4640      	mov	r0, r8
 8004c40:	4649      	mov	r1, r9
 8004c42:	f7fb fcd9 	bl	80005f8 <__aeabi_dmul>
 8004c46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c4a:	f7fb ff5b 	bl	8000b04 <__aeabi_dcmpge>
 8004c4e:	9e01      	ldr	r6, [sp, #4]
 8004c50:	4637      	mov	r7, r6
 8004c52:	2800      	cmp	r0, #0
 8004c54:	f040 8243 	bne.w	80050de <_dtoa_r+0x956>
 8004c58:	9d00      	ldr	r5, [sp, #0]
 8004c5a:	2331      	movs	r3, #49	; 0x31
 8004c5c:	f805 3b01 	strb.w	r3, [r5], #1
 8004c60:	f10a 0a01 	add.w	sl, sl, #1
 8004c64:	e23f      	b.n	80050e6 <_dtoa_r+0x95e>
 8004c66:	07f2      	lsls	r2, r6, #31
 8004c68:	d505      	bpl.n	8004c76 <_dtoa_r+0x4ee>
 8004c6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c6e:	f7fb fcc3 	bl	80005f8 <__aeabi_dmul>
 8004c72:	3501      	adds	r5, #1
 8004c74:	2301      	movs	r3, #1
 8004c76:	1076      	asrs	r6, r6, #1
 8004c78:	3708      	adds	r7, #8
 8004c7a:	e76c      	b.n	8004b56 <_dtoa_r+0x3ce>
 8004c7c:	2502      	movs	r5, #2
 8004c7e:	e76f      	b.n	8004b60 <_dtoa_r+0x3d8>
 8004c80:	9b01      	ldr	r3, [sp, #4]
 8004c82:	f8cd a01c 	str.w	sl, [sp, #28]
 8004c86:	930c      	str	r3, [sp, #48]	; 0x30
 8004c88:	e78d      	b.n	8004ba6 <_dtoa_r+0x41e>
 8004c8a:	9900      	ldr	r1, [sp, #0]
 8004c8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004c8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c90:	4b4e      	ldr	r3, [pc, #312]	; (8004dcc <_dtoa_r+0x644>)
 8004c92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c96:	4401      	add	r1, r0
 8004c98:	9102      	str	r1, [sp, #8]
 8004c9a:	9908      	ldr	r1, [sp, #32]
 8004c9c:	eeb0 8a47 	vmov.f32	s16, s14
 8004ca0:	eef0 8a67 	vmov.f32	s17, s15
 8004ca4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ca8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004cac:	2900      	cmp	r1, #0
 8004cae:	d045      	beq.n	8004d3c <_dtoa_r+0x5b4>
 8004cb0:	494c      	ldr	r1, [pc, #304]	; (8004de4 <_dtoa_r+0x65c>)
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	f7fb fdca 	bl	800084c <__aeabi_ddiv>
 8004cb8:	ec53 2b18 	vmov	r2, r3, d8
 8004cbc:	f7fb fae4 	bl	8000288 <__aeabi_dsub>
 8004cc0:	9d00      	ldr	r5, [sp, #0]
 8004cc2:	ec41 0b18 	vmov	d8, r0, r1
 8004cc6:	4639      	mov	r1, r7
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f7fb ff45 	bl	8000b58 <__aeabi_d2iz>
 8004cce:	900c      	str	r0, [sp, #48]	; 0x30
 8004cd0:	f7fb fc28 	bl	8000524 <__aeabi_i2d>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4630      	mov	r0, r6
 8004cda:	4639      	mov	r1, r7
 8004cdc:	f7fb fad4 	bl	8000288 <__aeabi_dsub>
 8004ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ce2:	3330      	adds	r3, #48	; 0x30
 8004ce4:	f805 3b01 	strb.w	r3, [r5], #1
 8004ce8:	ec53 2b18 	vmov	r2, r3, d8
 8004cec:	4606      	mov	r6, r0
 8004cee:	460f      	mov	r7, r1
 8004cf0:	f7fb fef4 	bl	8000adc <__aeabi_dcmplt>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d165      	bne.n	8004dc4 <_dtoa_r+0x63c>
 8004cf8:	4632      	mov	r2, r6
 8004cfa:	463b      	mov	r3, r7
 8004cfc:	4935      	ldr	r1, [pc, #212]	; (8004dd4 <_dtoa_r+0x64c>)
 8004cfe:	2000      	movs	r0, #0
 8004d00:	f7fb fac2 	bl	8000288 <__aeabi_dsub>
 8004d04:	ec53 2b18 	vmov	r2, r3, d8
 8004d08:	f7fb fee8 	bl	8000adc <__aeabi_dcmplt>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	f040 80b9 	bne.w	8004e84 <_dtoa_r+0x6fc>
 8004d12:	9b02      	ldr	r3, [sp, #8]
 8004d14:	429d      	cmp	r5, r3
 8004d16:	f43f af75 	beq.w	8004c04 <_dtoa_r+0x47c>
 8004d1a:	4b2f      	ldr	r3, [pc, #188]	; (8004dd8 <_dtoa_r+0x650>)
 8004d1c:	ec51 0b18 	vmov	r0, r1, d8
 8004d20:	2200      	movs	r2, #0
 8004d22:	f7fb fc69 	bl	80005f8 <__aeabi_dmul>
 8004d26:	4b2c      	ldr	r3, [pc, #176]	; (8004dd8 <_dtoa_r+0x650>)
 8004d28:	ec41 0b18 	vmov	d8, r0, r1
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	4630      	mov	r0, r6
 8004d30:	4639      	mov	r1, r7
 8004d32:	f7fb fc61 	bl	80005f8 <__aeabi_dmul>
 8004d36:	4606      	mov	r6, r0
 8004d38:	460f      	mov	r7, r1
 8004d3a:	e7c4      	b.n	8004cc6 <_dtoa_r+0x53e>
 8004d3c:	ec51 0b17 	vmov	r0, r1, d7
 8004d40:	f7fb fc5a 	bl	80005f8 <__aeabi_dmul>
 8004d44:	9b02      	ldr	r3, [sp, #8]
 8004d46:	9d00      	ldr	r5, [sp, #0]
 8004d48:	930c      	str	r3, [sp, #48]	; 0x30
 8004d4a:	ec41 0b18 	vmov	d8, r0, r1
 8004d4e:	4639      	mov	r1, r7
 8004d50:	4630      	mov	r0, r6
 8004d52:	f7fb ff01 	bl	8000b58 <__aeabi_d2iz>
 8004d56:	9011      	str	r0, [sp, #68]	; 0x44
 8004d58:	f7fb fbe4 	bl	8000524 <__aeabi_i2d>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4630      	mov	r0, r6
 8004d62:	4639      	mov	r1, r7
 8004d64:	f7fb fa90 	bl	8000288 <__aeabi_dsub>
 8004d68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d6a:	3330      	adds	r3, #48	; 0x30
 8004d6c:	f805 3b01 	strb.w	r3, [r5], #1
 8004d70:	9b02      	ldr	r3, [sp, #8]
 8004d72:	429d      	cmp	r5, r3
 8004d74:	4606      	mov	r6, r0
 8004d76:	460f      	mov	r7, r1
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	d134      	bne.n	8004de8 <_dtoa_r+0x660>
 8004d7e:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <_dtoa_r+0x65c>)
 8004d80:	ec51 0b18 	vmov	r0, r1, d8
 8004d84:	f7fb fa82 	bl	800028c <__adddf3>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	4639      	mov	r1, r7
 8004d90:	f7fb fec2 	bl	8000b18 <__aeabi_dcmpgt>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d175      	bne.n	8004e84 <_dtoa_r+0x6fc>
 8004d98:	ec53 2b18 	vmov	r2, r3, d8
 8004d9c:	4911      	ldr	r1, [pc, #68]	; (8004de4 <_dtoa_r+0x65c>)
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f7fb fa72 	bl	8000288 <__aeabi_dsub>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4630      	mov	r0, r6
 8004daa:	4639      	mov	r1, r7
 8004dac:	f7fb fe96 	bl	8000adc <__aeabi_dcmplt>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	f43f af27 	beq.w	8004c04 <_dtoa_r+0x47c>
 8004db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004db8:	1e6b      	subs	r3, r5, #1
 8004dba:	930c      	str	r3, [sp, #48]	; 0x30
 8004dbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004dc0:	2b30      	cmp	r3, #48	; 0x30
 8004dc2:	d0f8      	beq.n	8004db6 <_dtoa_r+0x62e>
 8004dc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004dc8:	e04a      	b.n	8004e60 <_dtoa_r+0x6d8>
 8004dca:	bf00      	nop
 8004dcc:	080070b0 	.word	0x080070b0
 8004dd0:	08007088 	.word	0x08007088
 8004dd4:	3ff00000 	.word	0x3ff00000
 8004dd8:	40240000 	.word	0x40240000
 8004ddc:	401c0000 	.word	0x401c0000
 8004de0:	40140000 	.word	0x40140000
 8004de4:	3fe00000 	.word	0x3fe00000
 8004de8:	4baf      	ldr	r3, [pc, #700]	; (80050a8 <_dtoa_r+0x920>)
 8004dea:	f7fb fc05 	bl	80005f8 <__aeabi_dmul>
 8004dee:	4606      	mov	r6, r0
 8004df0:	460f      	mov	r7, r1
 8004df2:	e7ac      	b.n	8004d4e <_dtoa_r+0x5c6>
 8004df4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004df8:	9d00      	ldr	r5, [sp, #0]
 8004dfa:	4642      	mov	r2, r8
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	4630      	mov	r0, r6
 8004e00:	4639      	mov	r1, r7
 8004e02:	f7fb fd23 	bl	800084c <__aeabi_ddiv>
 8004e06:	f7fb fea7 	bl	8000b58 <__aeabi_d2iz>
 8004e0a:	9002      	str	r0, [sp, #8]
 8004e0c:	f7fb fb8a 	bl	8000524 <__aeabi_i2d>
 8004e10:	4642      	mov	r2, r8
 8004e12:	464b      	mov	r3, r9
 8004e14:	f7fb fbf0 	bl	80005f8 <__aeabi_dmul>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	4639      	mov	r1, r7
 8004e20:	f7fb fa32 	bl	8000288 <__aeabi_dsub>
 8004e24:	9e02      	ldr	r6, [sp, #8]
 8004e26:	9f01      	ldr	r7, [sp, #4]
 8004e28:	3630      	adds	r6, #48	; 0x30
 8004e2a:	f805 6b01 	strb.w	r6, [r5], #1
 8004e2e:	9e00      	ldr	r6, [sp, #0]
 8004e30:	1bae      	subs	r6, r5, r6
 8004e32:	42b7      	cmp	r7, r6
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	d137      	bne.n	8004eaa <_dtoa_r+0x722>
 8004e3a:	f7fb fa27 	bl	800028c <__adddf3>
 8004e3e:	4642      	mov	r2, r8
 8004e40:	464b      	mov	r3, r9
 8004e42:	4606      	mov	r6, r0
 8004e44:	460f      	mov	r7, r1
 8004e46:	f7fb fe67 	bl	8000b18 <__aeabi_dcmpgt>
 8004e4a:	b9c8      	cbnz	r0, 8004e80 <_dtoa_r+0x6f8>
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	464b      	mov	r3, r9
 8004e50:	4630      	mov	r0, r6
 8004e52:	4639      	mov	r1, r7
 8004e54:	f7fb fe38 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e58:	b110      	cbz	r0, 8004e60 <_dtoa_r+0x6d8>
 8004e5a:	9b02      	ldr	r3, [sp, #8]
 8004e5c:	07d9      	lsls	r1, r3, #31
 8004e5e:	d40f      	bmi.n	8004e80 <_dtoa_r+0x6f8>
 8004e60:	4620      	mov	r0, r4
 8004e62:	4659      	mov	r1, fp
 8004e64:	f000 fad6 	bl	8005414 <_Bfree>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	702b      	strb	r3, [r5, #0]
 8004e6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e6e:	f10a 0001 	add.w	r0, sl, #1
 8004e72:	6018      	str	r0, [r3, #0]
 8004e74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f43f acd8 	beq.w	800482c <_dtoa_r+0xa4>
 8004e7c:	601d      	str	r5, [r3, #0]
 8004e7e:	e4d5      	b.n	800482c <_dtoa_r+0xa4>
 8004e80:	f8cd a01c 	str.w	sl, [sp, #28]
 8004e84:	462b      	mov	r3, r5
 8004e86:	461d      	mov	r5, r3
 8004e88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e8c:	2a39      	cmp	r2, #57	; 0x39
 8004e8e:	d108      	bne.n	8004ea2 <_dtoa_r+0x71a>
 8004e90:	9a00      	ldr	r2, [sp, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d1f7      	bne.n	8004e86 <_dtoa_r+0x6fe>
 8004e96:	9a07      	ldr	r2, [sp, #28]
 8004e98:	9900      	ldr	r1, [sp, #0]
 8004e9a:	3201      	adds	r2, #1
 8004e9c:	9207      	str	r2, [sp, #28]
 8004e9e:	2230      	movs	r2, #48	; 0x30
 8004ea0:	700a      	strb	r2, [r1, #0]
 8004ea2:	781a      	ldrb	r2, [r3, #0]
 8004ea4:	3201      	adds	r2, #1
 8004ea6:	701a      	strb	r2, [r3, #0]
 8004ea8:	e78c      	b.n	8004dc4 <_dtoa_r+0x63c>
 8004eaa:	4b7f      	ldr	r3, [pc, #508]	; (80050a8 <_dtoa_r+0x920>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	f7fb fba3 	bl	80005f8 <__aeabi_dmul>
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4606      	mov	r6, r0
 8004eb8:	460f      	mov	r7, r1
 8004eba:	f7fb fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	d09b      	beq.n	8004dfa <_dtoa_r+0x672>
 8004ec2:	e7cd      	b.n	8004e60 <_dtoa_r+0x6d8>
 8004ec4:	9a08      	ldr	r2, [sp, #32]
 8004ec6:	2a00      	cmp	r2, #0
 8004ec8:	f000 80c4 	beq.w	8005054 <_dtoa_r+0x8cc>
 8004ecc:	9a05      	ldr	r2, [sp, #20]
 8004ece:	2a01      	cmp	r2, #1
 8004ed0:	f300 80a8 	bgt.w	8005024 <_dtoa_r+0x89c>
 8004ed4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ed6:	2a00      	cmp	r2, #0
 8004ed8:	f000 80a0 	beq.w	800501c <_dtoa_r+0x894>
 8004edc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ee0:	9e06      	ldr	r6, [sp, #24]
 8004ee2:	4645      	mov	r5, r8
 8004ee4:	9a04      	ldr	r2, [sp, #16]
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	441a      	add	r2, r3
 8004eea:	4620      	mov	r0, r4
 8004eec:	4498      	add	r8, r3
 8004eee:	9204      	str	r2, [sp, #16]
 8004ef0:	f000 fb4c 	bl	800558c <__i2b>
 8004ef4:	4607      	mov	r7, r0
 8004ef6:	2d00      	cmp	r5, #0
 8004ef8:	dd0b      	ble.n	8004f12 <_dtoa_r+0x78a>
 8004efa:	9b04      	ldr	r3, [sp, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	dd08      	ble.n	8004f12 <_dtoa_r+0x78a>
 8004f00:	42ab      	cmp	r3, r5
 8004f02:	9a04      	ldr	r2, [sp, #16]
 8004f04:	bfa8      	it	ge
 8004f06:	462b      	movge	r3, r5
 8004f08:	eba8 0803 	sub.w	r8, r8, r3
 8004f0c:	1aed      	subs	r5, r5, r3
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	9304      	str	r3, [sp, #16]
 8004f12:	9b06      	ldr	r3, [sp, #24]
 8004f14:	b1fb      	cbz	r3, 8004f56 <_dtoa_r+0x7ce>
 8004f16:	9b08      	ldr	r3, [sp, #32]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 809f 	beq.w	800505c <_dtoa_r+0x8d4>
 8004f1e:	2e00      	cmp	r6, #0
 8004f20:	dd11      	ble.n	8004f46 <_dtoa_r+0x7be>
 8004f22:	4639      	mov	r1, r7
 8004f24:	4632      	mov	r2, r6
 8004f26:	4620      	mov	r0, r4
 8004f28:	f000 fbec 	bl	8005704 <__pow5mult>
 8004f2c:	465a      	mov	r2, fp
 8004f2e:	4601      	mov	r1, r0
 8004f30:	4607      	mov	r7, r0
 8004f32:	4620      	mov	r0, r4
 8004f34:	f000 fb40 	bl	80055b8 <__multiply>
 8004f38:	4659      	mov	r1, fp
 8004f3a:	9007      	str	r0, [sp, #28]
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f000 fa69 	bl	8005414 <_Bfree>
 8004f42:	9b07      	ldr	r3, [sp, #28]
 8004f44:	469b      	mov	fp, r3
 8004f46:	9b06      	ldr	r3, [sp, #24]
 8004f48:	1b9a      	subs	r2, r3, r6
 8004f4a:	d004      	beq.n	8004f56 <_dtoa_r+0x7ce>
 8004f4c:	4659      	mov	r1, fp
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f000 fbd8 	bl	8005704 <__pow5mult>
 8004f54:	4683      	mov	fp, r0
 8004f56:	2101      	movs	r1, #1
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f000 fb17 	bl	800558c <__i2b>
 8004f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	4606      	mov	r6, r0
 8004f64:	dd7c      	ble.n	8005060 <_dtoa_r+0x8d8>
 8004f66:	461a      	mov	r2, r3
 8004f68:	4601      	mov	r1, r0
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f000 fbca 	bl	8005704 <__pow5mult>
 8004f70:	9b05      	ldr	r3, [sp, #20]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	4606      	mov	r6, r0
 8004f76:	dd76      	ble.n	8005066 <_dtoa_r+0x8de>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9306      	str	r3, [sp, #24]
 8004f7c:	6933      	ldr	r3, [r6, #16]
 8004f7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004f82:	6918      	ldr	r0, [r3, #16]
 8004f84:	f000 fab2 	bl	80054ec <__hi0bits>
 8004f88:	f1c0 0020 	rsb	r0, r0, #32
 8004f8c:	9b04      	ldr	r3, [sp, #16]
 8004f8e:	4418      	add	r0, r3
 8004f90:	f010 001f 	ands.w	r0, r0, #31
 8004f94:	f000 8086 	beq.w	80050a4 <_dtoa_r+0x91c>
 8004f98:	f1c0 0320 	rsb	r3, r0, #32
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	dd7f      	ble.n	80050a0 <_dtoa_r+0x918>
 8004fa0:	f1c0 001c 	rsb	r0, r0, #28
 8004fa4:	9b04      	ldr	r3, [sp, #16]
 8004fa6:	4403      	add	r3, r0
 8004fa8:	4480      	add	r8, r0
 8004faa:	4405      	add	r5, r0
 8004fac:	9304      	str	r3, [sp, #16]
 8004fae:	f1b8 0f00 	cmp.w	r8, #0
 8004fb2:	dd05      	ble.n	8004fc0 <_dtoa_r+0x838>
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	4642      	mov	r2, r8
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f000 fbfd 	bl	80057b8 <__lshift>
 8004fbe:	4683      	mov	fp, r0
 8004fc0:	9b04      	ldr	r3, [sp, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	dd05      	ble.n	8004fd2 <_dtoa_r+0x84a>
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f000 fbf4 	bl	80057b8 <__lshift>
 8004fd0:	4606      	mov	r6, r0
 8004fd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d069      	beq.n	80050ac <_dtoa_r+0x924>
 8004fd8:	4631      	mov	r1, r6
 8004fda:	4658      	mov	r0, fp
 8004fdc:	f000 fc58 	bl	8005890 <__mcmp>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	da63      	bge.n	80050ac <_dtoa_r+0x924>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4659      	mov	r1, fp
 8004fe8:	220a      	movs	r2, #10
 8004fea:	4620      	mov	r0, r4
 8004fec:	f000 fa34 	bl	8005458 <__multadd>
 8004ff0:	9b08      	ldr	r3, [sp, #32]
 8004ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ff6:	4683      	mov	fp, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 818f 	beq.w	800531c <_dtoa_r+0xb94>
 8004ffe:	4639      	mov	r1, r7
 8005000:	2300      	movs	r3, #0
 8005002:	220a      	movs	r2, #10
 8005004:	4620      	mov	r0, r4
 8005006:	f000 fa27 	bl	8005458 <__multadd>
 800500a:	f1b9 0f00 	cmp.w	r9, #0
 800500e:	4607      	mov	r7, r0
 8005010:	f300 808e 	bgt.w	8005130 <_dtoa_r+0x9a8>
 8005014:	9b05      	ldr	r3, [sp, #20]
 8005016:	2b02      	cmp	r3, #2
 8005018:	dc50      	bgt.n	80050bc <_dtoa_r+0x934>
 800501a:	e089      	b.n	8005130 <_dtoa_r+0x9a8>
 800501c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800501e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005022:	e75d      	b.n	8004ee0 <_dtoa_r+0x758>
 8005024:	9b01      	ldr	r3, [sp, #4]
 8005026:	1e5e      	subs	r6, r3, #1
 8005028:	9b06      	ldr	r3, [sp, #24]
 800502a:	42b3      	cmp	r3, r6
 800502c:	bfbf      	itttt	lt
 800502e:	9b06      	ldrlt	r3, [sp, #24]
 8005030:	9606      	strlt	r6, [sp, #24]
 8005032:	1af2      	sublt	r2, r6, r3
 8005034:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005036:	bfb6      	itet	lt
 8005038:	189b      	addlt	r3, r3, r2
 800503a:	1b9e      	subge	r6, r3, r6
 800503c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800503e:	9b01      	ldr	r3, [sp, #4]
 8005040:	bfb8      	it	lt
 8005042:	2600      	movlt	r6, #0
 8005044:	2b00      	cmp	r3, #0
 8005046:	bfb5      	itete	lt
 8005048:	eba8 0503 	sublt.w	r5, r8, r3
 800504c:	9b01      	ldrge	r3, [sp, #4]
 800504e:	2300      	movlt	r3, #0
 8005050:	4645      	movge	r5, r8
 8005052:	e747      	b.n	8004ee4 <_dtoa_r+0x75c>
 8005054:	9e06      	ldr	r6, [sp, #24]
 8005056:	9f08      	ldr	r7, [sp, #32]
 8005058:	4645      	mov	r5, r8
 800505a:	e74c      	b.n	8004ef6 <_dtoa_r+0x76e>
 800505c:	9a06      	ldr	r2, [sp, #24]
 800505e:	e775      	b.n	8004f4c <_dtoa_r+0x7c4>
 8005060:	9b05      	ldr	r3, [sp, #20]
 8005062:	2b01      	cmp	r3, #1
 8005064:	dc18      	bgt.n	8005098 <_dtoa_r+0x910>
 8005066:	9b02      	ldr	r3, [sp, #8]
 8005068:	b9b3      	cbnz	r3, 8005098 <_dtoa_r+0x910>
 800506a:	9b03      	ldr	r3, [sp, #12]
 800506c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005070:	b9a3      	cbnz	r3, 800509c <_dtoa_r+0x914>
 8005072:	9b03      	ldr	r3, [sp, #12]
 8005074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005078:	0d1b      	lsrs	r3, r3, #20
 800507a:	051b      	lsls	r3, r3, #20
 800507c:	b12b      	cbz	r3, 800508a <_dtoa_r+0x902>
 800507e:	9b04      	ldr	r3, [sp, #16]
 8005080:	3301      	adds	r3, #1
 8005082:	9304      	str	r3, [sp, #16]
 8005084:	f108 0801 	add.w	r8, r8, #1
 8005088:	2301      	movs	r3, #1
 800508a:	9306      	str	r3, [sp, #24]
 800508c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800508e:	2b00      	cmp	r3, #0
 8005090:	f47f af74 	bne.w	8004f7c <_dtoa_r+0x7f4>
 8005094:	2001      	movs	r0, #1
 8005096:	e779      	b.n	8004f8c <_dtoa_r+0x804>
 8005098:	2300      	movs	r3, #0
 800509a:	e7f6      	b.n	800508a <_dtoa_r+0x902>
 800509c:	9b02      	ldr	r3, [sp, #8]
 800509e:	e7f4      	b.n	800508a <_dtoa_r+0x902>
 80050a0:	d085      	beq.n	8004fae <_dtoa_r+0x826>
 80050a2:	4618      	mov	r0, r3
 80050a4:	301c      	adds	r0, #28
 80050a6:	e77d      	b.n	8004fa4 <_dtoa_r+0x81c>
 80050a8:	40240000 	.word	0x40240000
 80050ac:	9b01      	ldr	r3, [sp, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	dc38      	bgt.n	8005124 <_dtoa_r+0x99c>
 80050b2:	9b05      	ldr	r3, [sp, #20]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	dd35      	ble.n	8005124 <_dtoa_r+0x99c>
 80050b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80050bc:	f1b9 0f00 	cmp.w	r9, #0
 80050c0:	d10d      	bne.n	80050de <_dtoa_r+0x956>
 80050c2:	4631      	mov	r1, r6
 80050c4:	464b      	mov	r3, r9
 80050c6:	2205      	movs	r2, #5
 80050c8:	4620      	mov	r0, r4
 80050ca:	f000 f9c5 	bl	8005458 <__multadd>
 80050ce:	4601      	mov	r1, r0
 80050d0:	4606      	mov	r6, r0
 80050d2:	4658      	mov	r0, fp
 80050d4:	f000 fbdc 	bl	8005890 <__mcmp>
 80050d8:	2800      	cmp	r0, #0
 80050da:	f73f adbd 	bgt.w	8004c58 <_dtoa_r+0x4d0>
 80050de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050e0:	9d00      	ldr	r5, [sp, #0]
 80050e2:	ea6f 0a03 	mvn.w	sl, r3
 80050e6:	f04f 0800 	mov.w	r8, #0
 80050ea:	4631      	mov	r1, r6
 80050ec:	4620      	mov	r0, r4
 80050ee:	f000 f991 	bl	8005414 <_Bfree>
 80050f2:	2f00      	cmp	r7, #0
 80050f4:	f43f aeb4 	beq.w	8004e60 <_dtoa_r+0x6d8>
 80050f8:	f1b8 0f00 	cmp.w	r8, #0
 80050fc:	d005      	beq.n	800510a <_dtoa_r+0x982>
 80050fe:	45b8      	cmp	r8, r7
 8005100:	d003      	beq.n	800510a <_dtoa_r+0x982>
 8005102:	4641      	mov	r1, r8
 8005104:	4620      	mov	r0, r4
 8005106:	f000 f985 	bl	8005414 <_Bfree>
 800510a:	4639      	mov	r1, r7
 800510c:	4620      	mov	r0, r4
 800510e:	f000 f981 	bl	8005414 <_Bfree>
 8005112:	e6a5      	b.n	8004e60 <_dtoa_r+0x6d8>
 8005114:	2600      	movs	r6, #0
 8005116:	4637      	mov	r7, r6
 8005118:	e7e1      	b.n	80050de <_dtoa_r+0x956>
 800511a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800511c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005120:	4637      	mov	r7, r6
 8005122:	e599      	b.n	8004c58 <_dtoa_r+0x4d0>
 8005124:	9b08      	ldr	r3, [sp, #32]
 8005126:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 80fd 	beq.w	800532a <_dtoa_r+0xba2>
 8005130:	2d00      	cmp	r5, #0
 8005132:	dd05      	ble.n	8005140 <_dtoa_r+0x9b8>
 8005134:	4639      	mov	r1, r7
 8005136:	462a      	mov	r2, r5
 8005138:	4620      	mov	r0, r4
 800513a:	f000 fb3d 	bl	80057b8 <__lshift>
 800513e:	4607      	mov	r7, r0
 8005140:	9b06      	ldr	r3, [sp, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d05c      	beq.n	8005200 <_dtoa_r+0xa78>
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	4620      	mov	r0, r4
 800514a:	f000 f923 	bl	8005394 <_Balloc>
 800514e:	4605      	mov	r5, r0
 8005150:	b928      	cbnz	r0, 800515e <_dtoa_r+0x9d6>
 8005152:	4b80      	ldr	r3, [pc, #512]	; (8005354 <_dtoa_r+0xbcc>)
 8005154:	4602      	mov	r2, r0
 8005156:	f240 21ea 	movw	r1, #746	; 0x2ea
 800515a:	f7ff bb2e 	b.w	80047ba <_dtoa_r+0x32>
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	3202      	adds	r2, #2
 8005162:	0092      	lsls	r2, r2, #2
 8005164:	f107 010c 	add.w	r1, r7, #12
 8005168:	300c      	adds	r0, #12
 800516a:	f000 f905 	bl	8005378 <memcpy>
 800516e:	2201      	movs	r2, #1
 8005170:	4629      	mov	r1, r5
 8005172:	4620      	mov	r0, r4
 8005174:	f000 fb20 	bl	80057b8 <__lshift>
 8005178:	9b00      	ldr	r3, [sp, #0]
 800517a:	3301      	adds	r3, #1
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	9b00      	ldr	r3, [sp, #0]
 8005180:	444b      	add	r3, r9
 8005182:	9307      	str	r3, [sp, #28]
 8005184:	9b02      	ldr	r3, [sp, #8]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	46b8      	mov	r8, r7
 800518c:	9306      	str	r3, [sp, #24]
 800518e:	4607      	mov	r7, r0
 8005190:	9b01      	ldr	r3, [sp, #4]
 8005192:	4631      	mov	r1, r6
 8005194:	3b01      	subs	r3, #1
 8005196:	4658      	mov	r0, fp
 8005198:	9302      	str	r3, [sp, #8]
 800519a:	f7ff fa69 	bl	8004670 <quorem>
 800519e:	4603      	mov	r3, r0
 80051a0:	3330      	adds	r3, #48	; 0x30
 80051a2:	9004      	str	r0, [sp, #16]
 80051a4:	4641      	mov	r1, r8
 80051a6:	4658      	mov	r0, fp
 80051a8:	9308      	str	r3, [sp, #32]
 80051aa:	f000 fb71 	bl	8005890 <__mcmp>
 80051ae:	463a      	mov	r2, r7
 80051b0:	4681      	mov	r9, r0
 80051b2:	4631      	mov	r1, r6
 80051b4:	4620      	mov	r0, r4
 80051b6:	f000 fb87 	bl	80058c8 <__mdiff>
 80051ba:	68c2      	ldr	r2, [r0, #12]
 80051bc:	9b08      	ldr	r3, [sp, #32]
 80051be:	4605      	mov	r5, r0
 80051c0:	bb02      	cbnz	r2, 8005204 <_dtoa_r+0xa7c>
 80051c2:	4601      	mov	r1, r0
 80051c4:	4658      	mov	r0, fp
 80051c6:	f000 fb63 	bl	8005890 <__mcmp>
 80051ca:	9b08      	ldr	r3, [sp, #32]
 80051cc:	4602      	mov	r2, r0
 80051ce:	4629      	mov	r1, r5
 80051d0:	4620      	mov	r0, r4
 80051d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80051d6:	f000 f91d 	bl	8005414 <_Bfree>
 80051da:	9b05      	ldr	r3, [sp, #20]
 80051dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051de:	9d01      	ldr	r5, [sp, #4]
 80051e0:	ea43 0102 	orr.w	r1, r3, r2
 80051e4:	9b06      	ldr	r3, [sp, #24]
 80051e6:	430b      	orrs	r3, r1
 80051e8:	9b08      	ldr	r3, [sp, #32]
 80051ea:	d10d      	bne.n	8005208 <_dtoa_r+0xa80>
 80051ec:	2b39      	cmp	r3, #57	; 0x39
 80051ee:	d029      	beq.n	8005244 <_dtoa_r+0xabc>
 80051f0:	f1b9 0f00 	cmp.w	r9, #0
 80051f4:	dd01      	ble.n	80051fa <_dtoa_r+0xa72>
 80051f6:	9b04      	ldr	r3, [sp, #16]
 80051f8:	3331      	adds	r3, #49	; 0x31
 80051fa:	9a02      	ldr	r2, [sp, #8]
 80051fc:	7013      	strb	r3, [r2, #0]
 80051fe:	e774      	b.n	80050ea <_dtoa_r+0x962>
 8005200:	4638      	mov	r0, r7
 8005202:	e7b9      	b.n	8005178 <_dtoa_r+0x9f0>
 8005204:	2201      	movs	r2, #1
 8005206:	e7e2      	b.n	80051ce <_dtoa_r+0xa46>
 8005208:	f1b9 0f00 	cmp.w	r9, #0
 800520c:	db06      	blt.n	800521c <_dtoa_r+0xa94>
 800520e:	9905      	ldr	r1, [sp, #20]
 8005210:	ea41 0909 	orr.w	r9, r1, r9
 8005214:	9906      	ldr	r1, [sp, #24]
 8005216:	ea59 0101 	orrs.w	r1, r9, r1
 800521a:	d120      	bne.n	800525e <_dtoa_r+0xad6>
 800521c:	2a00      	cmp	r2, #0
 800521e:	ddec      	ble.n	80051fa <_dtoa_r+0xa72>
 8005220:	4659      	mov	r1, fp
 8005222:	2201      	movs	r2, #1
 8005224:	4620      	mov	r0, r4
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	f000 fac6 	bl	80057b8 <__lshift>
 800522c:	4631      	mov	r1, r6
 800522e:	4683      	mov	fp, r0
 8005230:	f000 fb2e 	bl	8005890 <__mcmp>
 8005234:	2800      	cmp	r0, #0
 8005236:	9b01      	ldr	r3, [sp, #4]
 8005238:	dc02      	bgt.n	8005240 <_dtoa_r+0xab8>
 800523a:	d1de      	bne.n	80051fa <_dtoa_r+0xa72>
 800523c:	07da      	lsls	r2, r3, #31
 800523e:	d5dc      	bpl.n	80051fa <_dtoa_r+0xa72>
 8005240:	2b39      	cmp	r3, #57	; 0x39
 8005242:	d1d8      	bne.n	80051f6 <_dtoa_r+0xa6e>
 8005244:	9a02      	ldr	r2, [sp, #8]
 8005246:	2339      	movs	r3, #57	; 0x39
 8005248:	7013      	strb	r3, [r2, #0]
 800524a:	462b      	mov	r3, r5
 800524c:	461d      	mov	r5, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005254:	2a39      	cmp	r2, #57	; 0x39
 8005256:	d050      	beq.n	80052fa <_dtoa_r+0xb72>
 8005258:	3201      	adds	r2, #1
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e745      	b.n	80050ea <_dtoa_r+0x962>
 800525e:	2a00      	cmp	r2, #0
 8005260:	dd03      	ble.n	800526a <_dtoa_r+0xae2>
 8005262:	2b39      	cmp	r3, #57	; 0x39
 8005264:	d0ee      	beq.n	8005244 <_dtoa_r+0xabc>
 8005266:	3301      	adds	r3, #1
 8005268:	e7c7      	b.n	80051fa <_dtoa_r+0xa72>
 800526a:	9a01      	ldr	r2, [sp, #4]
 800526c:	9907      	ldr	r1, [sp, #28]
 800526e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005272:	428a      	cmp	r2, r1
 8005274:	d02a      	beq.n	80052cc <_dtoa_r+0xb44>
 8005276:	4659      	mov	r1, fp
 8005278:	2300      	movs	r3, #0
 800527a:	220a      	movs	r2, #10
 800527c:	4620      	mov	r0, r4
 800527e:	f000 f8eb 	bl	8005458 <__multadd>
 8005282:	45b8      	cmp	r8, r7
 8005284:	4683      	mov	fp, r0
 8005286:	f04f 0300 	mov.w	r3, #0
 800528a:	f04f 020a 	mov.w	r2, #10
 800528e:	4641      	mov	r1, r8
 8005290:	4620      	mov	r0, r4
 8005292:	d107      	bne.n	80052a4 <_dtoa_r+0xb1c>
 8005294:	f000 f8e0 	bl	8005458 <__multadd>
 8005298:	4680      	mov	r8, r0
 800529a:	4607      	mov	r7, r0
 800529c:	9b01      	ldr	r3, [sp, #4]
 800529e:	3301      	adds	r3, #1
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	e775      	b.n	8005190 <_dtoa_r+0xa08>
 80052a4:	f000 f8d8 	bl	8005458 <__multadd>
 80052a8:	4639      	mov	r1, r7
 80052aa:	4680      	mov	r8, r0
 80052ac:	2300      	movs	r3, #0
 80052ae:	220a      	movs	r2, #10
 80052b0:	4620      	mov	r0, r4
 80052b2:	f000 f8d1 	bl	8005458 <__multadd>
 80052b6:	4607      	mov	r7, r0
 80052b8:	e7f0      	b.n	800529c <_dtoa_r+0xb14>
 80052ba:	f1b9 0f00 	cmp.w	r9, #0
 80052be:	9a00      	ldr	r2, [sp, #0]
 80052c0:	bfcc      	ite	gt
 80052c2:	464d      	movgt	r5, r9
 80052c4:	2501      	movle	r5, #1
 80052c6:	4415      	add	r5, r2
 80052c8:	f04f 0800 	mov.w	r8, #0
 80052cc:	4659      	mov	r1, fp
 80052ce:	2201      	movs	r2, #1
 80052d0:	4620      	mov	r0, r4
 80052d2:	9301      	str	r3, [sp, #4]
 80052d4:	f000 fa70 	bl	80057b8 <__lshift>
 80052d8:	4631      	mov	r1, r6
 80052da:	4683      	mov	fp, r0
 80052dc:	f000 fad8 	bl	8005890 <__mcmp>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	dcb2      	bgt.n	800524a <_dtoa_r+0xac2>
 80052e4:	d102      	bne.n	80052ec <_dtoa_r+0xb64>
 80052e6:	9b01      	ldr	r3, [sp, #4]
 80052e8:	07db      	lsls	r3, r3, #31
 80052ea:	d4ae      	bmi.n	800524a <_dtoa_r+0xac2>
 80052ec:	462b      	mov	r3, r5
 80052ee:	461d      	mov	r5, r3
 80052f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052f4:	2a30      	cmp	r2, #48	; 0x30
 80052f6:	d0fa      	beq.n	80052ee <_dtoa_r+0xb66>
 80052f8:	e6f7      	b.n	80050ea <_dtoa_r+0x962>
 80052fa:	9a00      	ldr	r2, [sp, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d1a5      	bne.n	800524c <_dtoa_r+0xac4>
 8005300:	f10a 0a01 	add.w	sl, sl, #1
 8005304:	2331      	movs	r3, #49	; 0x31
 8005306:	e779      	b.n	80051fc <_dtoa_r+0xa74>
 8005308:	4b13      	ldr	r3, [pc, #76]	; (8005358 <_dtoa_r+0xbd0>)
 800530a:	f7ff baaf 	b.w	800486c <_dtoa_r+0xe4>
 800530e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005310:	2b00      	cmp	r3, #0
 8005312:	f47f aa86 	bne.w	8004822 <_dtoa_r+0x9a>
 8005316:	4b11      	ldr	r3, [pc, #68]	; (800535c <_dtoa_r+0xbd4>)
 8005318:	f7ff baa8 	b.w	800486c <_dtoa_r+0xe4>
 800531c:	f1b9 0f00 	cmp.w	r9, #0
 8005320:	dc03      	bgt.n	800532a <_dtoa_r+0xba2>
 8005322:	9b05      	ldr	r3, [sp, #20]
 8005324:	2b02      	cmp	r3, #2
 8005326:	f73f aec9 	bgt.w	80050bc <_dtoa_r+0x934>
 800532a:	9d00      	ldr	r5, [sp, #0]
 800532c:	4631      	mov	r1, r6
 800532e:	4658      	mov	r0, fp
 8005330:	f7ff f99e 	bl	8004670 <quorem>
 8005334:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005338:	f805 3b01 	strb.w	r3, [r5], #1
 800533c:	9a00      	ldr	r2, [sp, #0]
 800533e:	1aaa      	subs	r2, r5, r2
 8005340:	4591      	cmp	r9, r2
 8005342:	ddba      	ble.n	80052ba <_dtoa_r+0xb32>
 8005344:	4659      	mov	r1, fp
 8005346:	2300      	movs	r3, #0
 8005348:	220a      	movs	r2, #10
 800534a:	4620      	mov	r0, r4
 800534c:	f000 f884 	bl	8005458 <__multadd>
 8005350:	4683      	mov	fp, r0
 8005352:	e7eb      	b.n	800532c <_dtoa_r+0xba4>
 8005354:	08007013 	.word	0x08007013
 8005358:	08006f6c 	.word	0x08006f6c
 800535c:	08006f90 	.word	0x08006f90

08005360 <_localeconv_r>:
 8005360:	4800      	ldr	r0, [pc, #0]	; (8005364 <_localeconv_r+0x4>)
 8005362:	4770      	bx	lr
 8005364:	200001a4 	.word	0x200001a4

08005368 <malloc>:
 8005368:	4b02      	ldr	r3, [pc, #8]	; (8005374 <malloc+0xc>)
 800536a:	4601      	mov	r1, r0
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	f000 bbef 	b.w	8005b50 <_malloc_r>
 8005372:	bf00      	nop
 8005374:	20000050 	.word	0x20000050

08005378 <memcpy>:
 8005378:	440a      	add	r2, r1
 800537a:	4291      	cmp	r1, r2
 800537c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005380:	d100      	bne.n	8005384 <memcpy+0xc>
 8005382:	4770      	bx	lr
 8005384:	b510      	push	{r4, lr}
 8005386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800538a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800538e:	4291      	cmp	r1, r2
 8005390:	d1f9      	bne.n	8005386 <memcpy+0xe>
 8005392:	bd10      	pop	{r4, pc}

08005394 <_Balloc>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005398:	4604      	mov	r4, r0
 800539a:	460d      	mov	r5, r1
 800539c:	b976      	cbnz	r6, 80053bc <_Balloc+0x28>
 800539e:	2010      	movs	r0, #16
 80053a0:	f7ff ffe2 	bl	8005368 <malloc>
 80053a4:	4602      	mov	r2, r0
 80053a6:	6260      	str	r0, [r4, #36]	; 0x24
 80053a8:	b920      	cbnz	r0, 80053b4 <_Balloc+0x20>
 80053aa:	4b18      	ldr	r3, [pc, #96]	; (800540c <_Balloc+0x78>)
 80053ac:	4818      	ldr	r0, [pc, #96]	; (8005410 <_Balloc+0x7c>)
 80053ae:	2166      	movs	r1, #102	; 0x66
 80053b0:	f000 fd94 	bl	8005edc <__assert_func>
 80053b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053b8:	6006      	str	r6, [r0, #0]
 80053ba:	60c6      	str	r6, [r0, #12]
 80053bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80053be:	68f3      	ldr	r3, [r6, #12]
 80053c0:	b183      	cbz	r3, 80053e4 <_Balloc+0x50>
 80053c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80053ca:	b9b8      	cbnz	r0, 80053fc <_Balloc+0x68>
 80053cc:	2101      	movs	r1, #1
 80053ce:	fa01 f605 	lsl.w	r6, r1, r5
 80053d2:	1d72      	adds	r2, r6, #5
 80053d4:	0092      	lsls	r2, r2, #2
 80053d6:	4620      	mov	r0, r4
 80053d8:	f000 fb5a 	bl	8005a90 <_calloc_r>
 80053dc:	b160      	cbz	r0, 80053f8 <_Balloc+0x64>
 80053de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80053e2:	e00e      	b.n	8005402 <_Balloc+0x6e>
 80053e4:	2221      	movs	r2, #33	; 0x21
 80053e6:	2104      	movs	r1, #4
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 fb51 	bl	8005a90 <_calloc_r>
 80053ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053f0:	60f0      	str	r0, [r6, #12]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1e4      	bne.n	80053c2 <_Balloc+0x2e>
 80053f8:	2000      	movs	r0, #0
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	6802      	ldr	r2, [r0, #0]
 80053fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005402:	2300      	movs	r3, #0
 8005404:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005408:	e7f7      	b.n	80053fa <_Balloc+0x66>
 800540a:	bf00      	nop
 800540c:	08006f9d 	.word	0x08006f9d
 8005410:	08007024 	.word	0x08007024

08005414 <_Bfree>:
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005418:	4605      	mov	r5, r0
 800541a:	460c      	mov	r4, r1
 800541c:	b976      	cbnz	r6, 800543c <_Bfree+0x28>
 800541e:	2010      	movs	r0, #16
 8005420:	f7ff ffa2 	bl	8005368 <malloc>
 8005424:	4602      	mov	r2, r0
 8005426:	6268      	str	r0, [r5, #36]	; 0x24
 8005428:	b920      	cbnz	r0, 8005434 <_Bfree+0x20>
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <_Bfree+0x3c>)
 800542c:	4809      	ldr	r0, [pc, #36]	; (8005454 <_Bfree+0x40>)
 800542e:	218a      	movs	r1, #138	; 0x8a
 8005430:	f000 fd54 	bl	8005edc <__assert_func>
 8005434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005438:	6006      	str	r6, [r0, #0]
 800543a:	60c6      	str	r6, [r0, #12]
 800543c:	b13c      	cbz	r4, 800544e <_Bfree+0x3a>
 800543e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005440:	6862      	ldr	r2, [r4, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005448:	6021      	str	r1, [r4, #0]
 800544a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	08006f9d 	.word	0x08006f9d
 8005454:	08007024 	.word	0x08007024

08005458 <__multadd>:
 8005458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545c:	690e      	ldr	r6, [r1, #16]
 800545e:	4607      	mov	r7, r0
 8005460:	4698      	mov	r8, r3
 8005462:	460c      	mov	r4, r1
 8005464:	f101 0014 	add.w	r0, r1, #20
 8005468:	2300      	movs	r3, #0
 800546a:	6805      	ldr	r5, [r0, #0]
 800546c:	b2a9      	uxth	r1, r5
 800546e:	fb02 8101 	mla	r1, r2, r1, r8
 8005472:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005476:	0c2d      	lsrs	r5, r5, #16
 8005478:	fb02 c505 	mla	r5, r2, r5, ip
 800547c:	b289      	uxth	r1, r1
 800547e:	3301      	adds	r3, #1
 8005480:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005484:	429e      	cmp	r6, r3
 8005486:	f840 1b04 	str.w	r1, [r0], #4
 800548a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800548e:	dcec      	bgt.n	800546a <__multadd+0x12>
 8005490:	f1b8 0f00 	cmp.w	r8, #0
 8005494:	d022      	beq.n	80054dc <__multadd+0x84>
 8005496:	68a3      	ldr	r3, [r4, #8]
 8005498:	42b3      	cmp	r3, r6
 800549a:	dc19      	bgt.n	80054d0 <__multadd+0x78>
 800549c:	6861      	ldr	r1, [r4, #4]
 800549e:	4638      	mov	r0, r7
 80054a0:	3101      	adds	r1, #1
 80054a2:	f7ff ff77 	bl	8005394 <_Balloc>
 80054a6:	4605      	mov	r5, r0
 80054a8:	b928      	cbnz	r0, 80054b6 <__multadd+0x5e>
 80054aa:	4602      	mov	r2, r0
 80054ac:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <__multadd+0x8c>)
 80054ae:	480e      	ldr	r0, [pc, #56]	; (80054e8 <__multadd+0x90>)
 80054b0:	21b5      	movs	r1, #181	; 0xb5
 80054b2:	f000 fd13 	bl	8005edc <__assert_func>
 80054b6:	6922      	ldr	r2, [r4, #16]
 80054b8:	3202      	adds	r2, #2
 80054ba:	f104 010c 	add.w	r1, r4, #12
 80054be:	0092      	lsls	r2, r2, #2
 80054c0:	300c      	adds	r0, #12
 80054c2:	f7ff ff59 	bl	8005378 <memcpy>
 80054c6:	4621      	mov	r1, r4
 80054c8:	4638      	mov	r0, r7
 80054ca:	f7ff ffa3 	bl	8005414 <_Bfree>
 80054ce:	462c      	mov	r4, r5
 80054d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80054d4:	3601      	adds	r6, #1
 80054d6:	f8c3 8014 	str.w	r8, [r3, #20]
 80054da:	6126      	str	r6, [r4, #16]
 80054dc:	4620      	mov	r0, r4
 80054de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054e2:	bf00      	nop
 80054e4:	08007013 	.word	0x08007013
 80054e8:	08007024 	.word	0x08007024

080054ec <__hi0bits>:
 80054ec:	0c03      	lsrs	r3, r0, #16
 80054ee:	041b      	lsls	r3, r3, #16
 80054f0:	b9d3      	cbnz	r3, 8005528 <__hi0bits+0x3c>
 80054f2:	0400      	lsls	r0, r0, #16
 80054f4:	2310      	movs	r3, #16
 80054f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80054fa:	bf04      	itt	eq
 80054fc:	0200      	lsleq	r0, r0, #8
 80054fe:	3308      	addeq	r3, #8
 8005500:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005504:	bf04      	itt	eq
 8005506:	0100      	lsleq	r0, r0, #4
 8005508:	3304      	addeq	r3, #4
 800550a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800550e:	bf04      	itt	eq
 8005510:	0080      	lsleq	r0, r0, #2
 8005512:	3302      	addeq	r3, #2
 8005514:	2800      	cmp	r0, #0
 8005516:	db05      	blt.n	8005524 <__hi0bits+0x38>
 8005518:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800551c:	f103 0301 	add.w	r3, r3, #1
 8005520:	bf08      	it	eq
 8005522:	2320      	moveq	r3, #32
 8005524:	4618      	mov	r0, r3
 8005526:	4770      	bx	lr
 8005528:	2300      	movs	r3, #0
 800552a:	e7e4      	b.n	80054f6 <__hi0bits+0xa>

0800552c <__lo0bits>:
 800552c:	6803      	ldr	r3, [r0, #0]
 800552e:	f013 0207 	ands.w	r2, r3, #7
 8005532:	4601      	mov	r1, r0
 8005534:	d00b      	beq.n	800554e <__lo0bits+0x22>
 8005536:	07da      	lsls	r2, r3, #31
 8005538:	d424      	bmi.n	8005584 <__lo0bits+0x58>
 800553a:	0798      	lsls	r0, r3, #30
 800553c:	bf49      	itett	mi
 800553e:	085b      	lsrmi	r3, r3, #1
 8005540:	089b      	lsrpl	r3, r3, #2
 8005542:	2001      	movmi	r0, #1
 8005544:	600b      	strmi	r3, [r1, #0]
 8005546:	bf5c      	itt	pl
 8005548:	600b      	strpl	r3, [r1, #0]
 800554a:	2002      	movpl	r0, #2
 800554c:	4770      	bx	lr
 800554e:	b298      	uxth	r0, r3
 8005550:	b9b0      	cbnz	r0, 8005580 <__lo0bits+0x54>
 8005552:	0c1b      	lsrs	r3, r3, #16
 8005554:	2010      	movs	r0, #16
 8005556:	f013 0fff 	tst.w	r3, #255	; 0xff
 800555a:	bf04      	itt	eq
 800555c:	0a1b      	lsreq	r3, r3, #8
 800555e:	3008      	addeq	r0, #8
 8005560:	071a      	lsls	r2, r3, #28
 8005562:	bf04      	itt	eq
 8005564:	091b      	lsreq	r3, r3, #4
 8005566:	3004      	addeq	r0, #4
 8005568:	079a      	lsls	r2, r3, #30
 800556a:	bf04      	itt	eq
 800556c:	089b      	lsreq	r3, r3, #2
 800556e:	3002      	addeq	r0, #2
 8005570:	07da      	lsls	r2, r3, #31
 8005572:	d403      	bmi.n	800557c <__lo0bits+0x50>
 8005574:	085b      	lsrs	r3, r3, #1
 8005576:	f100 0001 	add.w	r0, r0, #1
 800557a:	d005      	beq.n	8005588 <__lo0bits+0x5c>
 800557c:	600b      	str	r3, [r1, #0]
 800557e:	4770      	bx	lr
 8005580:	4610      	mov	r0, r2
 8005582:	e7e8      	b.n	8005556 <__lo0bits+0x2a>
 8005584:	2000      	movs	r0, #0
 8005586:	4770      	bx	lr
 8005588:	2020      	movs	r0, #32
 800558a:	4770      	bx	lr

0800558c <__i2b>:
 800558c:	b510      	push	{r4, lr}
 800558e:	460c      	mov	r4, r1
 8005590:	2101      	movs	r1, #1
 8005592:	f7ff feff 	bl	8005394 <_Balloc>
 8005596:	4602      	mov	r2, r0
 8005598:	b928      	cbnz	r0, 80055a6 <__i2b+0x1a>
 800559a:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <__i2b+0x24>)
 800559c:	4805      	ldr	r0, [pc, #20]	; (80055b4 <__i2b+0x28>)
 800559e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80055a2:	f000 fc9b 	bl	8005edc <__assert_func>
 80055a6:	2301      	movs	r3, #1
 80055a8:	6144      	str	r4, [r0, #20]
 80055aa:	6103      	str	r3, [r0, #16]
 80055ac:	bd10      	pop	{r4, pc}
 80055ae:	bf00      	nop
 80055b0:	08007013 	.word	0x08007013
 80055b4:	08007024 	.word	0x08007024

080055b8 <__multiply>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	4614      	mov	r4, r2
 80055be:	690a      	ldr	r2, [r1, #16]
 80055c0:	6923      	ldr	r3, [r4, #16]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	bfb8      	it	lt
 80055c6:	460b      	movlt	r3, r1
 80055c8:	460d      	mov	r5, r1
 80055ca:	bfbc      	itt	lt
 80055cc:	4625      	movlt	r5, r4
 80055ce:	461c      	movlt	r4, r3
 80055d0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80055d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80055d8:	68ab      	ldr	r3, [r5, #8]
 80055da:	6869      	ldr	r1, [r5, #4]
 80055dc:	eb0a 0709 	add.w	r7, sl, r9
 80055e0:	42bb      	cmp	r3, r7
 80055e2:	b085      	sub	sp, #20
 80055e4:	bfb8      	it	lt
 80055e6:	3101      	addlt	r1, #1
 80055e8:	f7ff fed4 	bl	8005394 <_Balloc>
 80055ec:	b930      	cbnz	r0, 80055fc <__multiply+0x44>
 80055ee:	4602      	mov	r2, r0
 80055f0:	4b42      	ldr	r3, [pc, #264]	; (80056fc <__multiply+0x144>)
 80055f2:	4843      	ldr	r0, [pc, #268]	; (8005700 <__multiply+0x148>)
 80055f4:	f240 115d 	movw	r1, #349	; 0x15d
 80055f8:	f000 fc70 	bl	8005edc <__assert_func>
 80055fc:	f100 0614 	add.w	r6, r0, #20
 8005600:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005604:	4633      	mov	r3, r6
 8005606:	2200      	movs	r2, #0
 8005608:	4543      	cmp	r3, r8
 800560a:	d31e      	bcc.n	800564a <__multiply+0x92>
 800560c:	f105 0c14 	add.w	ip, r5, #20
 8005610:	f104 0314 	add.w	r3, r4, #20
 8005614:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005618:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800561c:	9202      	str	r2, [sp, #8]
 800561e:	ebac 0205 	sub.w	r2, ip, r5
 8005622:	3a15      	subs	r2, #21
 8005624:	f022 0203 	bic.w	r2, r2, #3
 8005628:	3204      	adds	r2, #4
 800562a:	f105 0115 	add.w	r1, r5, #21
 800562e:	458c      	cmp	ip, r1
 8005630:	bf38      	it	cc
 8005632:	2204      	movcc	r2, #4
 8005634:	9201      	str	r2, [sp, #4]
 8005636:	9a02      	ldr	r2, [sp, #8]
 8005638:	9303      	str	r3, [sp, #12]
 800563a:	429a      	cmp	r2, r3
 800563c:	d808      	bhi.n	8005650 <__multiply+0x98>
 800563e:	2f00      	cmp	r7, #0
 8005640:	dc55      	bgt.n	80056ee <__multiply+0x136>
 8005642:	6107      	str	r7, [r0, #16]
 8005644:	b005      	add	sp, #20
 8005646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800564a:	f843 2b04 	str.w	r2, [r3], #4
 800564e:	e7db      	b.n	8005608 <__multiply+0x50>
 8005650:	f8b3 a000 	ldrh.w	sl, [r3]
 8005654:	f1ba 0f00 	cmp.w	sl, #0
 8005658:	d020      	beq.n	800569c <__multiply+0xe4>
 800565a:	f105 0e14 	add.w	lr, r5, #20
 800565e:	46b1      	mov	r9, r6
 8005660:	2200      	movs	r2, #0
 8005662:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005666:	f8d9 b000 	ldr.w	fp, [r9]
 800566a:	b2a1      	uxth	r1, r4
 800566c:	fa1f fb8b 	uxth.w	fp, fp
 8005670:	fb0a b101 	mla	r1, sl, r1, fp
 8005674:	4411      	add	r1, r2
 8005676:	f8d9 2000 	ldr.w	r2, [r9]
 800567a:	0c24      	lsrs	r4, r4, #16
 800567c:	0c12      	lsrs	r2, r2, #16
 800567e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005682:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005686:	b289      	uxth	r1, r1
 8005688:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800568c:	45f4      	cmp	ip, lr
 800568e:	f849 1b04 	str.w	r1, [r9], #4
 8005692:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005696:	d8e4      	bhi.n	8005662 <__multiply+0xaa>
 8005698:	9901      	ldr	r1, [sp, #4]
 800569a:	5072      	str	r2, [r6, r1]
 800569c:	9a03      	ldr	r2, [sp, #12]
 800569e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80056a2:	3304      	adds	r3, #4
 80056a4:	f1b9 0f00 	cmp.w	r9, #0
 80056a8:	d01f      	beq.n	80056ea <__multiply+0x132>
 80056aa:	6834      	ldr	r4, [r6, #0]
 80056ac:	f105 0114 	add.w	r1, r5, #20
 80056b0:	46b6      	mov	lr, r6
 80056b2:	f04f 0a00 	mov.w	sl, #0
 80056b6:	880a      	ldrh	r2, [r1, #0]
 80056b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80056bc:	fb09 b202 	mla	r2, r9, r2, fp
 80056c0:	4492      	add	sl, r2
 80056c2:	b2a4      	uxth	r4, r4
 80056c4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80056c8:	f84e 4b04 	str.w	r4, [lr], #4
 80056cc:	f851 4b04 	ldr.w	r4, [r1], #4
 80056d0:	f8be 2000 	ldrh.w	r2, [lr]
 80056d4:	0c24      	lsrs	r4, r4, #16
 80056d6:	fb09 2404 	mla	r4, r9, r4, r2
 80056da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80056de:	458c      	cmp	ip, r1
 80056e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80056e4:	d8e7      	bhi.n	80056b6 <__multiply+0xfe>
 80056e6:	9a01      	ldr	r2, [sp, #4]
 80056e8:	50b4      	str	r4, [r6, r2]
 80056ea:	3604      	adds	r6, #4
 80056ec:	e7a3      	b.n	8005636 <__multiply+0x7e>
 80056ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1a5      	bne.n	8005642 <__multiply+0x8a>
 80056f6:	3f01      	subs	r7, #1
 80056f8:	e7a1      	b.n	800563e <__multiply+0x86>
 80056fa:	bf00      	nop
 80056fc:	08007013 	.word	0x08007013
 8005700:	08007024 	.word	0x08007024

08005704 <__pow5mult>:
 8005704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005708:	4615      	mov	r5, r2
 800570a:	f012 0203 	ands.w	r2, r2, #3
 800570e:	4606      	mov	r6, r0
 8005710:	460f      	mov	r7, r1
 8005712:	d007      	beq.n	8005724 <__pow5mult+0x20>
 8005714:	4c25      	ldr	r4, [pc, #148]	; (80057ac <__pow5mult+0xa8>)
 8005716:	3a01      	subs	r2, #1
 8005718:	2300      	movs	r3, #0
 800571a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800571e:	f7ff fe9b 	bl	8005458 <__multadd>
 8005722:	4607      	mov	r7, r0
 8005724:	10ad      	asrs	r5, r5, #2
 8005726:	d03d      	beq.n	80057a4 <__pow5mult+0xa0>
 8005728:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800572a:	b97c      	cbnz	r4, 800574c <__pow5mult+0x48>
 800572c:	2010      	movs	r0, #16
 800572e:	f7ff fe1b 	bl	8005368 <malloc>
 8005732:	4602      	mov	r2, r0
 8005734:	6270      	str	r0, [r6, #36]	; 0x24
 8005736:	b928      	cbnz	r0, 8005744 <__pow5mult+0x40>
 8005738:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <__pow5mult+0xac>)
 800573a:	481e      	ldr	r0, [pc, #120]	; (80057b4 <__pow5mult+0xb0>)
 800573c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005740:	f000 fbcc 	bl	8005edc <__assert_func>
 8005744:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005748:	6004      	str	r4, [r0, #0]
 800574a:	60c4      	str	r4, [r0, #12]
 800574c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005750:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005754:	b94c      	cbnz	r4, 800576a <__pow5mult+0x66>
 8005756:	f240 2171 	movw	r1, #625	; 0x271
 800575a:	4630      	mov	r0, r6
 800575c:	f7ff ff16 	bl	800558c <__i2b>
 8005760:	2300      	movs	r3, #0
 8005762:	f8c8 0008 	str.w	r0, [r8, #8]
 8005766:	4604      	mov	r4, r0
 8005768:	6003      	str	r3, [r0, #0]
 800576a:	f04f 0900 	mov.w	r9, #0
 800576e:	07eb      	lsls	r3, r5, #31
 8005770:	d50a      	bpl.n	8005788 <__pow5mult+0x84>
 8005772:	4639      	mov	r1, r7
 8005774:	4622      	mov	r2, r4
 8005776:	4630      	mov	r0, r6
 8005778:	f7ff ff1e 	bl	80055b8 <__multiply>
 800577c:	4639      	mov	r1, r7
 800577e:	4680      	mov	r8, r0
 8005780:	4630      	mov	r0, r6
 8005782:	f7ff fe47 	bl	8005414 <_Bfree>
 8005786:	4647      	mov	r7, r8
 8005788:	106d      	asrs	r5, r5, #1
 800578a:	d00b      	beq.n	80057a4 <__pow5mult+0xa0>
 800578c:	6820      	ldr	r0, [r4, #0]
 800578e:	b938      	cbnz	r0, 80057a0 <__pow5mult+0x9c>
 8005790:	4622      	mov	r2, r4
 8005792:	4621      	mov	r1, r4
 8005794:	4630      	mov	r0, r6
 8005796:	f7ff ff0f 	bl	80055b8 <__multiply>
 800579a:	6020      	str	r0, [r4, #0]
 800579c:	f8c0 9000 	str.w	r9, [r0]
 80057a0:	4604      	mov	r4, r0
 80057a2:	e7e4      	b.n	800576e <__pow5mult+0x6a>
 80057a4:	4638      	mov	r0, r7
 80057a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057aa:	bf00      	nop
 80057ac:	08007178 	.word	0x08007178
 80057b0:	08006f9d 	.word	0x08006f9d
 80057b4:	08007024 	.word	0x08007024

080057b8 <__lshift>:
 80057b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057bc:	460c      	mov	r4, r1
 80057be:	6849      	ldr	r1, [r1, #4]
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80057c6:	68a3      	ldr	r3, [r4, #8]
 80057c8:	4607      	mov	r7, r0
 80057ca:	4691      	mov	r9, r2
 80057cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80057d0:	f108 0601 	add.w	r6, r8, #1
 80057d4:	42b3      	cmp	r3, r6
 80057d6:	db0b      	blt.n	80057f0 <__lshift+0x38>
 80057d8:	4638      	mov	r0, r7
 80057da:	f7ff fddb 	bl	8005394 <_Balloc>
 80057de:	4605      	mov	r5, r0
 80057e0:	b948      	cbnz	r0, 80057f6 <__lshift+0x3e>
 80057e2:	4602      	mov	r2, r0
 80057e4:	4b28      	ldr	r3, [pc, #160]	; (8005888 <__lshift+0xd0>)
 80057e6:	4829      	ldr	r0, [pc, #164]	; (800588c <__lshift+0xd4>)
 80057e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80057ec:	f000 fb76 	bl	8005edc <__assert_func>
 80057f0:	3101      	adds	r1, #1
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	e7ee      	b.n	80057d4 <__lshift+0x1c>
 80057f6:	2300      	movs	r3, #0
 80057f8:	f100 0114 	add.w	r1, r0, #20
 80057fc:	f100 0210 	add.w	r2, r0, #16
 8005800:	4618      	mov	r0, r3
 8005802:	4553      	cmp	r3, sl
 8005804:	db33      	blt.n	800586e <__lshift+0xb6>
 8005806:	6920      	ldr	r0, [r4, #16]
 8005808:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800580c:	f104 0314 	add.w	r3, r4, #20
 8005810:	f019 091f 	ands.w	r9, r9, #31
 8005814:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005818:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800581c:	d02b      	beq.n	8005876 <__lshift+0xbe>
 800581e:	f1c9 0e20 	rsb	lr, r9, #32
 8005822:	468a      	mov	sl, r1
 8005824:	2200      	movs	r2, #0
 8005826:	6818      	ldr	r0, [r3, #0]
 8005828:	fa00 f009 	lsl.w	r0, r0, r9
 800582c:	4302      	orrs	r2, r0
 800582e:	f84a 2b04 	str.w	r2, [sl], #4
 8005832:	f853 2b04 	ldr.w	r2, [r3], #4
 8005836:	459c      	cmp	ip, r3
 8005838:	fa22 f20e 	lsr.w	r2, r2, lr
 800583c:	d8f3      	bhi.n	8005826 <__lshift+0x6e>
 800583e:	ebac 0304 	sub.w	r3, ip, r4
 8005842:	3b15      	subs	r3, #21
 8005844:	f023 0303 	bic.w	r3, r3, #3
 8005848:	3304      	adds	r3, #4
 800584a:	f104 0015 	add.w	r0, r4, #21
 800584e:	4584      	cmp	ip, r0
 8005850:	bf38      	it	cc
 8005852:	2304      	movcc	r3, #4
 8005854:	50ca      	str	r2, [r1, r3]
 8005856:	b10a      	cbz	r2, 800585c <__lshift+0xa4>
 8005858:	f108 0602 	add.w	r6, r8, #2
 800585c:	3e01      	subs	r6, #1
 800585e:	4638      	mov	r0, r7
 8005860:	612e      	str	r6, [r5, #16]
 8005862:	4621      	mov	r1, r4
 8005864:	f7ff fdd6 	bl	8005414 <_Bfree>
 8005868:	4628      	mov	r0, r5
 800586a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005872:	3301      	adds	r3, #1
 8005874:	e7c5      	b.n	8005802 <__lshift+0x4a>
 8005876:	3904      	subs	r1, #4
 8005878:	f853 2b04 	ldr.w	r2, [r3], #4
 800587c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005880:	459c      	cmp	ip, r3
 8005882:	d8f9      	bhi.n	8005878 <__lshift+0xc0>
 8005884:	e7ea      	b.n	800585c <__lshift+0xa4>
 8005886:	bf00      	nop
 8005888:	08007013 	.word	0x08007013
 800588c:	08007024 	.word	0x08007024

08005890 <__mcmp>:
 8005890:	b530      	push	{r4, r5, lr}
 8005892:	6902      	ldr	r2, [r0, #16]
 8005894:	690c      	ldr	r4, [r1, #16]
 8005896:	1b12      	subs	r2, r2, r4
 8005898:	d10e      	bne.n	80058b8 <__mcmp+0x28>
 800589a:	f100 0314 	add.w	r3, r0, #20
 800589e:	3114      	adds	r1, #20
 80058a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80058a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80058a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80058ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80058b0:	42a5      	cmp	r5, r4
 80058b2:	d003      	beq.n	80058bc <__mcmp+0x2c>
 80058b4:	d305      	bcc.n	80058c2 <__mcmp+0x32>
 80058b6:	2201      	movs	r2, #1
 80058b8:	4610      	mov	r0, r2
 80058ba:	bd30      	pop	{r4, r5, pc}
 80058bc:	4283      	cmp	r3, r0
 80058be:	d3f3      	bcc.n	80058a8 <__mcmp+0x18>
 80058c0:	e7fa      	b.n	80058b8 <__mcmp+0x28>
 80058c2:	f04f 32ff 	mov.w	r2, #4294967295
 80058c6:	e7f7      	b.n	80058b8 <__mcmp+0x28>

080058c8 <__mdiff>:
 80058c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058cc:	460c      	mov	r4, r1
 80058ce:	4606      	mov	r6, r0
 80058d0:	4611      	mov	r1, r2
 80058d2:	4620      	mov	r0, r4
 80058d4:	4617      	mov	r7, r2
 80058d6:	f7ff ffdb 	bl	8005890 <__mcmp>
 80058da:	1e05      	subs	r5, r0, #0
 80058dc:	d110      	bne.n	8005900 <__mdiff+0x38>
 80058de:	4629      	mov	r1, r5
 80058e0:	4630      	mov	r0, r6
 80058e2:	f7ff fd57 	bl	8005394 <_Balloc>
 80058e6:	b930      	cbnz	r0, 80058f6 <__mdiff+0x2e>
 80058e8:	4b39      	ldr	r3, [pc, #228]	; (80059d0 <__mdiff+0x108>)
 80058ea:	4602      	mov	r2, r0
 80058ec:	f240 2132 	movw	r1, #562	; 0x232
 80058f0:	4838      	ldr	r0, [pc, #224]	; (80059d4 <__mdiff+0x10c>)
 80058f2:	f000 faf3 	bl	8005edc <__assert_func>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80058fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005900:	bfa4      	itt	ge
 8005902:	463b      	movge	r3, r7
 8005904:	4627      	movge	r7, r4
 8005906:	4630      	mov	r0, r6
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	bfa6      	itte	ge
 800590c:	461c      	movge	r4, r3
 800590e:	2500      	movge	r5, #0
 8005910:	2501      	movlt	r5, #1
 8005912:	f7ff fd3f 	bl	8005394 <_Balloc>
 8005916:	b920      	cbnz	r0, 8005922 <__mdiff+0x5a>
 8005918:	4b2d      	ldr	r3, [pc, #180]	; (80059d0 <__mdiff+0x108>)
 800591a:	4602      	mov	r2, r0
 800591c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005920:	e7e6      	b.n	80058f0 <__mdiff+0x28>
 8005922:	693e      	ldr	r6, [r7, #16]
 8005924:	60c5      	str	r5, [r0, #12]
 8005926:	6925      	ldr	r5, [r4, #16]
 8005928:	f107 0114 	add.w	r1, r7, #20
 800592c:	f104 0914 	add.w	r9, r4, #20
 8005930:	f100 0e14 	add.w	lr, r0, #20
 8005934:	f107 0210 	add.w	r2, r7, #16
 8005938:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800593c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005940:	46f2      	mov	sl, lr
 8005942:	2700      	movs	r7, #0
 8005944:	f859 3b04 	ldr.w	r3, [r9], #4
 8005948:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800594c:	fa1f f883 	uxth.w	r8, r3
 8005950:	fa17 f78b 	uxtah	r7, r7, fp
 8005954:	0c1b      	lsrs	r3, r3, #16
 8005956:	eba7 0808 	sub.w	r8, r7, r8
 800595a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800595e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005962:	fa1f f888 	uxth.w	r8, r8
 8005966:	141f      	asrs	r7, r3, #16
 8005968:	454d      	cmp	r5, r9
 800596a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800596e:	f84a 3b04 	str.w	r3, [sl], #4
 8005972:	d8e7      	bhi.n	8005944 <__mdiff+0x7c>
 8005974:	1b2b      	subs	r3, r5, r4
 8005976:	3b15      	subs	r3, #21
 8005978:	f023 0303 	bic.w	r3, r3, #3
 800597c:	3304      	adds	r3, #4
 800597e:	3415      	adds	r4, #21
 8005980:	42a5      	cmp	r5, r4
 8005982:	bf38      	it	cc
 8005984:	2304      	movcc	r3, #4
 8005986:	4419      	add	r1, r3
 8005988:	4473      	add	r3, lr
 800598a:	469e      	mov	lr, r3
 800598c:	460d      	mov	r5, r1
 800598e:	4565      	cmp	r5, ip
 8005990:	d30e      	bcc.n	80059b0 <__mdiff+0xe8>
 8005992:	f10c 0203 	add.w	r2, ip, #3
 8005996:	1a52      	subs	r2, r2, r1
 8005998:	f022 0203 	bic.w	r2, r2, #3
 800599c:	3903      	subs	r1, #3
 800599e:	458c      	cmp	ip, r1
 80059a0:	bf38      	it	cc
 80059a2:	2200      	movcc	r2, #0
 80059a4:	441a      	add	r2, r3
 80059a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80059aa:	b17b      	cbz	r3, 80059cc <__mdiff+0x104>
 80059ac:	6106      	str	r6, [r0, #16]
 80059ae:	e7a5      	b.n	80058fc <__mdiff+0x34>
 80059b0:	f855 8b04 	ldr.w	r8, [r5], #4
 80059b4:	fa17 f488 	uxtah	r4, r7, r8
 80059b8:	1422      	asrs	r2, r4, #16
 80059ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80059be:	b2a4      	uxth	r4, r4
 80059c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80059c4:	f84e 4b04 	str.w	r4, [lr], #4
 80059c8:	1417      	asrs	r7, r2, #16
 80059ca:	e7e0      	b.n	800598e <__mdiff+0xc6>
 80059cc:	3e01      	subs	r6, #1
 80059ce:	e7ea      	b.n	80059a6 <__mdiff+0xde>
 80059d0:	08007013 	.word	0x08007013
 80059d4:	08007024 	.word	0x08007024

080059d8 <__d2b>:
 80059d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80059dc:	4689      	mov	r9, r1
 80059de:	2101      	movs	r1, #1
 80059e0:	ec57 6b10 	vmov	r6, r7, d0
 80059e4:	4690      	mov	r8, r2
 80059e6:	f7ff fcd5 	bl	8005394 <_Balloc>
 80059ea:	4604      	mov	r4, r0
 80059ec:	b930      	cbnz	r0, 80059fc <__d2b+0x24>
 80059ee:	4602      	mov	r2, r0
 80059f0:	4b25      	ldr	r3, [pc, #148]	; (8005a88 <__d2b+0xb0>)
 80059f2:	4826      	ldr	r0, [pc, #152]	; (8005a8c <__d2b+0xb4>)
 80059f4:	f240 310a 	movw	r1, #778	; 0x30a
 80059f8:	f000 fa70 	bl	8005edc <__assert_func>
 80059fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005a00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005a04:	bb35      	cbnz	r5, 8005a54 <__d2b+0x7c>
 8005a06:	2e00      	cmp	r6, #0
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	d028      	beq.n	8005a5e <__d2b+0x86>
 8005a0c:	4668      	mov	r0, sp
 8005a0e:	9600      	str	r6, [sp, #0]
 8005a10:	f7ff fd8c 	bl	800552c <__lo0bits>
 8005a14:	9900      	ldr	r1, [sp, #0]
 8005a16:	b300      	cbz	r0, 8005a5a <__d2b+0x82>
 8005a18:	9a01      	ldr	r2, [sp, #4]
 8005a1a:	f1c0 0320 	rsb	r3, r0, #32
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	430b      	orrs	r3, r1
 8005a24:	40c2      	lsrs	r2, r0
 8005a26:	6163      	str	r3, [r4, #20]
 8005a28:	9201      	str	r2, [sp, #4]
 8005a2a:	9b01      	ldr	r3, [sp, #4]
 8005a2c:	61a3      	str	r3, [r4, #24]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bf14      	ite	ne
 8005a32:	2202      	movne	r2, #2
 8005a34:	2201      	moveq	r2, #1
 8005a36:	6122      	str	r2, [r4, #16]
 8005a38:	b1d5      	cbz	r5, 8005a70 <__d2b+0x98>
 8005a3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005a3e:	4405      	add	r5, r0
 8005a40:	f8c9 5000 	str.w	r5, [r9]
 8005a44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a48:	f8c8 0000 	str.w	r0, [r8]
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	b003      	add	sp, #12
 8005a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a58:	e7d5      	b.n	8005a06 <__d2b+0x2e>
 8005a5a:	6161      	str	r1, [r4, #20]
 8005a5c:	e7e5      	b.n	8005a2a <__d2b+0x52>
 8005a5e:	a801      	add	r0, sp, #4
 8005a60:	f7ff fd64 	bl	800552c <__lo0bits>
 8005a64:	9b01      	ldr	r3, [sp, #4]
 8005a66:	6163      	str	r3, [r4, #20]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	6122      	str	r2, [r4, #16]
 8005a6c:	3020      	adds	r0, #32
 8005a6e:	e7e3      	b.n	8005a38 <__d2b+0x60>
 8005a70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005a78:	f8c9 0000 	str.w	r0, [r9]
 8005a7c:	6918      	ldr	r0, [r3, #16]
 8005a7e:	f7ff fd35 	bl	80054ec <__hi0bits>
 8005a82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005a86:	e7df      	b.n	8005a48 <__d2b+0x70>
 8005a88:	08007013 	.word	0x08007013
 8005a8c:	08007024 	.word	0x08007024

08005a90 <_calloc_r>:
 8005a90:	b513      	push	{r0, r1, r4, lr}
 8005a92:	434a      	muls	r2, r1
 8005a94:	4611      	mov	r1, r2
 8005a96:	9201      	str	r2, [sp, #4]
 8005a98:	f000 f85a 	bl	8005b50 <_malloc_r>
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	b118      	cbz	r0, 8005aa8 <_calloc_r+0x18>
 8005aa0:	9a01      	ldr	r2, [sp, #4]
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	f7fe f952 	bl	8003d4c <memset>
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	b002      	add	sp, #8
 8005aac:	bd10      	pop	{r4, pc}
	...

08005ab0 <_free_r>:
 8005ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ab2:	2900      	cmp	r1, #0
 8005ab4:	d048      	beq.n	8005b48 <_free_r+0x98>
 8005ab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aba:	9001      	str	r0, [sp, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f1a1 0404 	sub.w	r4, r1, #4
 8005ac2:	bfb8      	it	lt
 8005ac4:	18e4      	addlt	r4, r4, r3
 8005ac6:	f000 fa65 	bl	8005f94 <__malloc_lock>
 8005aca:	4a20      	ldr	r2, [pc, #128]	; (8005b4c <_free_r+0x9c>)
 8005acc:	9801      	ldr	r0, [sp, #4]
 8005ace:	6813      	ldr	r3, [r2, #0]
 8005ad0:	4615      	mov	r5, r2
 8005ad2:	b933      	cbnz	r3, 8005ae2 <_free_r+0x32>
 8005ad4:	6063      	str	r3, [r4, #4]
 8005ad6:	6014      	str	r4, [r2, #0]
 8005ad8:	b003      	add	sp, #12
 8005ada:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ade:	f000 ba5f 	b.w	8005fa0 <__malloc_unlock>
 8005ae2:	42a3      	cmp	r3, r4
 8005ae4:	d90b      	bls.n	8005afe <_free_r+0x4e>
 8005ae6:	6821      	ldr	r1, [r4, #0]
 8005ae8:	1862      	adds	r2, r4, r1
 8005aea:	4293      	cmp	r3, r2
 8005aec:	bf04      	itt	eq
 8005aee:	681a      	ldreq	r2, [r3, #0]
 8005af0:	685b      	ldreq	r3, [r3, #4]
 8005af2:	6063      	str	r3, [r4, #4]
 8005af4:	bf04      	itt	eq
 8005af6:	1852      	addeq	r2, r2, r1
 8005af8:	6022      	streq	r2, [r4, #0]
 8005afa:	602c      	str	r4, [r5, #0]
 8005afc:	e7ec      	b.n	8005ad8 <_free_r+0x28>
 8005afe:	461a      	mov	r2, r3
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	b10b      	cbz	r3, 8005b08 <_free_r+0x58>
 8005b04:	42a3      	cmp	r3, r4
 8005b06:	d9fa      	bls.n	8005afe <_free_r+0x4e>
 8005b08:	6811      	ldr	r1, [r2, #0]
 8005b0a:	1855      	adds	r5, r2, r1
 8005b0c:	42a5      	cmp	r5, r4
 8005b0e:	d10b      	bne.n	8005b28 <_free_r+0x78>
 8005b10:	6824      	ldr	r4, [r4, #0]
 8005b12:	4421      	add	r1, r4
 8005b14:	1854      	adds	r4, r2, r1
 8005b16:	42a3      	cmp	r3, r4
 8005b18:	6011      	str	r1, [r2, #0]
 8005b1a:	d1dd      	bne.n	8005ad8 <_free_r+0x28>
 8005b1c:	681c      	ldr	r4, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	6053      	str	r3, [r2, #4]
 8005b22:	4421      	add	r1, r4
 8005b24:	6011      	str	r1, [r2, #0]
 8005b26:	e7d7      	b.n	8005ad8 <_free_r+0x28>
 8005b28:	d902      	bls.n	8005b30 <_free_r+0x80>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	6003      	str	r3, [r0, #0]
 8005b2e:	e7d3      	b.n	8005ad8 <_free_r+0x28>
 8005b30:	6825      	ldr	r5, [r4, #0]
 8005b32:	1961      	adds	r1, r4, r5
 8005b34:	428b      	cmp	r3, r1
 8005b36:	bf04      	itt	eq
 8005b38:	6819      	ldreq	r1, [r3, #0]
 8005b3a:	685b      	ldreq	r3, [r3, #4]
 8005b3c:	6063      	str	r3, [r4, #4]
 8005b3e:	bf04      	itt	eq
 8005b40:	1949      	addeq	r1, r1, r5
 8005b42:	6021      	streq	r1, [r4, #0]
 8005b44:	6054      	str	r4, [r2, #4]
 8005b46:	e7c7      	b.n	8005ad8 <_free_r+0x28>
 8005b48:	b003      	add	sp, #12
 8005b4a:	bd30      	pop	{r4, r5, pc}
 8005b4c:	20000258 	.word	0x20000258

08005b50 <_malloc_r>:
 8005b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b52:	1ccd      	adds	r5, r1, #3
 8005b54:	f025 0503 	bic.w	r5, r5, #3
 8005b58:	3508      	adds	r5, #8
 8005b5a:	2d0c      	cmp	r5, #12
 8005b5c:	bf38      	it	cc
 8005b5e:	250c      	movcc	r5, #12
 8005b60:	2d00      	cmp	r5, #0
 8005b62:	4606      	mov	r6, r0
 8005b64:	db01      	blt.n	8005b6a <_malloc_r+0x1a>
 8005b66:	42a9      	cmp	r1, r5
 8005b68:	d903      	bls.n	8005b72 <_malloc_r+0x22>
 8005b6a:	230c      	movs	r3, #12
 8005b6c:	6033      	str	r3, [r6, #0]
 8005b6e:	2000      	movs	r0, #0
 8005b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b72:	f000 fa0f 	bl	8005f94 <__malloc_lock>
 8005b76:	4921      	ldr	r1, [pc, #132]	; (8005bfc <_malloc_r+0xac>)
 8005b78:	680a      	ldr	r2, [r1, #0]
 8005b7a:	4614      	mov	r4, r2
 8005b7c:	b99c      	cbnz	r4, 8005ba6 <_malloc_r+0x56>
 8005b7e:	4f20      	ldr	r7, [pc, #128]	; (8005c00 <_malloc_r+0xb0>)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	b923      	cbnz	r3, 8005b8e <_malloc_r+0x3e>
 8005b84:	4621      	mov	r1, r4
 8005b86:	4630      	mov	r0, r6
 8005b88:	f000 f998 	bl	8005ebc <_sbrk_r>
 8005b8c:	6038      	str	r0, [r7, #0]
 8005b8e:	4629      	mov	r1, r5
 8005b90:	4630      	mov	r0, r6
 8005b92:	f000 f993 	bl	8005ebc <_sbrk_r>
 8005b96:	1c43      	adds	r3, r0, #1
 8005b98:	d123      	bne.n	8005be2 <_malloc_r+0x92>
 8005b9a:	230c      	movs	r3, #12
 8005b9c:	6033      	str	r3, [r6, #0]
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f000 f9fe 	bl	8005fa0 <__malloc_unlock>
 8005ba4:	e7e3      	b.n	8005b6e <_malloc_r+0x1e>
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	1b5b      	subs	r3, r3, r5
 8005baa:	d417      	bmi.n	8005bdc <_malloc_r+0x8c>
 8005bac:	2b0b      	cmp	r3, #11
 8005bae:	d903      	bls.n	8005bb8 <_malloc_r+0x68>
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	441c      	add	r4, r3
 8005bb4:	6025      	str	r5, [r4, #0]
 8005bb6:	e004      	b.n	8005bc2 <_malloc_r+0x72>
 8005bb8:	6863      	ldr	r3, [r4, #4]
 8005bba:	42a2      	cmp	r2, r4
 8005bbc:	bf0c      	ite	eq
 8005bbe:	600b      	streq	r3, [r1, #0]
 8005bc0:	6053      	strne	r3, [r2, #4]
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f000 f9ec 	bl	8005fa0 <__malloc_unlock>
 8005bc8:	f104 000b 	add.w	r0, r4, #11
 8005bcc:	1d23      	adds	r3, r4, #4
 8005bce:	f020 0007 	bic.w	r0, r0, #7
 8005bd2:	1ac2      	subs	r2, r0, r3
 8005bd4:	d0cc      	beq.n	8005b70 <_malloc_r+0x20>
 8005bd6:	1a1b      	subs	r3, r3, r0
 8005bd8:	50a3      	str	r3, [r4, r2]
 8005bda:	e7c9      	b.n	8005b70 <_malloc_r+0x20>
 8005bdc:	4622      	mov	r2, r4
 8005bde:	6864      	ldr	r4, [r4, #4]
 8005be0:	e7cc      	b.n	8005b7c <_malloc_r+0x2c>
 8005be2:	1cc4      	adds	r4, r0, #3
 8005be4:	f024 0403 	bic.w	r4, r4, #3
 8005be8:	42a0      	cmp	r0, r4
 8005bea:	d0e3      	beq.n	8005bb4 <_malloc_r+0x64>
 8005bec:	1a21      	subs	r1, r4, r0
 8005bee:	4630      	mov	r0, r6
 8005bf0:	f000 f964 	bl	8005ebc <_sbrk_r>
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d1dd      	bne.n	8005bb4 <_malloc_r+0x64>
 8005bf8:	e7cf      	b.n	8005b9a <_malloc_r+0x4a>
 8005bfa:	bf00      	nop
 8005bfc:	20000258 	.word	0x20000258
 8005c00:	2000025c 	.word	0x2000025c

08005c04 <__ssputs_r>:
 8005c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c08:	688e      	ldr	r6, [r1, #8]
 8005c0a:	429e      	cmp	r6, r3
 8005c0c:	4682      	mov	sl, r0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	4690      	mov	r8, r2
 8005c12:	461f      	mov	r7, r3
 8005c14:	d838      	bhi.n	8005c88 <__ssputs_r+0x84>
 8005c16:	898a      	ldrh	r2, [r1, #12]
 8005c18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c1c:	d032      	beq.n	8005c84 <__ssputs_r+0x80>
 8005c1e:	6825      	ldr	r5, [r4, #0]
 8005c20:	6909      	ldr	r1, [r1, #16]
 8005c22:	eba5 0901 	sub.w	r9, r5, r1
 8005c26:	6965      	ldr	r5, [r4, #20]
 8005c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c30:	3301      	adds	r3, #1
 8005c32:	444b      	add	r3, r9
 8005c34:	106d      	asrs	r5, r5, #1
 8005c36:	429d      	cmp	r5, r3
 8005c38:	bf38      	it	cc
 8005c3a:	461d      	movcc	r5, r3
 8005c3c:	0553      	lsls	r3, r2, #21
 8005c3e:	d531      	bpl.n	8005ca4 <__ssputs_r+0xa0>
 8005c40:	4629      	mov	r1, r5
 8005c42:	f7ff ff85 	bl	8005b50 <_malloc_r>
 8005c46:	4606      	mov	r6, r0
 8005c48:	b950      	cbnz	r0, 8005c60 <__ssputs_r+0x5c>
 8005c4a:	230c      	movs	r3, #12
 8005c4c:	f8ca 3000 	str.w	r3, [sl]
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c56:	81a3      	strh	r3, [r4, #12]
 8005c58:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c60:	6921      	ldr	r1, [r4, #16]
 8005c62:	464a      	mov	r2, r9
 8005c64:	f7ff fb88 	bl	8005378 <memcpy>
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c72:	81a3      	strh	r3, [r4, #12]
 8005c74:	6126      	str	r6, [r4, #16]
 8005c76:	6165      	str	r5, [r4, #20]
 8005c78:	444e      	add	r6, r9
 8005c7a:	eba5 0509 	sub.w	r5, r5, r9
 8005c7e:	6026      	str	r6, [r4, #0]
 8005c80:	60a5      	str	r5, [r4, #8]
 8005c82:	463e      	mov	r6, r7
 8005c84:	42be      	cmp	r6, r7
 8005c86:	d900      	bls.n	8005c8a <__ssputs_r+0x86>
 8005c88:	463e      	mov	r6, r7
 8005c8a:	4632      	mov	r2, r6
 8005c8c:	6820      	ldr	r0, [r4, #0]
 8005c8e:	4641      	mov	r1, r8
 8005c90:	f000 f966 	bl	8005f60 <memmove>
 8005c94:	68a3      	ldr	r3, [r4, #8]
 8005c96:	6822      	ldr	r2, [r4, #0]
 8005c98:	1b9b      	subs	r3, r3, r6
 8005c9a:	4432      	add	r2, r6
 8005c9c:	60a3      	str	r3, [r4, #8]
 8005c9e:	6022      	str	r2, [r4, #0]
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	e7db      	b.n	8005c5c <__ssputs_r+0x58>
 8005ca4:	462a      	mov	r2, r5
 8005ca6:	f000 f981 	bl	8005fac <_realloc_r>
 8005caa:	4606      	mov	r6, r0
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d1e1      	bne.n	8005c74 <__ssputs_r+0x70>
 8005cb0:	6921      	ldr	r1, [r4, #16]
 8005cb2:	4650      	mov	r0, sl
 8005cb4:	f7ff fefc 	bl	8005ab0 <_free_r>
 8005cb8:	e7c7      	b.n	8005c4a <__ssputs_r+0x46>
	...

08005cbc <_svfiprintf_r>:
 8005cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	4698      	mov	r8, r3
 8005cc2:	898b      	ldrh	r3, [r1, #12]
 8005cc4:	061b      	lsls	r3, r3, #24
 8005cc6:	b09d      	sub	sp, #116	; 0x74
 8005cc8:	4607      	mov	r7, r0
 8005cca:	460d      	mov	r5, r1
 8005ccc:	4614      	mov	r4, r2
 8005cce:	d50e      	bpl.n	8005cee <_svfiprintf_r+0x32>
 8005cd0:	690b      	ldr	r3, [r1, #16]
 8005cd2:	b963      	cbnz	r3, 8005cee <_svfiprintf_r+0x32>
 8005cd4:	2140      	movs	r1, #64	; 0x40
 8005cd6:	f7ff ff3b 	bl	8005b50 <_malloc_r>
 8005cda:	6028      	str	r0, [r5, #0]
 8005cdc:	6128      	str	r0, [r5, #16]
 8005cde:	b920      	cbnz	r0, 8005cea <_svfiprintf_r+0x2e>
 8005ce0:	230c      	movs	r3, #12
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce8:	e0d1      	b.n	8005e8e <_svfiprintf_r+0x1d2>
 8005cea:	2340      	movs	r3, #64	; 0x40
 8005cec:	616b      	str	r3, [r5, #20]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8005cf2:	2320      	movs	r3, #32
 8005cf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cfc:	2330      	movs	r3, #48	; 0x30
 8005cfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ea8 <_svfiprintf_r+0x1ec>
 8005d02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d06:	f04f 0901 	mov.w	r9, #1
 8005d0a:	4623      	mov	r3, r4
 8005d0c:	469a      	mov	sl, r3
 8005d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d12:	b10a      	cbz	r2, 8005d18 <_svfiprintf_r+0x5c>
 8005d14:	2a25      	cmp	r2, #37	; 0x25
 8005d16:	d1f9      	bne.n	8005d0c <_svfiprintf_r+0x50>
 8005d18:	ebba 0b04 	subs.w	fp, sl, r4
 8005d1c:	d00b      	beq.n	8005d36 <_svfiprintf_r+0x7a>
 8005d1e:	465b      	mov	r3, fp
 8005d20:	4622      	mov	r2, r4
 8005d22:	4629      	mov	r1, r5
 8005d24:	4638      	mov	r0, r7
 8005d26:	f7ff ff6d 	bl	8005c04 <__ssputs_r>
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	f000 80aa 	beq.w	8005e84 <_svfiprintf_r+0x1c8>
 8005d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d32:	445a      	add	r2, fp
 8005d34:	9209      	str	r2, [sp, #36]	; 0x24
 8005d36:	f89a 3000 	ldrb.w	r3, [sl]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 80a2 	beq.w	8005e84 <_svfiprintf_r+0x1c8>
 8005d40:	2300      	movs	r3, #0
 8005d42:	f04f 32ff 	mov.w	r2, #4294967295
 8005d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d4a:	f10a 0a01 	add.w	sl, sl, #1
 8005d4e:	9304      	str	r3, [sp, #16]
 8005d50:	9307      	str	r3, [sp, #28]
 8005d52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d56:	931a      	str	r3, [sp, #104]	; 0x68
 8005d58:	4654      	mov	r4, sl
 8005d5a:	2205      	movs	r2, #5
 8005d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d60:	4851      	ldr	r0, [pc, #324]	; (8005ea8 <_svfiprintf_r+0x1ec>)
 8005d62:	f7fa fa3d 	bl	80001e0 <memchr>
 8005d66:	9a04      	ldr	r2, [sp, #16]
 8005d68:	b9d8      	cbnz	r0, 8005da2 <_svfiprintf_r+0xe6>
 8005d6a:	06d0      	lsls	r0, r2, #27
 8005d6c:	bf44      	itt	mi
 8005d6e:	2320      	movmi	r3, #32
 8005d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d74:	0711      	lsls	r1, r2, #28
 8005d76:	bf44      	itt	mi
 8005d78:	232b      	movmi	r3, #43	; 0x2b
 8005d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d82:	2b2a      	cmp	r3, #42	; 0x2a
 8005d84:	d015      	beq.n	8005db2 <_svfiprintf_r+0xf6>
 8005d86:	9a07      	ldr	r2, [sp, #28]
 8005d88:	4654      	mov	r4, sl
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	f04f 0c0a 	mov.w	ip, #10
 8005d90:	4621      	mov	r1, r4
 8005d92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d96:	3b30      	subs	r3, #48	; 0x30
 8005d98:	2b09      	cmp	r3, #9
 8005d9a:	d94e      	bls.n	8005e3a <_svfiprintf_r+0x17e>
 8005d9c:	b1b0      	cbz	r0, 8005dcc <_svfiprintf_r+0x110>
 8005d9e:	9207      	str	r2, [sp, #28]
 8005da0:	e014      	b.n	8005dcc <_svfiprintf_r+0x110>
 8005da2:	eba0 0308 	sub.w	r3, r0, r8
 8005da6:	fa09 f303 	lsl.w	r3, r9, r3
 8005daa:	4313      	orrs	r3, r2
 8005dac:	9304      	str	r3, [sp, #16]
 8005dae:	46a2      	mov	sl, r4
 8005db0:	e7d2      	b.n	8005d58 <_svfiprintf_r+0x9c>
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	1d19      	adds	r1, r3, #4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	9103      	str	r1, [sp, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bfbb      	ittet	lt
 8005dbe:	425b      	neglt	r3, r3
 8005dc0:	f042 0202 	orrlt.w	r2, r2, #2
 8005dc4:	9307      	strge	r3, [sp, #28]
 8005dc6:	9307      	strlt	r3, [sp, #28]
 8005dc8:	bfb8      	it	lt
 8005dca:	9204      	strlt	r2, [sp, #16]
 8005dcc:	7823      	ldrb	r3, [r4, #0]
 8005dce:	2b2e      	cmp	r3, #46	; 0x2e
 8005dd0:	d10c      	bne.n	8005dec <_svfiprintf_r+0x130>
 8005dd2:	7863      	ldrb	r3, [r4, #1]
 8005dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8005dd6:	d135      	bne.n	8005e44 <_svfiprintf_r+0x188>
 8005dd8:	9b03      	ldr	r3, [sp, #12]
 8005dda:	1d1a      	adds	r2, r3, #4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	9203      	str	r2, [sp, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	bfb8      	it	lt
 8005de4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005de8:	3402      	adds	r4, #2
 8005dea:	9305      	str	r3, [sp, #20]
 8005dec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005eb8 <_svfiprintf_r+0x1fc>
 8005df0:	7821      	ldrb	r1, [r4, #0]
 8005df2:	2203      	movs	r2, #3
 8005df4:	4650      	mov	r0, sl
 8005df6:	f7fa f9f3 	bl	80001e0 <memchr>
 8005dfa:	b140      	cbz	r0, 8005e0e <_svfiprintf_r+0x152>
 8005dfc:	2340      	movs	r3, #64	; 0x40
 8005dfe:	eba0 000a 	sub.w	r0, r0, sl
 8005e02:	fa03 f000 	lsl.w	r0, r3, r0
 8005e06:	9b04      	ldr	r3, [sp, #16]
 8005e08:	4303      	orrs	r3, r0
 8005e0a:	3401      	adds	r4, #1
 8005e0c:	9304      	str	r3, [sp, #16]
 8005e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e12:	4826      	ldr	r0, [pc, #152]	; (8005eac <_svfiprintf_r+0x1f0>)
 8005e14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e18:	2206      	movs	r2, #6
 8005e1a:	f7fa f9e1 	bl	80001e0 <memchr>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d038      	beq.n	8005e94 <_svfiprintf_r+0x1d8>
 8005e22:	4b23      	ldr	r3, [pc, #140]	; (8005eb0 <_svfiprintf_r+0x1f4>)
 8005e24:	bb1b      	cbnz	r3, 8005e6e <_svfiprintf_r+0x1b2>
 8005e26:	9b03      	ldr	r3, [sp, #12]
 8005e28:	3307      	adds	r3, #7
 8005e2a:	f023 0307 	bic.w	r3, r3, #7
 8005e2e:	3308      	adds	r3, #8
 8005e30:	9303      	str	r3, [sp, #12]
 8005e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e34:	4433      	add	r3, r6
 8005e36:	9309      	str	r3, [sp, #36]	; 0x24
 8005e38:	e767      	b.n	8005d0a <_svfiprintf_r+0x4e>
 8005e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e3e:	460c      	mov	r4, r1
 8005e40:	2001      	movs	r0, #1
 8005e42:	e7a5      	b.n	8005d90 <_svfiprintf_r+0xd4>
 8005e44:	2300      	movs	r3, #0
 8005e46:	3401      	adds	r4, #1
 8005e48:	9305      	str	r3, [sp, #20]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	f04f 0c0a 	mov.w	ip, #10
 8005e50:	4620      	mov	r0, r4
 8005e52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e56:	3a30      	subs	r2, #48	; 0x30
 8005e58:	2a09      	cmp	r2, #9
 8005e5a:	d903      	bls.n	8005e64 <_svfiprintf_r+0x1a8>
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0c5      	beq.n	8005dec <_svfiprintf_r+0x130>
 8005e60:	9105      	str	r1, [sp, #20]
 8005e62:	e7c3      	b.n	8005dec <_svfiprintf_r+0x130>
 8005e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e68:	4604      	mov	r4, r0
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e7f0      	b.n	8005e50 <_svfiprintf_r+0x194>
 8005e6e:	ab03      	add	r3, sp, #12
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	462a      	mov	r2, r5
 8005e74:	4b0f      	ldr	r3, [pc, #60]	; (8005eb4 <_svfiprintf_r+0x1f8>)
 8005e76:	a904      	add	r1, sp, #16
 8005e78:	4638      	mov	r0, r7
 8005e7a:	f7fe f80f 	bl	8003e9c <_printf_float>
 8005e7e:	1c42      	adds	r2, r0, #1
 8005e80:	4606      	mov	r6, r0
 8005e82:	d1d6      	bne.n	8005e32 <_svfiprintf_r+0x176>
 8005e84:	89ab      	ldrh	r3, [r5, #12]
 8005e86:	065b      	lsls	r3, r3, #25
 8005e88:	f53f af2c 	bmi.w	8005ce4 <_svfiprintf_r+0x28>
 8005e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e8e:	b01d      	add	sp, #116	; 0x74
 8005e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e94:	ab03      	add	r3, sp, #12
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	462a      	mov	r2, r5
 8005e9a:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <_svfiprintf_r+0x1f8>)
 8005e9c:	a904      	add	r1, sp, #16
 8005e9e:	4638      	mov	r0, r7
 8005ea0:	f7fe faa0 	bl	80043e4 <_printf_i>
 8005ea4:	e7eb      	b.n	8005e7e <_svfiprintf_r+0x1c2>
 8005ea6:	bf00      	nop
 8005ea8:	08007184 	.word	0x08007184
 8005eac:	0800718e 	.word	0x0800718e
 8005eb0:	08003e9d 	.word	0x08003e9d
 8005eb4:	08005c05 	.word	0x08005c05
 8005eb8:	0800718a 	.word	0x0800718a

08005ebc <_sbrk_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	4d06      	ldr	r5, [pc, #24]	; (8005ed8 <_sbrk_r+0x1c>)
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	f7fd fb22 	bl	8003510 <_sbrk>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d102      	bne.n	8005ed6 <_sbrk_r+0x1a>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b103      	cbz	r3, 8005ed6 <_sbrk_r+0x1a>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	20000268 	.word	0x20000268

08005edc <__assert_func>:
 8005edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ede:	4614      	mov	r4, r2
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4b09      	ldr	r3, [pc, #36]	; (8005f08 <__assert_func+0x2c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4605      	mov	r5, r0
 8005ee8:	68d8      	ldr	r0, [r3, #12]
 8005eea:	b14c      	cbz	r4, 8005f00 <__assert_func+0x24>
 8005eec:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <__assert_func+0x30>)
 8005eee:	9100      	str	r1, [sp, #0]
 8005ef0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ef4:	4906      	ldr	r1, [pc, #24]	; (8005f10 <__assert_func+0x34>)
 8005ef6:	462b      	mov	r3, r5
 8005ef8:	f000 f80e 	bl	8005f18 <fiprintf>
 8005efc:	f000 faa4 	bl	8006448 <abort>
 8005f00:	4b04      	ldr	r3, [pc, #16]	; (8005f14 <__assert_func+0x38>)
 8005f02:	461c      	mov	r4, r3
 8005f04:	e7f3      	b.n	8005eee <__assert_func+0x12>
 8005f06:	bf00      	nop
 8005f08:	20000050 	.word	0x20000050
 8005f0c:	08007195 	.word	0x08007195
 8005f10:	080071a2 	.word	0x080071a2
 8005f14:	080071d0 	.word	0x080071d0

08005f18 <fiprintf>:
 8005f18:	b40e      	push	{r1, r2, r3}
 8005f1a:	b503      	push	{r0, r1, lr}
 8005f1c:	4601      	mov	r1, r0
 8005f1e:	ab03      	add	r3, sp, #12
 8005f20:	4805      	ldr	r0, [pc, #20]	; (8005f38 <fiprintf+0x20>)
 8005f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f26:	6800      	ldr	r0, [r0, #0]
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	f000 f88f 	bl	800604c <_vfiprintf_r>
 8005f2e:	b002      	add	sp, #8
 8005f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f34:	b003      	add	sp, #12
 8005f36:	4770      	bx	lr
 8005f38:	20000050 	.word	0x20000050

08005f3c <__ascii_mbtowc>:
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	b901      	cbnz	r1, 8005f42 <__ascii_mbtowc+0x6>
 8005f40:	a901      	add	r1, sp, #4
 8005f42:	b142      	cbz	r2, 8005f56 <__ascii_mbtowc+0x1a>
 8005f44:	b14b      	cbz	r3, 8005f5a <__ascii_mbtowc+0x1e>
 8005f46:	7813      	ldrb	r3, [r2, #0]
 8005f48:	600b      	str	r3, [r1, #0]
 8005f4a:	7812      	ldrb	r2, [r2, #0]
 8005f4c:	1e10      	subs	r0, r2, #0
 8005f4e:	bf18      	it	ne
 8005f50:	2001      	movne	r0, #1
 8005f52:	b002      	add	sp, #8
 8005f54:	4770      	bx	lr
 8005f56:	4610      	mov	r0, r2
 8005f58:	e7fb      	b.n	8005f52 <__ascii_mbtowc+0x16>
 8005f5a:	f06f 0001 	mvn.w	r0, #1
 8005f5e:	e7f8      	b.n	8005f52 <__ascii_mbtowc+0x16>

08005f60 <memmove>:
 8005f60:	4288      	cmp	r0, r1
 8005f62:	b510      	push	{r4, lr}
 8005f64:	eb01 0402 	add.w	r4, r1, r2
 8005f68:	d902      	bls.n	8005f70 <memmove+0x10>
 8005f6a:	4284      	cmp	r4, r0
 8005f6c:	4623      	mov	r3, r4
 8005f6e:	d807      	bhi.n	8005f80 <memmove+0x20>
 8005f70:	1e43      	subs	r3, r0, #1
 8005f72:	42a1      	cmp	r1, r4
 8005f74:	d008      	beq.n	8005f88 <memmove+0x28>
 8005f76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f7e:	e7f8      	b.n	8005f72 <memmove+0x12>
 8005f80:	4402      	add	r2, r0
 8005f82:	4601      	mov	r1, r0
 8005f84:	428a      	cmp	r2, r1
 8005f86:	d100      	bne.n	8005f8a <memmove+0x2a>
 8005f88:	bd10      	pop	{r4, pc}
 8005f8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f92:	e7f7      	b.n	8005f84 <memmove+0x24>

08005f94 <__malloc_lock>:
 8005f94:	4801      	ldr	r0, [pc, #4]	; (8005f9c <__malloc_lock+0x8>)
 8005f96:	f000 bc17 	b.w	80067c8 <__retarget_lock_acquire_recursive>
 8005f9a:	bf00      	nop
 8005f9c:	20000270 	.word	0x20000270

08005fa0 <__malloc_unlock>:
 8005fa0:	4801      	ldr	r0, [pc, #4]	; (8005fa8 <__malloc_unlock+0x8>)
 8005fa2:	f000 bc12 	b.w	80067ca <__retarget_lock_release_recursive>
 8005fa6:	bf00      	nop
 8005fa8:	20000270 	.word	0x20000270

08005fac <_realloc_r>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	4607      	mov	r7, r0
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	460e      	mov	r6, r1
 8005fb4:	b921      	cbnz	r1, 8005fc0 <_realloc_r+0x14>
 8005fb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005fba:	4611      	mov	r1, r2
 8005fbc:	f7ff bdc8 	b.w	8005b50 <_malloc_r>
 8005fc0:	b922      	cbnz	r2, 8005fcc <_realloc_r+0x20>
 8005fc2:	f7ff fd75 	bl	8005ab0 <_free_r>
 8005fc6:	4625      	mov	r5, r4
 8005fc8:	4628      	mov	r0, r5
 8005fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fcc:	f000 fc62 	bl	8006894 <_malloc_usable_size_r>
 8005fd0:	42a0      	cmp	r0, r4
 8005fd2:	d20f      	bcs.n	8005ff4 <_realloc_r+0x48>
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	f7ff fdba 	bl	8005b50 <_malloc_r>
 8005fdc:	4605      	mov	r5, r0
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d0f2      	beq.n	8005fc8 <_realloc_r+0x1c>
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	f7ff f9c7 	bl	8005378 <memcpy>
 8005fea:	4631      	mov	r1, r6
 8005fec:	4638      	mov	r0, r7
 8005fee:	f7ff fd5f 	bl	8005ab0 <_free_r>
 8005ff2:	e7e9      	b.n	8005fc8 <_realloc_r+0x1c>
 8005ff4:	4635      	mov	r5, r6
 8005ff6:	e7e7      	b.n	8005fc8 <_realloc_r+0x1c>

08005ff8 <__sfputc_r>:
 8005ff8:	6893      	ldr	r3, [r2, #8]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	b410      	push	{r4}
 8006000:	6093      	str	r3, [r2, #8]
 8006002:	da08      	bge.n	8006016 <__sfputc_r+0x1e>
 8006004:	6994      	ldr	r4, [r2, #24]
 8006006:	42a3      	cmp	r3, r4
 8006008:	db01      	blt.n	800600e <__sfputc_r+0x16>
 800600a:	290a      	cmp	r1, #10
 800600c:	d103      	bne.n	8006016 <__sfputc_r+0x1e>
 800600e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006012:	f000 b94b 	b.w	80062ac <__swbuf_r>
 8006016:	6813      	ldr	r3, [r2, #0]
 8006018:	1c58      	adds	r0, r3, #1
 800601a:	6010      	str	r0, [r2, #0]
 800601c:	7019      	strb	r1, [r3, #0]
 800601e:	4608      	mov	r0, r1
 8006020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006024:	4770      	bx	lr

08006026 <__sfputs_r>:
 8006026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006028:	4606      	mov	r6, r0
 800602a:	460f      	mov	r7, r1
 800602c:	4614      	mov	r4, r2
 800602e:	18d5      	adds	r5, r2, r3
 8006030:	42ac      	cmp	r4, r5
 8006032:	d101      	bne.n	8006038 <__sfputs_r+0x12>
 8006034:	2000      	movs	r0, #0
 8006036:	e007      	b.n	8006048 <__sfputs_r+0x22>
 8006038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800603c:	463a      	mov	r2, r7
 800603e:	4630      	mov	r0, r6
 8006040:	f7ff ffda 	bl	8005ff8 <__sfputc_r>
 8006044:	1c43      	adds	r3, r0, #1
 8006046:	d1f3      	bne.n	8006030 <__sfputs_r+0xa>
 8006048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800604c <_vfiprintf_r>:
 800604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006050:	460d      	mov	r5, r1
 8006052:	b09d      	sub	sp, #116	; 0x74
 8006054:	4614      	mov	r4, r2
 8006056:	4698      	mov	r8, r3
 8006058:	4606      	mov	r6, r0
 800605a:	b118      	cbz	r0, 8006064 <_vfiprintf_r+0x18>
 800605c:	6983      	ldr	r3, [r0, #24]
 800605e:	b90b      	cbnz	r3, 8006064 <_vfiprintf_r+0x18>
 8006060:	f000 fb14 	bl	800668c <__sinit>
 8006064:	4b89      	ldr	r3, [pc, #548]	; (800628c <_vfiprintf_r+0x240>)
 8006066:	429d      	cmp	r5, r3
 8006068:	d11b      	bne.n	80060a2 <_vfiprintf_r+0x56>
 800606a:	6875      	ldr	r5, [r6, #4]
 800606c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800606e:	07d9      	lsls	r1, r3, #31
 8006070:	d405      	bmi.n	800607e <_vfiprintf_r+0x32>
 8006072:	89ab      	ldrh	r3, [r5, #12]
 8006074:	059a      	lsls	r2, r3, #22
 8006076:	d402      	bmi.n	800607e <_vfiprintf_r+0x32>
 8006078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800607a:	f000 fba5 	bl	80067c8 <__retarget_lock_acquire_recursive>
 800607e:	89ab      	ldrh	r3, [r5, #12]
 8006080:	071b      	lsls	r3, r3, #28
 8006082:	d501      	bpl.n	8006088 <_vfiprintf_r+0x3c>
 8006084:	692b      	ldr	r3, [r5, #16]
 8006086:	b9eb      	cbnz	r3, 80060c4 <_vfiprintf_r+0x78>
 8006088:	4629      	mov	r1, r5
 800608a:	4630      	mov	r0, r6
 800608c:	f000 f96e 	bl	800636c <__swsetup_r>
 8006090:	b1c0      	cbz	r0, 80060c4 <_vfiprintf_r+0x78>
 8006092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006094:	07dc      	lsls	r4, r3, #31
 8006096:	d50e      	bpl.n	80060b6 <_vfiprintf_r+0x6a>
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	b01d      	add	sp, #116	; 0x74
 800609e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a2:	4b7b      	ldr	r3, [pc, #492]	; (8006290 <_vfiprintf_r+0x244>)
 80060a4:	429d      	cmp	r5, r3
 80060a6:	d101      	bne.n	80060ac <_vfiprintf_r+0x60>
 80060a8:	68b5      	ldr	r5, [r6, #8]
 80060aa:	e7df      	b.n	800606c <_vfiprintf_r+0x20>
 80060ac:	4b79      	ldr	r3, [pc, #484]	; (8006294 <_vfiprintf_r+0x248>)
 80060ae:	429d      	cmp	r5, r3
 80060b0:	bf08      	it	eq
 80060b2:	68f5      	ldreq	r5, [r6, #12]
 80060b4:	e7da      	b.n	800606c <_vfiprintf_r+0x20>
 80060b6:	89ab      	ldrh	r3, [r5, #12]
 80060b8:	0598      	lsls	r0, r3, #22
 80060ba:	d4ed      	bmi.n	8006098 <_vfiprintf_r+0x4c>
 80060bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060be:	f000 fb84 	bl	80067ca <__retarget_lock_release_recursive>
 80060c2:	e7e9      	b.n	8006098 <_vfiprintf_r+0x4c>
 80060c4:	2300      	movs	r3, #0
 80060c6:	9309      	str	r3, [sp, #36]	; 0x24
 80060c8:	2320      	movs	r3, #32
 80060ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80060d2:	2330      	movs	r3, #48	; 0x30
 80060d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006298 <_vfiprintf_r+0x24c>
 80060d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060dc:	f04f 0901 	mov.w	r9, #1
 80060e0:	4623      	mov	r3, r4
 80060e2:	469a      	mov	sl, r3
 80060e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060e8:	b10a      	cbz	r2, 80060ee <_vfiprintf_r+0xa2>
 80060ea:	2a25      	cmp	r2, #37	; 0x25
 80060ec:	d1f9      	bne.n	80060e2 <_vfiprintf_r+0x96>
 80060ee:	ebba 0b04 	subs.w	fp, sl, r4
 80060f2:	d00b      	beq.n	800610c <_vfiprintf_r+0xc0>
 80060f4:	465b      	mov	r3, fp
 80060f6:	4622      	mov	r2, r4
 80060f8:	4629      	mov	r1, r5
 80060fa:	4630      	mov	r0, r6
 80060fc:	f7ff ff93 	bl	8006026 <__sfputs_r>
 8006100:	3001      	adds	r0, #1
 8006102:	f000 80aa 	beq.w	800625a <_vfiprintf_r+0x20e>
 8006106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006108:	445a      	add	r2, fp
 800610a:	9209      	str	r2, [sp, #36]	; 0x24
 800610c:	f89a 3000 	ldrb.w	r3, [sl]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80a2 	beq.w	800625a <_vfiprintf_r+0x20e>
 8006116:	2300      	movs	r3, #0
 8006118:	f04f 32ff 	mov.w	r2, #4294967295
 800611c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006120:	f10a 0a01 	add.w	sl, sl, #1
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	9307      	str	r3, [sp, #28]
 8006128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800612c:	931a      	str	r3, [sp, #104]	; 0x68
 800612e:	4654      	mov	r4, sl
 8006130:	2205      	movs	r2, #5
 8006132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006136:	4858      	ldr	r0, [pc, #352]	; (8006298 <_vfiprintf_r+0x24c>)
 8006138:	f7fa f852 	bl	80001e0 <memchr>
 800613c:	9a04      	ldr	r2, [sp, #16]
 800613e:	b9d8      	cbnz	r0, 8006178 <_vfiprintf_r+0x12c>
 8006140:	06d1      	lsls	r1, r2, #27
 8006142:	bf44      	itt	mi
 8006144:	2320      	movmi	r3, #32
 8006146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800614a:	0713      	lsls	r3, r2, #28
 800614c:	bf44      	itt	mi
 800614e:	232b      	movmi	r3, #43	; 0x2b
 8006150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006154:	f89a 3000 	ldrb.w	r3, [sl]
 8006158:	2b2a      	cmp	r3, #42	; 0x2a
 800615a:	d015      	beq.n	8006188 <_vfiprintf_r+0x13c>
 800615c:	9a07      	ldr	r2, [sp, #28]
 800615e:	4654      	mov	r4, sl
 8006160:	2000      	movs	r0, #0
 8006162:	f04f 0c0a 	mov.w	ip, #10
 8006166:	4621      	mov	r1, r4
 8006168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800616c:	3b30      	subs	r3, #48	; 0x30
 800616e:	2b09      	cmp	r3, #9
 8006170:	d94e      	bls.n	8006210 <_vfiprintf_r+0x1c4>
 8006172:	b1b0      	cbz	r0, 80061a2 <_vfiprintf_r+0x156>
 8006174:	9207      	str	r2, [sp, #28]
 8006176:	e014      	b.n	80061a2 <_vfiprintf_r+0x156>
 8006178:	eba0 0308 	sub.w	r3, r0, r8
 800617c:	fa09 f303 	lsl.w	r3, r9, r3
 8006180:	4313      	orrs	r3, r2
 8006182:	9304      	str	r3, [sp, #16]
 8006184:	46a2      	mov	sl, r4
 8006186:	e7d2      	b.n	800612e <_vfiprintf_r+0xe2>
 8006188:	9b03      	ldr	r3, [sp, #12]
 800618a:	1d19      	adds	r1, r3, #4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	9103      	str	r1, [sp, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	bfbb      	ittet	lt
 8006194:	425b      	neglt	r3, r3
 8006196:	f042 0202 	orrlt.w	r2, r2, #2
 800619a:	9307      	strge	r3, [sp, #28]
 800619c:	9307      	strlt	r3, [sp, #28]
 800619e:	bfb8      	it	lt
 80061a0:	9204      	strlt	r2, [sp, #16]
 80061a2:	7823      	ldrb	r3, [r4, #0]
 80061a4:	2b2e      	cmp	r3, #46	; 0x2e
 80061a6:	d10c      	bne.n	80061c2 <_vfiprintf_r+0x176>
 80061a8:	7863      	ldrb	r3, [r4, #1]
 80061aa:	2b2a      	cmp	r3, #42	; 0x2a
 80061ac:	d135      	bne.n	800621a <_vfiprintf_r+0x1ce>
 80061ae:	9b03      	ldr	r3, [sp, #12]
 80061b0:	1d1a      	adds	r2, r3, #4
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	9203      	str	r2, [sp, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	bfb8      	it	lt
 80061ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80061be:	3402      	adds	r4, #2
 80061c0:	9305      	str	r3, [sp, #20]
 80061c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062a8 <_vfiprintf_r+0x25c>
 80061c6:	7821      	ldrb	r1, [r4, #0]
 80061c8:	2203      	movs	r2, #3
 80061ca:	4650      	mov	r0, sl
 80061cc:	f7fa f808 	bl	80001e0 <memchr>
 80061d0:	b140      	cbz	r0, 80061e4 <_vfiprintf_r+0x198>
 80061d2:	2340      	movs	r3, #64	; 0x40
 80061d4:	eba0 000a 	sub.w	r0, r0, sl
 80061d8:	fa03 f000 	lsl.w	r0, r3, r0
 80061dc:	9b04      	ldr	r3, [sp, #16]
 80061de:	4303      	orrs	r3, r0
 80061e0:	3401      	adds	r4, #1
 80061e2:	9304      	str	r3, [sp, #16]
 80061e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e8:	482c      	ldr	r0, [pc, #176]	; (800629c <_vfiprintf_r+0x250>)
 80061ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061ee:	2206      	movs	r2, #6
 80061f0:	f7f9 fff6 	bl	80001e0 <memchr>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d03f      	beq.n	8006278 <_vfiprintf_r+0x22c>
 80061f8:	4b29      	ldr	r3, [pc, #164]	; (80062a0 <_vfiprintf_r+0x254>)
 80061fa:	bb1b      	cbnz	r3, 8006244 <_vfiprintf_r+0x1f8>
 80061fc:	9b03      	ldr	r3, [sp, #12]
 80061fe:	3307      	adds	r3, #7
 8006200:	f023 0307 	bic.w	r3, r3, #7
 8006204:	3308      	adds	r3, #8
 8006206:	9303      	str	r3, [sp, #12]
 8006208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620a:	443b      	add	r3, r7
 800620c:	9309      	str	r3, [sp, #36]	; 0x24
 800620e:	e767      	b.n	80060e0 <_vfiprintf_r+0x94>
 8006210:	fb0c 3202 	mla	r2, ip, r2, r3
 8006214:	460c      	mov	r4, r1
 8006216:	2001      	movs	r0, #1
 8006218:	e7a5      	b.n	8006166 <_vfiprintf_r+0x11a>
 800621a:	2300      	movs	r3, #0
 800621c:	3401      	adds	r4, #1
 800621e:	9305      	str	r3, [sp, #20]
 8006220:	4619      	mov	r1, r3
 8006222:	f04f 0c0a 	mov.w	ip, #10
 8006226:	4620      	mov	r0, r4
 8006228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800622c:	3a30      	subs	r2, #48	; 0x30
 800622e:	2a09      	cmp	r2, #9
 8006230:	d903      	bls.n	800623a <_vfiprintf_r+0x1ee>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0c5      	beq.n	80061c2 <_vfiprintf_r+0x176>
 8006236:	9105      	str	r1, [sp, #20]
 8006238:	e7c3      	b.n	80061c2 <_vfiprintf_r+0x176>
 800623a:	fb0c 2101 	mla	r1, ip, r1, r2
 800623e:	4604      	mov	r4, r0
 8006240:	2301      	movs	r3, #1
 8006242:	e7f0      	b.n	8006226 <_vfiprintf_r+0x1da>
 8006244:	ab03      	add	r3, sp, #12
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	462a      	mov	r2, r5
 800624a:	4b16      	ldr	r3, [pc, #88]	; (80062a4 <_vfiprintf_r+0x258>)
 800624c:	a904      	add	r1, sp, #16
 800624e:	4630      	mov	r0, r6
 8006250:	f7fd fe24 	bl	8003e9c <_printf_float>
 8006254:	4607      	mov	r7, r0
 8006256:	1c78      	adds	r0, r7, #1
 8006258:	d1d6      	bne.n	8006208 <_vfiprintf_r+0x1bc>
 800625a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800625c:	07d9      	lsls	r1, r3, #31
 800625e:	d405      	bmi.n	800626c <_vfiprintf_r+0x220>
 8006260:	89ab      	ldrh	r3, [r5, #12]
 8006262:	059a      	lsls	r2, r3, #22
 8006264:	d402      	bmi.n	800626c <_vfiprintf_r+0x220>
 8006266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006268:	f000 faaf 	bl	80067ca <__retarget_lock_release_recursive>
 800626c:	89ab      	ldrh	r3, [r5, #12]
 800626e:	065b      	lsls	r3, r3, #25
 8006270:	f53f af12 	bmi.w	8006098 <_vfiprintf_r+0x4c>
 8006274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006276:	e711      	b.n	800609c <_vfiprintf_r+0x50>
 8006278:	ab03      	add	r3, sp, #12
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	462a      	mov	r2, r5
 800627e:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <_vfiprintf_r+0x258>)
 8006280:	a904      	add	r1, sp, #16
 8006282:	4630      	mov	r0, r6
 8006284:	f7fe f8ae 	bl	80043e4 <_printf_i>
 8006288:	e7e4      	b.n	8006254 <_vfiprintf_r+0x208>
 800628a:	bf00      	nop
 800628c:	080072fc 	.word	0x080072fc
 8006290:	0800731c 	.word	0x0800731c
 8006294:	080072dc 	.word	0x080072dc
 8006298:	08007184 	.word	0x08007184
 800629c:	0800718e 	.word	0x0800718e
 80062a0:	08003e9d 	.word	0x08003e9d
 80062a4:	08006027 	.word	0x08006027
 80062a8:	0800718a 	.word	0x0800718a

080062ac <__swbuf_r>:
 80062ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ae:	460e      	mov	r6, r1
 80062b0:	4614      	mov	r4, r2
 80062b2:	4605      	mov	r5, r0
 80062b4:	b118      	cbz	r0, 80062be <__swbuf_r+0x12>
 80062b6:	6983      	ldr	r3, [r0, #24]
 80062b8:	b90b      	cbnz	r3, 80062be <__swbuf_r+0x12>
 80062ba:	f000 f9e7 	bl	800668c <__sinit>
 80062be:	4b21      	ldr	r3, [pc, #132]	; (8006344 <__swbuf_r+0x98>)
 80062c0:	429c      	cmp	r4, r3
 80062c2:	d12b      	bne.n	800631c <__swbuf_r+0x70>
 80062c4:	686c      	ldr	r4, [r5, #4]
 80062c6:	69a3      	ldr	r3, [r4, #24]
 80062c8:	60a3      	str	r3, [r4, #8]
 80062ca:	89a3      	ldrh	r3, [r4, #12]
 80062cc:	071a      	lsls	r2, r3, #28
 80062ce:	d52f      	bpl.n	8006330 <__swbuf_r+0x84>
 80062d0:	6923      	ldr	r3, [r4, #16]
 80062d2:	b36b      	cbz	r3, 8006330 <__swbuf_r+0x84>
 80062d4:	6923      	ldr	r3, [r4, #16]
 80062d6:	6820      	ldr	r0, [r4, #0]
 80062d8:	1ac0      	subs	r0, r0, r3
 80062da:	6963      	ldr	r3, [r4, #20]
 80062dc:	b2f6      	uxtb	r6, r6
 80062de:	4283      	cmp	r3, r0
 80062e0:	4637      	mov	r7, r6
 80062e2:	dc04      	bgt.n	80062ee <__swbuf_r+0x42>
 80062e4:	4621      	mov	r1, r4
 80062e6:	4628      	mov	r0, r5
 80062e8:	f000 f93c 	bl	8006564 <_fflush_r>
 80062ec:	bb30      	cbnz	r0, 800633c <__swbuf_r+0x90>
 80062ee:	68a3      	ldr	r3, [r4, #8]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	60a3      	str	r3, [r4, #8]
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	6022      	str	r2, [r4, #0]
 80062fa:	701e      	strb	r6, [r3, #0]
 80062fc:	6963      	ldr	r3, [r4, #20]
 80062fe:	3001      	adds	r0, #1
 8006300:	4283      	cmp	r3, r0
 8006302:	d004      	beq.n	800630e <__swbuf_r+0x62>
 8006304:	89a3      	ldrh	r3, [r4, #12]
 8006306:	07db      	lsls	r3, r3, #31
 8006308:	d506      	bpl.n	8006318 <__swbuf_r+0x6c>
 800630a:	2e0a      	cmp	r6, #10
 800630c:	d104      	bne.n	8006318 <__swbuf_r+0x6c>
 800630e:	4621      	mov	r1, r4
 8006310:	4628      	mov	r0, r5
 8006312:	f000 f927 	bl	8006564 <_fflush_r>
 8006316:	b988      	cbnz	r0, 800633c <__swbuf_r+0x90>
 8006318:	4638      	mov	r0, r7
 800631a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <__swbuf_r+0x9c>)
 800631e:	429c      	cmp	r4, r3
 8006320:	d101      	bne.n	8006326 <__swbuf_r+0x7a>
 8006322:	68ac      	ldr	r4, [r5, #8]
 8006324:	e7cf      	b.n	80062c6 <__swbuf_r+0x1a>
 8006326:	4b09      	ldr	r3, [pc, #36]	; (800634c <__swbuf_r+0xa0>)
 8006328:	429c      	cmp	r4, r3
 800632a:	bf08      	it	eq
 800632c:	68ec      	ldreq	r4, [r5, #12]
 800632e:	e7ca      	b.n	80062c6 <__swbuf_r+0x1a>
 8006330:	4621      	mov	r1, r4
 8006332:	4628      	mov	r0, r5
 8006334:	f000 f81a 	bl	800636c <__swsetup_r>
 8006338:	2800      	cmp	r0, #0
 800633a:	d0cb      	beq.n	80062d4 <__swbuf_r+0x28>
 800633c:	f04f 37ff 	mov.w	r7, #4294967295
 8006340:	e7ea      	b.n	8006318 <__swbuf_r+0x6c>
 8006342:	bf00      	nop
 8006344:	080072fc 	.word	0x080072fc
 8006348:	0800731c 	.word	0x0800731c
 800634c:	080072dc 	.word	0x080072dc

08006350 <__ascii_wctomb>:
 8006350:	b149      	cbz	r1, 8006366 <__ascii_wctomb+0x16>
 8006352:	2aff      	cmp	r2, #255	; 0xff
 8006354:	bf85      	ittet	hi
 8006356:	238a      	movhi	r3, #138	; 0x8a
 8006358:	6003      	strhi	r3, [r0, #0]
 800635a:	700a      	strbls	r2, [r1, #0]
 800635c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006360:	bf98      	it	ls
 8006362:	2001      	movls	r0, #1
 8006364:	4770      	bx	lr
 8006366:	4608      	mov	r0, r1
 8006368:	4770      	bx	lr
	...

0800636c <__swsetup_r>:
 800636c:	4b32      	ldr	r3, [pc, #200]	; (8006438 <__swsetup_r+0xcc>)
 800636e:	b570      	push	{r4, r5, r6, lr}
 8006370:	681d      	ldr	r5, [r3, #0]
 8006372:	4606      	mov	r6, r0
 8006374:	460c      	mov	r4, r1
 8006376:	b125      	cbz	r5, 8006382 <__swsetup_r+0x16>
 8006378:	69ab      	ldr	r3, [r5, #24]
 800637a:	b913      	cbnz	r3, 8006382 <__swsetup_r+0x16>
 800637c:	4628      	mov	r0, r5
 800637e:	f000 f985 	bl	800668c <__sinit>
 8006382:	4b2e      	ldr	r3, [pc, #184]	; (800643c <__swsetup_r+0xd0>)
 8006384:	429c      	cmp	r4, r3
 8006386:	d10f      	bne.n	80063a8 <__swsetup_r+0x3c>
 8006388:	686c      	ldr	r4, [r5, #4]
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006390:	0719      	lsls	r1, r3, #28
 8006392:	d42c      	bmi.n	80063ee <__swsetup_r+0x82>
 8006394:	06dd      	lsls	r5, r3, #27
 8006396:	d411      	bmi.n	80063bc <__swsetup_r+0x50>
 8006398:	2309      	movs	r3, #9
 800639a:	6033      	str	r3, [r6, #0]
 800639c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063a0:	81a3      	strh	r3, [r4, #12]
 80063a2:	f04f 30ff 	mov.w	r0, #4294967295
 80063a6:	e03e      	b.n	8006426 <__swsetup_r+0xba>
 80063a8:	4b25      	ldr	r3, [pc, #148]	; (8006440 <__swsetup_r+0xd4>)
 80063aa:	429c      	cmp	r4, r3
 80063ac:	d101      	bne.n	80063b2 <__swsetup_r+0x46>
 80063ae:	68ac      	ldr	r4, [r5, #8]
 80063b0:	e7eb      	b.n	800638a <__swsetup_r+0x1e>
 80063b2:	4b24      	ldr	r3, [pc, #144]	; (8006444 <__swsetup_r+0xd8>)
 80063b4:	429c      	cmp	r4, r3
 80063b6:	bf08      	it	eq
 80063b8:	68ec      	ldreq	r4, [r5, #12]
 80063ba:	e7e6      	b.n	800638a <__swsetup_r+0x1e>
 80063bc:	0758      	lsls	r0, r3, #29
 80063be:	d512      	bpl.n	80063e6 <__swsetup_r+0x7a>
 80063c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063c2:	b141      	cbz	r1, 80063d6 <__swsetup_r+0x6a>
 80063c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063c8:	4299      	cmp	r1, r3
 80063ca:	d002      	beq.n	80063d2 <__swsetup_r+0x66>
 80063cc:	4630      	mov	r0, r6
 80063ce:	f7ff fb6f 	bl	8005ab0 <_free_r>
 80063d2:	2300      	movs	r3, #0
 80063d4:	6363      	str	r3, [r4, #52]	; 0x34
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063dc:	81a3      	strh	r3, [r4, #12]
 80063de:	2300      	movs	r3, #0
 80063e0:	6063      	str	r3, [r4, #4]
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	89a3      	ldrh	r3, [r4, #12]
 80063e8:	f043 0308 	orr.w	r3, r3, #8
 80063ec:	81a3      	strh	r3, [r4, #12]
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	b94b      	cbnz	r3, 8006406 <__swsetup_r+0x9a>
 80063f2:	89a3      	ldrh	r3, [r4, #12]
 80063f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063fc:	d003      	beq.n	8006406 <__swsetup_r+0x9a>
 80063fe:	4621      	mov	r1, r4
 8006400:	4630      	mov	r0, r6
 8006402:	f000 fa07 	bl	8006814 <__smakebuf_r>
 8006406:	89a0      	ldrh	r0, [r4, #12]
 8006408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800640c:	f010 0301 	ands.w	r3, r0, #1
 8006410:	d00a      	beq.n	8006428 <__swsetup_r+0xbc>
 8006412:	2300      	movs	r3, #0
 8006414:	60a3      	str	r3, [r4, #8]
 8006416:	6963      	ldr	r3, [r4, #20]
 8006418:	425b      	negs	r3, r3
 800641a:	61a3      	str	r3, [r4, #24]
 800641c:	6923      	ldr	r3, [r4, #16]
 800641e:	b943      	cbnz	r3, 8006432 <__swsetup_r+0xc6>
 8006420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006424:	d1ba      	bne.n	800639c <__swsetup_r+0x30>
 8006426:	bd70      	pop	{r4, r5, r6, pc}
 8006428:	0781      	lsls	r1, r0, #30
 800642a:	bf58      	it	pl
 800642c:	6963      	ldrpl	r3, [r4, #20]
 800642e:	60a3      	str	r3, [r4, #8]
 8006430:	e7f4      	b.n	800641c <__swsetup_r+0xb0>
 8006432:	2000      	movs	r0, #0
 8006434:	e7f7      	b.n	8006426 <__swsetup_r+0xba>
 8006436:	bf00      	nop
 8006438:	20000050 	.word	0x20000050
 800643c:	080072fc 	.word	0x080072fc
 8006440:	0800731c 	.word	0x0800731c
 8006444:	080072dc 	.word	0x080072dc

08006448 <abort>:
 8006448:	b508      	push	{r3, lr}
 800644a:	2006      	movs	r0, #6
 800644c:	f000 fa52 	bl	80068f4 <raise>
 8006450:	2001      	movs	r0, #1
 8006452:	f7fc ffe5 	bl	8003420 <_exit>
	...

08006458 <__sflush_r>:
 8006458:	898a      	ldrh	r2, [r1, #12]
 800645a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800645e:	4605      	mov	r5, r0
 8006460:	0710      	lsls	r0, r2, #28
 8006462:	460c      	mov	r4, r1
 8006464:	d458      	bmi.n	8006518 <__sflush_r+0xc0>
 8006466:	684b      	ldr	r3, [r1, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	dc05      	bgt.n	8006478 <__sflush_r+0x20>
 800646c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	dc02      	bgt.n	8006478 <__sflush_r+0x20>
 8006472:	2000      	movs	r0, #0
 8006474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800647a:	2e00      	cmp	r6, #0
 800647c:	d0f9      	beq.n	8006472 <__sflush_r+0x1a>
 800647e:	2300      	movs	r3, #0
 8006480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006484:	682f      	ldr	r7, [r5, #0]
 8006486:	602b      	str	r3, [r5, #0]
 8006488:	d032      	beq.n	80064f0 <__sflush_r+0x98>
 800648a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800648c:	89a3      	ldrh	r3, [r4, #12]
 800648e:	075a      	lsls	r2, r3, #29
 8006490:	d505      	bpl.n	800649e <__sflush_r+0x46>
 8006492:	6863      	ldr	r3, [r4, #4]
 8006494:	1ac0      	subs	r0, r0, r3
 8006496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006498:	b10b      	cbz	r3, 800649e <__sflush_r+0x46>
 800649a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800649c:	1ac0      	subs	r0, r0, r3
 800649e:	2300      	movs	r3, #0
 80064a0:	4602      	mov	r2, r0
 80064a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064a4:	6a21      	ldr	r1, [r4, #32]
 80064a6:	4628      	mov	r0, r5
 80064a8:	47b0      	blx	r6
 80064aa:	1c43      	adds	r3, r0, #1
 80064ac:	89a3      	ldrh	r3, [r4, #12]
 80064ae:	d106      	bne.n	80064be <__sflush_r+0x66>
 80064b0:	6829      	ldr	r1, [r5, #0]
 80064b2:	291d      	cmp	r1, #29
 80064b4:	d82c      	bhi.n	8006510 <__sflush_r+0xb8>
 80064b6:	4a2a      	ldr	r2, [pc, #168]	; (8006560 <__sflush_r+0x108>)
 80064b8:	40ca      	lsrs	r2, r1
 80064ba:	07d6      	lsls	r6, r2, #31
 80064bc:	d528      	bpl.n	8006510 <__sflush_r+0xb8>
 80064be:	2200      	movs	r2, #0
 80064c0:	6062      	str	r2, [r4, #4]
 80064c2:	04d9      	lsls	r1, r3, #19
 80064c4:	6922      	ldr	r2, [r4, #16]
 80064c6:	6022      	str	r2, [r4, #0]
 80064c8:	d504      	bpl.n	80064d4 <__sflush_r+0x7c>
 80064ca:	1c42      	adds	r2, r0, #1
 80064cc:	d101      	bne.n	80064d2 <__sflush_r+0x7a>
 80064ce:	682b      	ldr	r3, [r5, #0]
 80064d0:	b903      	cbnz	r3, 80064d4 <__sflush_r+0x7c>
 80064d2:	6560      	str	r0, [r4, #84]	; 0x54
 80064d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064d6:	602f      	str	r7, [r5, #0]
 80064d8:	2900      	cmp	r1, #0
 80064da:	d0ca      	beq.n	8006472 <__sflush_r+0x1a>
 80064dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064e0:	4299      	cmp	r1, r3
 80064e2:	d002      	beq.n	80064ea <__sflush_r+0x92>
 80064e4:	4628      	mov	r0, r5
 80064e6:	f7ff fae3 	bl	8005ab0 <_free_r>
 80064ea:	2000      	movs	r0, #0
 80064ec:	6360      	str	r0, [r4, #52]	; 0x34
 80064ee:	e7c1      	b.n	8006474 <__sflush_r+0x1c>
 80064f0:	6a21      	ldr	r1, [r4, #32]
 80064f2:	2301      	movs	r3, #1
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b0      	blx	r6
 80064f8:	1c41      	adds	r1, r0, #1
 80064fa:	d1c7      	bne.n	800648c <__sflush_r+0x34>
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0c4      	beq.n	800648c <__sflush_r+0x34>
 8006502:	2b1d      	cmp	r3, #29
 8006504:	d001      	beq.n	800650a <__sflush_r+0xb2>
 8006506:	2b16      	cmp	r3, #22
 8006508:	d101      	bne.n	800650e <__sflush_r+0xb6>
 800650a:	602f      	str	r7, [r5, #0]
 800650c:	e7b1      	b.n	8006472 <__sflush_r+0x1a>
 800650e:	89a3      	ldrh	r3, [r4, #12]
 8006510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006514:	81a3      	strh	r3, [r4, #12]
 8006516:	e7ad      	b.n	8006474 <__sflush_r+0x1c>
 8006518:	690f      	ldr	r7, [r1, #16]
 800651a:	2f00      	cmp	r7, #0
 800651c:	d0a9      	beq.n	8006472 <__sflush_r+0x1a>
 800651e:	0793      	lsls	r3, r2, #30
 8006520:	680e      	ldr	r6, [r1, #0]
 8006522:	bf08      	it	eq
 8006524:	694b      	ldreq	r3, [r1, #20]
 8006526:	600f      	str	r7, [r1, #0]
 8006528:	bf18      	it	ne
 800652a:	2300      	movne	r3, #0
 800652c:	eba6 0807 	sub.w	r8, r6, r7
 8006530:	608b      	str	r3, [r1, #8]
 8006532:	f1b8 0f00 	cmp.w	r8, #0
 8006536:	dd9c      	ble.n	8006472 <__sflush_r+0x1a>
 8006538:	6a21      	ldr	r1, [r4, #32]
 800653a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800653c:	4643      	mov	r3, r8
 800653e:	463a      	mov	r2, r7
 8006540:	4628      	mov	r0, r5
 8006542:	47b0      	blx	r6
 8006544:	2800      	cmp	r0, #0
 8006546:	dc06      	bgt.n	8006556 <__sflush_r+0xfe>
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800654e:	81a3      	strh	r3, [r4, #12]
 8006550:	f04f 30ff 	mov.w	r0, #4294967295
 8006554:	e78e      	b.n	8006474 <__sflush_r+0x1c>
 8006556:	4407      	add	r7, r0
 8006558:	eba8 0800 	sub.w	r8, r8, r0
 800655c:	e7e9      	b.n	8006532 <__sflush_r+0xda>
 800655e:	bf00      	nop
 8006560:	20400001 	.word	0x20400001

08006564 <_fflush_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	690b      	ldr	r3, [r1, #16]
 8006568:	4605      	mov	r5, r0
 800656a:	460c      	mov	r4, r1
 800656c:	b913      	cbnz	r3, 8006574 <_fflush_r+0x10>
 800656e:	2500      	movs	r5, #0
 8006570:	4628      	mov	r0, r5
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	b118      	cbz	r0, 800657e <_fflush_r+0x1a>
 8006576:	6983      	ldr	r3, [r0, #24]
 8006578:	b90b      	cbnz	r3, 800657e <_fflush_r+0x1a>
 800657a:	f000 f887 	bl	800668c <__sinit>
 800657e:	4b14      	ldr	r3, [pc, #80]	; (80065d0 <_fflush_r+0x6c>)
 8006580:	429c      	cmp	r4, r3
 8006582:	d11b      	bne.n	80065bc <_fflush_r+0x58>
 8006584:	686c      	ldr	r4, [r5, #4]
 8006586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0ef      	beq.n	800656e <_fflush_r+0xa>
 800658e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006590:	07d0      	lsls	r0, r2, #31
 8006592:	d404      	bmi.n	800659e <_fflush_r+0x3a>
 8006594:	0599      	lsls	r1, r3, #22
 8006596:	d402      	bmi.n	800659e <_fflush_r+0x3a>
 8006598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800659a:	f000 f915 	bl	80067c8 <__retarget_lock_acquire_recursive>
 800659e:	4628      	mov	r0, r5
 80065a0:	4621      	mov	r1, r4
 80065a2:	f7ff ff59 	bl	8006458 <__sflush_r>
 80065a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065a8:	07da      	lsls	r2, r3, #31
 80065aa:	4605      	mov	r5, r0
 80065ac:	d4e0      	bmi.n	8006570 <_fflush_r+0xc>
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	059b      	lsls	r3, r3, #22
 80065b2:	d4dd      	bmi.n	8006570 <_fflush_r+0xc>
 80065b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065b6:	f000 f908 	bl	80067ca <__retarget_lock_release_recursive>
 80065ba:	e7d9      	b.n	8006570 <_fflush_r+0xc>
 80065bc:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <_fflush_r+0x70>)
 80065be:	429c      	cmp	r4, r3
 80065c0:	d101      	bne.n	80065c6 <_fflush_r+0x62>
 80065c2:	68ac      	ldr	r4, [r5, #8]
 80065c4:	e7df      	b.n	8006586 <_fflush_r+0x22>
 80065c6:	4b04      	ldr	r3, [pc, #16]	; (80065d8 <_fflush_r+0x74>)
 80065c8:	429c      	cmp	r4, r3
 80065ca:	bf08      	it	eq
 80065cc:	68ec      	ldreq	r4, [r5, #12]
 80065ce:	e7da      	b.n	8006586 <_fflush_r+0x22>
 80065d0:	080072fc 	.word	0x080072fc
 80065d4:	0800731c 	.word	0x0800731c
 80065d8:	080072dc 	.word	0x080072dc

080065dc <std>:
 80065dc:	2300      	movs	r3, #0
 80065de:	b510      	push	{r4, lr}
 80065e0:	4604      	mov	r4, r0
 80065e2:	e9c0 3300 	strd	r3, r3, [r0]
 80065e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065ea:	6083      	str	r3, [r0, #8]
 80065ec:	8181      	strh	r1, [r0, #12]
 80065ee:	6643      	str	r3, [r0, #100]	; 0x64
 80065f0:	81c2      	strh	r2, [r0, #14]
 80065f2:	6183      	str	r3, [r0, #24]
 80065f4:	4619      	mov	r1, r3
 80065f6:	2208      	movs	r2, #8
 80065f8:	305c      	adds	r0, #92	; 0x5c
 80065fa:	f7fd fba7 	bl	8003d4c <memset>
 80065fe:	4b05      	ldr	r3, [pc, #20]	; (8006614 <std+0x38>)
 8006600:	6263      	str	r3, [r4, #36]	; 0x24
 8006602:	4b05      	ldr	r3, [pc, #20]	; (8006618 <std+0x3c>)
 8006604:	62a3      	str	r3, [r4, #40]	; 0x28
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <std+0x40>)
 8006608:	62e3      	str	r3, [r4, #44]	; 0x2c
 800660a:	4b05      	ldr	r3, [pc, #20]	; (8006620 <std+0x44>)
 800660c:	6224      	str	r4, [r4, #32]
 800660e:	6323      	str	r3, [r4, #48]	; 0x30
 8006610:	bd10      	pop	{r4, pc}
 8006612:	bf00      	nop
 8006614:	0800692d 	.word	0x0800692d
 8006618:	0800694f 	.word	0x0800694f
 800661c:	08006987 	.word	0x08006987
 8006620:	080069ab 	.word	0x080069ab

08006624 <_cleanup_r>:
 8006624:	4901      	ldr	r1, [pc, #4]	; (800662c <_cleanup_r+0x8>)
 8006626:	f000 b8af 	b.w	8006788 <_fwalk_reent>
 800662a:	bf00      	nop
 800662c:	08006565 	.word	0x08006565

08006630 <__sfmoreglue>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	1e4a      	subs	r2, r1, #1
 8006634:	2568      	movs	r5, #104	; 0x68
 8006636:	4355      	muls	r5, r2
 8006638:	460e      	mov	r6, r1
 800663a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800663e:	f7ff fa87 	bl	8005b50 <_malloc_r>
 8006642:	4604      	mov	r4, r0
 8006644:	b140      	cbz	r0, 8006658 <__sfmoreglue+0x28>
 8006646:	2100      	movs	r1, #0
 8006648:	e9c0 1600 	strd	r1, r6, [r0]
 800664c:	300c      	adds	r0, #12
 800664e:	60a0      	str	r0, [r4, #8]
 8006650:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006654:	f7fd fb7a 	bl	8003d4c <memset>
 8006658:	4620      	mov	r0, r4
 800665a:	bd70      	pop	{r4, r5, r6, pc}

0800665c <__sfp_lock_acquire>:
 800665c:	4801      	ldr	r0, [pc, #4]	; (8006664 <__sfp_lock_acquire+0x8>)
 800665e:	f000 b8b3 	b.w	80067c8 <__retarget_lock_acquire_recursive>
 8006662:	bf00      	nop
 8006664:	20000274 	.word	0x20000274

08006668 <__sfp_lock_release>:
 8006668:	4801      	ldr	r0, [pc, #4]	; (8006670 <__sfp_lock_release+0x8>)
 800666a:	f000 b8ae 	b.w	80067ca <__retarget_lock_release_recursive>
 800666e:	bf00      	nop
 8006670:	20000274 	.word	0x20000274

08006674 <__sinit_lock_acquire>:
 8006674:	4801      	ldr	r0, [pc, #4]	; (800667c <__sinit_lock_acquire+0x8>)
 8006676:	f000 b8a7 	b.w	80067c8 <__retarget_lock_acquire_recursive>
 800667a:	bf00      	nop
 800667c:	2000026f 	.word	0x2000026f

08006680 <__sinit_lock_release>:
 8006680:	4801      	ldr	r0, [pc, #4]	; (8006688 <__sinit_lock_release+0x8>)
 8006682:	f000 b8a2 	b.w	80067ca <__retarget_lock_release_recursive>
 8006686:	bf00      	nop
 8006688:	2000026f 	.word	0x2000026f

0800668c <__sinit>:
 800668c:	b510      	push	{r4, lr}
 800668e:	4604      	mov	r4, r0
 8006690:	f7ff fff0 	bl	8006674 <__sinit_lock_acquire>
 8006694:	69a3      	ldr	r3, [r4, #24]
 8006696:	b11b      	cbz	r3, 80066a0 <__sinit+0x14>
 8006698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800669c:	f7ff bff0 	b.w	8006680 <__sinit_lock_release>
 80066a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066a4:	6523      	str	r3, [r4, #80]	; 0x50
 80066a6:	4b13      	ldr	r3, [pc, #76]	; (80066f4 <__sinit+0x68>)
 80066a8:	4a13      	ldr	r2, [pc, #76]	; (80066f8 <__sinit+0x6c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80066ae:	42a3      	cmp	r3, r4
 80066b0:	bf04      	itt	eq
 80066b2:	2301      	moveq	r3, #1
 80066b4:	61a3      	streq	r3, [r4, #24]
 80066b6:	4620      	mov	r0, r4
 80066b8:	f000 f820 	bl	80066fc <__sfp>
 80066bc:	6060      	str	r0, [r4, #4]
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 f81c 	bl	80066fc <__sfp>
 80066c4:	60a0      	str	r0, [r4, #8]
 80066c6:	4620      	mov	r0, r4
 80066c8:	f000 f818 	bl	80066fc <__sfp>
 80066cc:	2200      	movs	r2, #0
 80066ce:	60e0      	str	r0, [r4, #12]
 80066d0:	2104      	movs	r1, #4
 80066d2:	6860      	ldr	r0, [r4, #4]
 80066d4:	f7ff ff82 	bl	80065dc <std>
 80066d8:	68a0      	ldr	r0, [r4, #8]
 80066da:	2201      	movs	r2, #1
 80066dc:	2109      	movs	r1, #9
 80066de:	f7ff ff7d 	bl	80065dc <std>
 80066e2:	68e0      	ldr	r0, [r4, #12]
 80066e4:	2202      	movs	r2, #2
 80066e6:	2112      	movs	r1, #18
 80066e8:	f7ff ff78 	bl	80065dc <std>
 80066ec:	2301      	movs	r3, #1
 80066ee:	61a3      	str	r3, [r4, #24]
 80066f0:	e7d2      	b.n	8006698 <__sinit+0xc>
 80066f2:	bf00      	nop
 80066f4:	08006f58 	.word	0x08006f58
 80066f8:	08006625 	.word	0x08006625

080066fc <__sfp>:
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	4607      	mov	r7, r0
 8006700:	f7ff ffac 	bl	800665c <__sfp_lock_acquire>
 8006704:	4b1e      	ldr	r3, [pc, #120]	; (8006780 <__sfp+0x84>)
 8006706:	681e      	ldr	r6, [r3, #0]
 8006708:	69b3      	ldr	r3, [r6, #24]
 800670a:	b913      	cbnz	r3, 8006712 <__sfp+0x16>
 800670c:	4630      	mov	r0, r6
 800670e:	f7ff ffbd 	bl	800668c <__sinit>
 8006712:	3648      	adds	r6, #72	; 0x48
 8006714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006718:	3b01      	subs	r3, #1
 800671a:	d503      	bpl.n	8006724 <__sfp+0x28>
 800671c:	6833      	ldr	r3, [r6, #0]
 800671e:	b30b      	cbz	r3, 8006764 <__sfp+0x68>
 8006720:	6836      	ldr	r6, [r6, #0]
 8006722:	e7f7      	b.n	8006714 <__sfp+0x18>
 8006724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006728:	b9d5      	cbnz	r5, 8006760 <__sfp+0x64>
 800672a:	4b16      	ldr	r3, [pc, #88]	; (8006784 <__sfp+0x88>)
 800672c:	60e3      	str	r3, [r4, #12]
 800672e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006732:	6665      	str	r5, [r4, #100]	; 0x64
 8006734:	f000 f847 	bl	80067c6 <__retarget_lock_init_recursive>
 8006738:	f7ff ff96 	bl	8006668 <__sfp_lock_release>
 800673c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006740:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006744:	6025      	str	r5, [r4, #0]
 8006746:	61a5      	str	r5, [r4, #24]
 8006748:	2208      	movs	r2, #8
 800674a:	4629      	mov	r1, r5
 800674c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006750:	f7fd fafc 	bl	8003d4c <memset>
 8006754:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006758:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800675c:	4620      	mov	r0, r4
 800675e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006760:	3468      	adds	r4, #104	; 0x68
 8006762:	e7d9      	b.n	8006718 <__sfp+0x1c>
 8006764:	2104      	movs	r1, #4
 8006766:	4638      	mov	r0, r7
 8006768:	f7ff ff62 	bl	8006630 <__sfmoreglue>
 800676c:	4604      	mov	r4, r0
 800676e:	6030      	str	r0, [r6, #0]
 8006770:	2800      	cmp	r0, #0
 8006772:	d1d5      	bne.n	8006720 <__sfp+0x24>
 8006774:	f7ff ff78 	bl	8006668 <__sfp_lock_release>
 8006778:	230c      	movs	r3, #12
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	e7ee      	b.n	800675c <__sfp+0x60>
 800677e:	bf00      	nop
 8006780:	08006f58 	.word	0x08006f58
 8006784:	ffff0001 	.word	0xffff0001

08006788 <_fwalk_reent>:
 8006788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800678c:	4606      	mov	r6, r0
 800678e:	4688      	mov	r8, r1
 8006790:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006794:	2700      	movs	r7, #0
 8006796:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800679a:	f1b9 0901 	subs.w	r9, r9, #1
 800679e:	d505      	bpl.n	80067ac <_fwalk_reent+0x24>
 80067a0:	6824      	ldr	r4, [r4, #0]
 80067a2:	2c00      	cmp	r4, #0
 80067a4:	d1f7      	bne.n	8006796 <_fwalk_reent+0xe>
 80067a6:	4638      	mov	r0, r7
 80067a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ac:	89ab      	ldrh	r3, [r5, #12]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d907      	bls.n	80067c2 <_fwalk_reent+0x3a>
 80067b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067b6:	3301      	adds	r3, #1
 80067b8:	d003      	beq.n	80067c2 <_fwalk_reent+0x3a>
 80067ba:	4629      	mov	r1, r5
 80067bc:	4630      	mov	r0, r6
 80067be:	47c0      	blx	r8
 80067c0:	4307      	orrs	r7, r0
 80067c2:	3568      	adds	r5, #104	; 0x68
 80067c4:	e7e9      	b.n	800679a <_fwalk_reent+0x12>

080067c6 <__retarget_lock_init_recursive>:
 80067c6:	4770      	bx	lr

080067c8 <__retarget_lock_acquire_recursive>:
 80067c8:	4770      	bx	lr

080067ca <__retarget_lock_release_recursive>:
 80067ca:	4770      	bx	lr

080067cc <__swhatbuf_r>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	460e      	mov	r6, r1
 80067d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d4:	2900      	cmp	r1, #0
 80067d6:	b096      	sub	sp, #88	; 0x58
 80067d8:	4614      	mov	r4, r2
 80067da:	461d      	mov	r5, r3
 80067dc:	da07      	bge.n	80067ee <__swhatbuf_r+0x22>
 80067de:	2300      	movs	r3, #0
 80067e0:	602b      	str	r3, [r5, #0]
 80067e2:	89b3      	ldrh	r3, [r6, #12]
 80067e4:	061a      	lsls	r2, r3, #24
 80067e6:	d410      	bmi.n	800680a <__swhatbuf_r+0x3e>
 80067e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067ec:	e00e      	b.n	800680c <__swhatbuf_r+0x40>
 80067ee:	466a      	mov	r2, sp
 80067f0:	f000 f902 	bl	80069f8 <_fstat_r>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	dbf2      	blt.n	80067de <__swhatbuf_r+0x12>
 80067f8:	9a01      	ldr	r2, [sp, #4]
 80067fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006802:	425a      	negs	r2, r3
 8006804:	415a      	adcs	r2, r3
 8006806:	602a      	str	r2, [r5, #0]
 8006808:	e7ee      	b.n	80067e8 <__swhatbuf_r+0x1c>
 800680a:	2340      	movs	r3, #64	; 0x40
 800680c:	2000      	movs	r0, #0
 800680e:	6023      	str	r3, [r4, #0]
 8006810:	b016      	add	sp, #88	; 0x58
 8006812:	bd70      	pop	{r4, r5, r6, pc}

08006814 <__smakebuf_r>:
 8006814:	898b      	ldrh	r3, [r1, #12]
 8006816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006818:	079d      	lsls	r5, r3, #30
 800681a:	4606      	mov	r6, r0
 800681c:	460c      	mov	r4, r1
 800681e:	d507      	bpl.n	8006830 <__smakebuf_r+0x1c>
 8006820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	6123      	str	r3, [r4, #16]
 8006828:	2301      	movs	r3, #1
 800682a:	6163      	str	r3, [r4, #20]
 800682c:	b002      	add	sp, #8
 800682e:	bd70      	pop	{r4, r5, r6, pc}
 8006830:	ab01      	add	r3, sp, #4
 8006832:	466a      	mov	r2, sp
 8006834:	f7ff ffca 	bl	80067cc <__swhatbuf_r>
 8006838:	9900      	ldr	r1, [sp, #0]
 800683a:	4605      	mov	r5, r0
 800683c:	4630      	mov	r0, r6
 800683e:	f7ff f987 	bl	8005b50 <_malloc_r>
 8006842:	b948      	cbnz	r0, 8006858 <__smakebuf_r+0x44>
 8006844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006848:	059a      	lsls	r2, r3, #22
 800684a:	d4ef      	bmi.n	800682c <__smakebuf_r+0x18>
 800684c:	f023 0303 	bic.w	r3, r3, #3
 8006850:	f043 0302 	orr.w	r3, r3, #2
 8006854:	81a3      	strh	r3, [r4, #12]
 8006856:	e7e3      	b.n	8006820 <__smakebuf_r+0xc>
 8006858:	4b0d      	ldr	r3, [pc, #52]	; (8006890 <__smakebuf_r+0x7c>)
 800685a:	62b3      	str	r3, [r6, #40]	; 0x28
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	6020      	str	r0, [r4, #0]
 8006860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006864:	81a3      	strh	r3, [r4, #12]
 8006866:	9b00      	ldr	r3, [sp, #0]
 8006868:	6163      	str	r3, [r4, #20]
 800686a:	9b01      	ldr	r3, [sp, #4]
 800686c:	6120      	str	r0, [r4, #16]
 800686e:	b15b      	cbz	r3, 8006888 <__smakebuf_r+0x74>
 8006870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006874:	4630      	mov	r0, r6
 8006876:	f000 f8d1 	bl	8006a1c <_isatty_r>
 800687a:	b128      	cbz	r0, 8006888 <__smakebuf_r+0x74>
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	f023 0303 	bic.w	r3, r3, #3
 8006882:	f043 0301 	orr.w	r3, r3, #1
 8006886:	81a3      	strh	r3, [r4, #12]
 8006888:	89a0      	ldrh	r0, [r4, #12]
 800688a:	4305      	orrs	r5, r0
 800688c:	81a5      	strh	r5, [r4, #12]
 800688e:	e7cd      	b.n	800682c <__smakebuf_r+0x18>
 8006890:	08006625 	.word	0x08006625

08006894 <_malloc_usable_size_r>:
 8006894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006898:	1f18      	subs	r0, r3, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	bfbc      	itt	lt
 800689e:	580b      	ldrlt	r3, [r1, r0]
 80068a0:	18c0      	addlt	r0, r0, r3
 80068a2:	4770      	bx	lr

080068a4 <_raise_r>:
 80068a4:	291f      	cmp	r1, #31
 80068a6:	b538      	push	{r3, r4, r5, lr}
 80068a8:	4604      	mov	r4, r0
 80068aa:	460d      	mov	r5, r1
 80068ac:	d904      	bls.n	80068b8 <_raise_r+0x14>
 80068ae:	2316      	movs	r3, #22
 80068b0:	6003      	str	r3, [r0, #0]
 80068b2:	f04f 30ff 	mov.w	r0, #4294967295
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80068ba:	b112      	cbz	r2, 80068c2 <_raise_r+0x1e>
 80068bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068c0:	b94b      	cbnz	r3, 80068d6 <_raise_r+0x32>
 80068c2:	4620      	mov	r0, r4
 80068c4:	f000 f830 	bl	8006928 <_getpid_r>
 80068c8:	462a      	mov	r2, r5
 80068ca:	4601      	mov	r1, r0
 80068cc:	4620      	mov	r0, r4
 80068ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068d2:	f000 b817 	b.w	8006904 <_kill_r>
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d00a      	beq.n	80068f0 <_raise_r+0x4c>
 80068da:	1c59      	adds	r1, r3, #1
 80068dc:	d103      	bne.n	80068e6 <_raise_r+0x42>
 80068de:	2316      	movs	r3, #22
 80068e0:	6003      	str	r3, [r0, #0]
 80068e2:	2001      	movs	r0, #1
 80068e4:	e7e7      	b.n	80068b6 <_raise_r+0x12>
 80068e6:	2400      	movs	r4, #0
 80068e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80068ec:	4628      	mov	r0, r5
 80068ee:	4798      	blx	r3
 80068f0:	2000      	movs	r0, #0
 80068f2:	e7e0      	b.n	80068b6 <_raise_r+0x12>

080068f4 <raise>:
 80068f4:	4b02      	ldr	r3, [pc, #8]	; (8006900 <raise+0xc>)
 80068f6:	4601      	mov	r1, r0
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	f7ff bfd3 	b.w	80068a4 <_raise_r>
 80068fe:	bf00      	nop
 8006900:	20000050 	.word	0x20000050

08006904 <_kill_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4d07      	ldr	r5, [pc, #28]	; (8006924 <_kill_r+0x20>)
 8006908:	2300      	movs	r3, #0
 800690a:	4604      	mov	r4, r0
 800690c:	4608      	mov	r0, r1
 800690e:	4611      	mov	r1, r2
 8006910:	602b      	str	r3, [r5, #0]
 8006912:	f7fc fd75 	bl	8003400 <_kill>
 8006916:	1c43      	adds	r3, r0, #1
 8006918:	d102      	bne.n	8006920 <_kill_r+0x1c>
 800691a:	682b      	ldr	r3, [r5, #0]
 800691c:	b103      	cbz	r3, 8006920 <_kill_r+0x1c>
 800691e:	6023      	str	r3, [r4, #0]
 8006920:	bd38      	pop	{r3, r4, r5, pc}
 8006922:	bf00      	nop
 8006924:	20000268 	.word	0x20000268

08006928 <_getpid_r>:
 8006928:	f7fc bd62 	b.w	80033f0 <_getpid>

0800692c <__sread>:
 800692c:	b510      	push	{r4, lr}
 800692e:	460c      	mov	r4, r1
 8006930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006934:	f000 f894 	bl	8006a60 <_read_r>
 8006938:	2800      	cmp	r0, #0
 800693a:	bfab      	itete	ge
 800693c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800693e:	89a3      	ldrhlt	r3, [r4, #12]
 8006940:	181b      	addge	r3, r3, r0
 8006942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006946:	bfac      	ite	ge
 8006948:	6563      	strge	r3, [r4, #84]	; 0x54
 800694a:	81a3      	strhlt	r3, [r4, #12]
 800694c:	bd10      	pop	{r4, pc}

0800694e <__swrite>:
 800694e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006952:	461f      	mov	r7, r3
 8006954:	898b      	ldrh	r3, [r1, #12]
 8006956:	05db      	lsls	r3, r3, #23
 8006958:	4605      	mov	r5, r0
 800695a:	460c      	mov	r4, r1
 800695c:	4616      	mov	r6, r2
 800695e:	d505      	bpl.n	800696c <__swrite+0x1e>
 8006960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006964:	2302      	movs	r3, #2
 8006966:	2200      	movs	r2, #0
 8006968:	f000 f868 	bl	8006a3c <_lseek_r>
 800696c:	89a3      	ldrh	r3, [r4, #12]
 800696e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006976:	81a3      	strh	r3, [r4, #12]
 8006978:	4632      	mov	r2, r6
 800697a:	463b      	mov	r3, r7
 800697c:	4628      	mov	r0, r5
 800697e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006982:	f000 b817 	b.w	80069b4 <_write_r>

08006986 <__sseek>:
 8006986:	b510      	push	{r4, lr}
 8006988:	460c      	mov	r4, r1
 800698a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698e:	f000 f855 	bl	8006a3c <_lseek_r>
 8006992:	1c43      	adds	r3, r0, #1
 8006994:	89a3      	ldrh	r3, [r4, #12]
 8006996:	bf15      	itete	ne
 8006998:	6560      	strne	r0, [r4, #84]	; 0x54
 800699a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800699e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069a2:	81a3      	strheq	r3, [r4, #12]
 80069a4:	bf18      	it	ne
 80069a6:	81a3      	strhne	r3, [r4, #12]
 80069a8:	bd10      	pop	{r4, pc}

080069aa <__sclose>:
 80069aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ae:	f000 b813 	b.w	80069d8 <_close_r>
	...

080069b4 <_write_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4d07      	ldr	r5, [pc, #28]	; (80069d4 <_write_r+0x20>)
 80069b8:	4604      	mov	r4, r0
 80069ba:	4608      	mov	r0, r1
 80069bc:	4611      	mov	r1, r2
 80069be:	2200      	movs	r2, #0
 80069c0:	602a      	str	r2, [r5, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f7fc fd53 	bl	800346e <_write>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d102      	bne.n	80069d2 <_write_r+0x1e>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	b103      	cbz	r3, 80069d2 <_write_r+0x1e>
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	bd38      	pop	{r3, r4, r5, pc}
 80069d4:	20000268 	.word	0x20000268

080069d8 <_close_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4d06      	ldr	r5, [pc, #24]	; (80069f4 <_close_r+0x1c>)
 80069dc:	2300      	movs	r3, #0
 80069de:	4604      	mov	r4, r0
 80069e0:	4608      	mov	r0, r1
 80069e2:	602b      	str	r3, [r5, #0]
 80069e4:	f7fc fd5f 	bl	80034a6 <_close>
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	d102      	bne.n	80069f2 <_close_r+0x1a>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	b103      	cbz	r3, 80069f2 <_close_r+0x1a>
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
 80069f4:	20000268 	.word	0x20000268

080069f8 <_fstat_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4d07      	ldr	r5, [pc, #28]	; (8006a18 <_fstat_r+0x20>)
 80069fc:	2300      	movs	r3, #0
 80069fe:	4604      	mov	r4, r0
 8006a00:	4608      	mov	r0, r1
 8006a02:	4611      	mov	r1, r2
 8006a04:	602b      	str	r3, [r5, #0]
 8006a06:	f7fc fd5a 	bl	80034be <_fstat>
 8006a0a:	1c43      	adds	r3, r0, #1
 8006a0c:	d102      	bne.n	8006a14 <_fstat_r+0x1c>
 8006a0e:	682b      	ldr	r3, [r5, #0]
 8006a10:	b103      	cbz	r3, 8006a14 <_fstat_r+0x1c>
 8006a12:	6023      	str	r3, [r4, #0]
 8006a14:	bd38      	pop	{r3, r4, r5, pc}
 8006a16:	bf00      	nop
 8006a18:	20000268 	.word	0x20000268

08006a1c <_isatty_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4d06      	ldr	r5, [pc, #24]	; (8006a38 <_isatty_r+0x1c>)
 8006a20:	2300      	movs	r3, #0
 8006a22:	4604      	mov	r4, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	f7fc fd59 	bl	80034de <_isatty>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d102      	bne.n	8006a36 <_isatty_r+0x1a>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	b103      	cbz	r3, 8006a36 <_isatty_r+0x1a>
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	20000268 	.word	0x20000268

08006a3c <_lseek_r>:
 8006a3c:	b538      	push	{r3, r4, r5, lr}
 8006a3e:	4d07      	ldr	r5, [pc, #28]	; (8006a5c <_lseek_r+0x20>)
 8006a40:	4604      	mov	r4, r0
 8006a42:	4608      	mov	r0, r1
 8006a44:	4611      	mov	r1, r2
 8006a46:	2200      	movs	r2, #0
 8006a48:	602a      	str	r2, [r5, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f7fc fd52 	bl	80034f4 <_lseek>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	d102      	bne.n	8006a5a <_lseek_r+0x1e>
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	b103      	cbz	r3, 8006a5a <_lseek_r+0x1e>
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
 8006a5c:	20000268 	.word	0x20000268

08006a60 <_read_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4d07      	ldr	r5, [pc, #28]	; (8006a80 <_read_r+0x20>)
 8006a64:	4604      	mov	r4, r0
 8006a66:	4608      	mov	r0, r1
 8006a68:	4611      	mov	r1, r2
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	602a      	str	r2, [r5, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f7fc fce0 	bl	8003434 <_read>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	d102      	bne.n	8006a7e <_read_r+0x1e>
 8006a78:	682b      	ldr	r3, [r5, #0]
 8006a7a:	b103      	cbz	r3, 8006a7e <_read_r+0x1e>
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	bd38      	pop	{r3, r4, r5, pc}
 8006a80:	20000268 	.word	0x20000268
 8006a84:	00000000 	.word	0x00000000

08006a88 <log>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	ed2d 8b02 	vpush	{d8}
 8006a8e:	ec55 4b10 	vmov	r4, r5, d0
 8006a92:	f000 f841 	bl	8006b18 <__ieee754_log>
 8006a96:	4b1e      	ldr	r3, [pc, #120]	; (8006b10 <log+0x88>)
 8006a98:	eeb0 8a40 	vmov.f32	s16, s0
 8006a9c:	eef0 8a60 	vmov.f32	s17, s1
 8006aa0:	f993 3000 	ldrsb.w	r3, [r3]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	d01a      	beq.n	8006ade <log+0x56>
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	462b      	mov	r3, r5
 8006aac:	4620      	mov	r0, r4
 8006aae:	4629      	mov	r1, r5
 8006ab0:	f7fa f83c 	bl	8000b2c <__aeabi_dcmpun>
 8006ab4:	b998      	cbnz	r0, 8006ade <log+0x56>
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	2300      	movs	r3, #0
 8006aba:	4620      	mov	r0, r4
 8006abc:	4629      	mov	r1, r5
 8006abe:	f7fa f82b 	bl	8000b18 <__aeabi_dcmpgt>
 8006ac2:	b960      	cbnz	r0, 8006ade <log+0x56>
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	4620      	mov	r0, r4
 8006aca:	4629      	mov	r1, r5
 8006acc:	f7f9 fffc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ad0:	b160      	cbz	r0, 8006aec <log+0x64>
 8006ad2:	f7fd f911 	bl	8003cf8 <__errno>
 8006ad6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8006b08 <log+0x80>
 8006ada:	2322      	movs	r3, #34	; 0x22
 8006adc:	6003      	str	r3, [r0, #0]
 8006ade:	eeb0 0a48 	vmov.f32	s0, s16
 8006ae2:	eef0 0a68 	vmov.f32	s1, s17
 8006ae6:	ecbd 8b02 	vpop	{d8}
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	f7fd f904 	bl	8003cf8 <__errno>
 8006af0:	ecbd 8b02 	vpop	{d8}
 8006af4:	2321      	movs	r3, #33	; 0x21
 8006af6:	6003      	str	r3, [r0, #0]
 8006af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006afc:	4805      	ldr	r0, [pc, #20]	; (8006b14 <log+0x8c>)
 8006afe:	f000 b9c7 	b.w	8006e90 <nan>
 8006b02:	bf00      	nop
 8006b04:	f3af 8000 	nop.w
 8006b08:	00000000 	.word	0x00000000
 8006b0c:	fff00000 	.word	0xfff00000
 8006b10:	20000220 	.word	0x20000220
 8006b14:	080071d0 	.word	0x080071d0

08006b18 <__ieee754_log>:
 8006b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1c:	ec51 0b10 	vmov	r0, r1, d0
 8006b20:	ed2d 8b04 	vpush	{d8-d9}
 8006b24:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006b28:	b083      	sub	sp, #12
 8006b2a:	460d      	mov	r5, r1
 8006b2c:	da29      	bge.n	8006b82 <__ieee754_log+0x6a>
 8006b2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b32:	4303      	orrs	r3, r0
 8006b34:	ee10 2a10 	vmov	r2, s0
 8006b38:	d10c      	bne.n	8006b54 <__ieee754_log+0x3c>
 8006b3a:	49cf      	ldr	r1, [pc, #828]	; (8006e78 <__ieee754_log+0x360>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2000      	movs	r0, #0
 8006b42:	f7f9 fe83 	bl	800084c <__aeabi_ddiv>
 8006b46:	ec41 0b10 	vmov	d0, r0, r1
 8006b4a:	b003      	add	sp, #12
 8006b4c:	ecbd 8b04 	vpop	{d8-d9}
 8006b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b54:	2900      	cmp	r1, #0
 8006b56:	da05      	bge.n	8006b64 <__ieee754_log+0x4c>
 8006b58:	460b      	mov	r3, r1
 8006b5a:	f7f9 fb95 	bl	8000288 <__aeabi_dsub>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2300      	movs	r3, #0
 8006b62:	e7ee      	b.n	8006b42 <__ieee754_log+0x2a>
 8006b64:	4bc5      	ldr	r3, [pc, #788]	; (8006e7c <__ieee754_log+0x364>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	f7f9 fd46 	bl	80005f8 <__aeabi_dmul>
 8006b6c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8006b70:	460d      	mov	r5, r1
 8006b72:	4ac3      	ldr	r2, [pc, #780]	; (8006e80 <__ieee754_log+0x368>)
 8006b74:	4295      	cmp	r5, r2
 8006b76:	dd06      	ble.n	8006b86 <__ieee754_log+0x6e>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	f7f9 fb86 	bl	800028c <__adddf3>
 8006b80:	e7e1      	b.n	8006b46 <__ieee754_log+0x2e>
 8006b82:	2300      	movs	r3, #0
 8006b84:	e7f5      	b.n	8006b72 <__ieee754_log+0x5a>
 8006b86:	152c      	asrs	r4, r5, #20
 8006b88:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006b8c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006b90:	441c      	add	r4, r3
 8006b92:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8006b96:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8006b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b9e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8006ba2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8006ba6:	ea42 0105 	orr.w	r1, r2, r5
 8006baa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8006bae:	2200      	movs	r2, #0
 8006bb0:	4bb4      	ldr	r3, [pc, #720]	; (8006e84 <__ieee754_log+0x36c>)
 8006bb2:	f7f9 fb69 	bl	8000288 <__aeabi_dsub>
 8006bb6:	1cab      	adds	r3, r5, #2
 8006bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	4682      	mov	sl, r0
 8006bc0:	468b      	mov	fp, r1
 8006bc2:	f04f 0200 	mov.w	r2, #0
 8006bc6:	dc53      	bgt.n	8006c70 <__ieee754_log+0x158>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f7f9 ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bce:	b1d0      	cbz	r0, 8006c06 <__ieee754_log+0xee>
 8006bd0:	2c00      	cmp	r4, #0
 8006bd2:	f000 8122 	beq.w	8006e1a <__ieee754_log+0x302>
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f7f9 fca4 	bl	8000524 <__aeabi_i2d>
 8006bdc:	a390      	add	r3, pc, #576	; (adr r3, 8006e20 <__ieee754_log+0x308>)
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	4606      	mov	r6, r0
 8006be4:	460f      	mov	r7, r1
 8006be6:	f7f9 fd07 	bl	80005f8 <__aeabi_dmul>
 8006bea:	a38f      	add	r3, pc, #572	; (adr r3, 8006e28 <__ieee754_log+0x310>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	460d      	mov	r5, r1
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	4639      	mov	r1, r7
 8006bf8:	f7f9 fcfe 	bl	80005f8 <__aeabi_dmul>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4620      	mov	r0, r4
 8006c02:	4629      	mov	r1, r5
 8006c04:	e7ba      	b.n	8006b7c <__ieee754_log+0x64>
 8006c06:	a38a      	add	r3, pc, #552	; (adr r3, 8006e30 <__ieee754_log+0x318>)
 8006c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0c:	4650      	mov	r0, sl
 8006c0e:	4659      	mov	r1, fp
 8006c10:	f7f9 fcf2 	bl	80005f8 <__aeabi_dmul>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	2000      	movs	r0, #0
 8006c1a:	499b      	ldr	r1, [pc, #620]	; (8006e88 <__ieee754_log+0x370>)
 8006c1c:	f7f9 fb34 	bl	8000288 <__aeabi_dsub>
 8006c20:	4652      	mov	r2, sl
 8006c22:	4606      	mov	r6, r0
 8006c24:	460f      	mov	r7, r1
 8006c26:	465b      	mov	r3, fp
 8006c28:	4650      	mov	r0, sl
 8006c2a:	4659      	mov	r1, fp
 8006c2c:	f7f9 fce4 	bl	80005f8 <__aeabi_dmul>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4630      	mov	r0, r6
 8006c36:	4639      	mov	r1, r7
 8006c38:	f7f9 fcde 	bl	80005f8 <__aeabi_dmul>
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	460f      	mov	r7, r1
 8006c40:	b914      	cbnz	r4, 8006c48 <__ieee754_log+0x130>
 8006c42:	4632      	mov	r2, r6
 8006c44:	463b      	mov	r3, r7
 8006c46:	e0a2      	b.n	8006d8e <__ieee754_log+0x276>
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f7f9 fc6b 	bl	8000524 <__aeabi_i2d>
 8006c4e:	a374      	add	r3, pc, #464	; (adr r3, 8006e20 <__ieee754_log+0x308>)
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	4680      	mov	r8, r0
 8006c56:	4689      	mov	r9, r1
 8006c58:	f7f9 fcce 	bl	80005f8 <__aeabi_dmul>
 8006c5c:	a372      	add	r3, pc, #456	; (adr r3, 8006e28 <__ieee754_log+0x310>)
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	4604      	mov	r4, r0
 8006c64:	460d      	mov	r5, r1
 8006c66:	4640      	mov	r0, r8
 8006c68:	4649      	mov	r1, r9
 8006c6a:	f7f9 fcc5 	bl	80005f8 <__aeabi_dmul>
 8006c6e:	e0a7      	b.n	8006dc0 <__ieee754_log+0x2a8>
 8006c70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c74:	f7f9 fb0a 	bl	800028c <__adddf3>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4650      	mov	r0, sl
 8006c7e:	4659      	mov	r1, fp
 8006c80:	f7f9 fde4 	bl	800084c <__aeabi_ddiv>
 8006c84:	ec41 0b18 	vmov	d8, r0, r1
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f7f9 fc4b 	bl	8000524 <__aeabi_i2d>
 8006c8e:	ec53 2b18 	vmov	r2, r3, d8
 8006c92:	ec41 0b19 	vmov	d9, r0, r1
 8006c96:	ec51 0b18 	vmov	r0, r1, d8
 8006c9a:	f7f9 fcad 	bl	80005f8 <__aeabi_dmul>
 8006c9e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8006ca2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	4680      	mov	r8, r0
 8006cae:	4689      	mov	r9, r1
 8006cb0:	f7f9 fca2 	bl	80005f8 <__aeabi_dmul>
 8006cb4:	a360      	add	r3, pc, #384	; (adr r3, 8006e38 <__ieee754_log+0x320>)
 8006cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cba:	4606      	mov	r6, r0
 8006cbc:	460f      	mov	r7, r1
 8006cbe:	f7f9 fc9b 	bl	80005f8 <__aeabi_dmul>
 8006cc2:	a35f      	add	r3, pc, #380	; (adr r3, 8006e40 <__ieee754_log+0x328>)
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	f7f9 fae0 	bl	800028c <__adddf3>
 8006ccc:	4632      	mov	r2, r6
 8006cce:	463b      	mov	r3, r7
 8006cd0:	f7f9 fc92 	bl	80005f8 <__aeabi_dmul>
 8006cd4:	a35c      	add	r3, pc, #368	; (adr r3, 8006e48 <__ieee754_log+0x330>)
 8006cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cda:	f7f9 fad7 	bl	800028c <__adddf3>
 8006cde:	4632      	mov	r2, r6
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	f7f9 fc89 	bl	80005f8 <__aeabi_dmul>
 8006ce6:	a35a      	add	r3, pc, #360	; (adr r3, 8006e50 <__ieee754_log+0x338>)
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f7f9 face 	bl	800028c <__adddf3>
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	f7f9 fc80 	bl	80005f8 <__aeabi_dmul>
 8006cf8:	a357      	add	r3, pc, #348	; (adr r3, 8006e58 <__ieee754_log+0x340>)
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	4680      	mov	r8, r0
 8006d00:	4689      	mov	r9, r1
 8006d02:	4630      	mov	r0, r6
 8006d04:	4639      	mov	r1, r7
 8006d06:	f7f9 fc77 	bl	80005f8 <__aeabi_dmul>
 8006d0a:	a355      	add	r3, pc, #340	; (adr r3, 8006e60 <__ieee754_log+0x348>)
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	f7f9 fabc 	bl	800028c <__adddf3>
 8006d14:	4632      	mov	r2, r6
 8006d16:	463b      	mov	r3, r7
 8006d18:	f7f9 fc6e 	bl	80005f8 <__aeabi_dmul>
 8006d1c:	a352      	add	r3, pc, #328	; (adr r3, 8006e68 <__ieee754_log+0x350>)
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	f7f9 fab3 	bl	800028c <__adddf3>
 8006d26:	4632      	mov	r2, r6
 8006d28:	463b      	mov	r3, r7
 8006d2a:	f7f9 fc65 	bl	80005f8 <__aeabi_dmul>
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4602      	mov	r2, r0
 8006d32:	4649      	mov	r1, r9
 8006d34:	4640      	mov	r0, r8
 8006d36:	f7f9 faa9 	bl	800028c <__adddf3>
 8006d3a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006d3e:	9b01      	ldr	r3, [sp, #4]
 8006d40:	3551      	adds	r5, #81	; 0x51
 8006d42:	431d      	orrs	r5, r3
 8006d44:	2d00      	cmp	r5, #0
 8006d46:	4680      	mov	r8, r0
 8006d48:	4689      	mov	r9, r1
 8006d4a:	dd48      	ble.n	8006dde <__ieee754_log+0x2c6>
 8006d4c:	4b4e      	ldr	r3, [pc, #312]	; (8006e88 <__ieee754_log+0x370>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	4650      	mov	r0, sl
 8006d52:	4659      	mov	r1, fp
 8006d54:	f7f9 fc50 	bl	80005f8 <__aeabi_dmul>
 8006d58:	4652      	mov	r2, sl
 8006d5a:	465b      	mov	r3, fp
 8006d5c:	f7f9 fc4c 	bl	80005f8 <__aeabi_dmul>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4606      	mov	r6, r0
 8006d66:	460f      	mov	r7, r1
 8006d68:	4640      	mov	r0, r8
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	f7f9 fa8e 	bl	800028c <__adddf3>
 8006d70:	ec53 2b18 	vmov	r2, r3, d8
 8006d74:	f7f9 fc40 	bl	80005f8 <__aeabi_dmul>
 8006d78:	4680      	mov	r8, r0
 8006d7a:	4689      	mov	r9, r1
 8006d7c:	b964      	cbnz	r4, 8006d98 <__ieee754_log+0x280>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	4630      	mov	r0, r6
 8006d84:	4639      	mov	r1, r7
 8006d86:	f7f9 fa7f 	bl	8000288 <__aeabi_dsub>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4650      	mov	r0, sl
 8006d90:	4659      	mov	r1, fp
 8006d92:	f7f9 fa79 	bl	8000288 <__aeabi_dsub>
 8006d96:	e6d6      	b.n	8006b46 <__ieee754_log+0x2e>
 8006d98:	a321      	add	r3, pc, #132	; (adr r3, 8006e20 <__ieee754_log+0x308>)
 8006d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9e:	ec51 0b19 	vmov	r0, r1, d9
 8006da2:	f7f9 fc29 	bl	80005f8 <__aeabi_dmul>
 8006da6:	a320      	add	r3, pc, #128	; (adr r3, 8006e28 <__ieee754_log+0x310>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	4604      	mov	r4, r0
 8006dae:	460d      	mov	r5, r1
 8006db0:	ec51 0b19 	vmov	r0, r1, d9
 8006db4:	f7f9 fc20 	bl	80005f8 <__aeabi_dmul>
 8006db8:	4642      	mov	r2, r8
 8006dba:	464b      	mov	r3, r9
 8006dbc:	f7f9 fa66 	bl	800028c <__adddf3>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	4639      	mov	r1, r7
 8006dc8:	f7f9 fa5e 	bl	8000288 <__aeabi_dsub>
 8006dcc:	4652      	mov	r2, sl
 8006dce:	465b      	mov	r3, fp
 8006dd0:	f7f9 fa5a 	bl	8000288 <__aeabi_dsub>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4620      	mov	r0, r4
 8006dda:	4629      	mov	r1, r5
 8006ddc:	e7d9      	b.n	8006d92 <__ieee754_log+0x27a>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4650      	mov	r0, sl
 8006de4:	4659      	mov	r1, fp
 8006de6:	f7f9 fa4f 	bl	8000288 <__aeabi_dsub>
 8006dea:	ec53 2b18 	vmov	r2, r3, d8
 8006dee:	f7f9 fc03 	bl	80005f8 <__aeabi_dmul>
 8006df2:	4606      	mov	r6, r0
 8006df4:	460f      	mov	r7, r1
 8006df6:	2c00      	cmp	r4, #0
 8006df8:	f43f af23 	beq.w	8006c42 <__ieee754_log+0x12a>
 8006dfc:	a308      	add	r3, pc, #32	; (adr r3, 8006e20 <__ieee754_log+0x308>)
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	ec51 0b19 	vmov	r0, r1, d9
 8006e06:	f7f9 fbf7 	bl	80005f8 <__aeabi_dmul>
 8006e0a:	a307      	add	r3, pc, #28	; (adr r3, 8006e28 <__ieee754_log+0x310>)
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	4604      	mov	r4, r0
 8006e12:	460d      	mov	r5, r1
 8006e14:	ec51 0b19 	vmov	r0, r1, d9
 8006e18:	e727      	b.n	8006c6a <__ieee754_log+0x152>
 8006e1a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8006e70 <__ieee754_log+0x358>
 8006e1e:	e694      	b.n	8006b4a <__ieee754_log+0x32>
 8006e20:	fee00000 	.word	0xfee00000
 8006e24:	3fe62e42 	.word	0x3fe62e42
 8006e28:	35793c76 	.word	0x35793c76
 8006e2c:	3dea39ef 	.word	0x3dea39ef
 8006e30:	55555555 	.word	0x55555555
 8006e34:	3fd55555 	.word	0x3fd55555
 8006e38:	df3e5244 	.word	0xdf3e5244
 8006e3c:	3fc2f112 	.word	0x3fc2f112
 8006e40:	96cb03de 	.word	0x96cb03de
 8006e44:	3fc74664 	.word	0x3fc74664
 8006e48:	94229359 	.word	0x94229359
 8006e4c:	3fd24924 	.word	0x3fd24924
 8006e50:	55555593 	.word	0x55555593
 8006e54:	3fe55555 	.word	0x3fe55555
 8006e58:	d078c69f 	.word	0xd078c69f
 8006e5c:	3fc39a09 	.word	0x3fc39a09
 8006e60:	1d8e78af 	.word	0x1d8e78af
 8006e64:	3fcc71c5 	.word	0x3fcc71c5
 8006e68:	9997fa04 	.word	0x9997fa04
 8006e6c:	3fd99999 	.word	0x3fd99999
	...
 8006e78:	c3500000 	.word	0xc3500000
 8006e7c:	43500000 	.word	0x43500000
 8006e80:	7fefffff 	.word	0x7fefffff
 8006e84:	3ff00000 	.word	0x3ff00000
 8006e88:	3fe00000 	.word	0x3fe00000
 8006e8c:	00000000 	.word	0x00000000

08006e90 <nan>:
 8006e90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006e98 <nan+0x8>
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	00000000 	.word	0x00000000
 8006e9c:	7ff80000 	.word	0x7ff80000

08006ea0 <_init>:
 8006ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea2:	bf00      	nop
 8006ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ea6:	bc08      	pop	{r3}
 8006ea8:	469e      	mov	lr, r3
 8006eaa:	4770      	bx	lr

08006eac <_fini>:
 8006eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eae:	bf00      	nop
 8006eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eb2:	bc08      	pop	{r3}
 8006eb4:	469e      	mov	lr, r3
 8006eb6:	4770      	bx	lr
